
RTOS_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e2c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08003fdc  08003fdc  00013fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004098  08004098  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08004098  08004098  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004098  08004098  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004098  08004098  00014098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800409c  0800409c  0001409c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080040a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00004984  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200049f0  200049f0  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c39a  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c7b  00000000  00000000  0002c436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000940  00000000  00000000  0002e0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000878  00000000  00000000  0002e9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ca60  00000000  00000000  0002f270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009fa5  00000000  00000000  0004bcd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009963c  00000000  00000000  00055c75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000ef2b1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000298c  00000000  00000000  000ef304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003fc4 	.word	0x08003fc4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08003fc4 	.word	0x08003fc4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <Console_Init>:
int callback = 0;



 void Console_Init(USART_TypeDef *port,int32_t baudrate)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	6039      	str	r1, [r7, #0]
	if(port == USART1)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4a9d      	ldr	r2, [pc, #628]	; (8000524 <Console_Init+0x284>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d13b      	bne.n	800032a <Console_Init+0x8a>
	{
		RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
 80002b2:	4b9d      	ldr	r3, [pc, #628]	; (8000528 <Console_Init+0x288>)
 80002b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002b6:	4a9c      	ldr	r2, [pc, #624]	; (8000528 <Console_Init+0x288>)
 80002b8:	f043 0310 	orr.w	r3, r3, #16
 80002bc:	6453      	str	r3, [r2, #68]	; 0x44
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 80002be:	4b9a      	ldr	r3, [pc, #616]	; (8000528 <Console_Init+0x288>)
 80002c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c2:	4a99      	ldr	r2, [pc, #612]	; (8000528 <Console_Init+0x288>)
 80002c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002c8:	6313      	str	r3, [r2, #48]	; 0x30
		port -> CR3 |= USART_CR3_DMAT;
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	695b      	ldr	r3, [r3, #20]
 80002ce:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	615a      	str	r2, [r3, #20]
		DMA2_Stream7 -> CR |= 4 << 25  | 0 << 16 | 0 << 13 | 0 << 11 | 1 << 10 | 0 << 8 | 1 << 6 |
 80002d6:	4b95      	ldr	r3, [pc, #596]	; (800052c <Console_Init+0x28c>)
 80002d8:	681a      	ldr	r2, [r3, #0]
 80002da:	4994      	ldr	r1, [pc, #592]	; (800052c <Console_Init+0x28c>)
 80002dc:	4b94      	ldr	r3, [pc, #592]	; (8000530 <Console_Init+0x290>)
 80002de:	4313      	orrs	r3, r2
 80002e0:	600b      	str	r3, [r1, #0]
				1 << 4 | 3 << 16;
		GPIO_Pin_Setup(GPIOA, 9, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART1_TX);
 80002e2:	2307      	movs	r3, #7
 80002e4:	228c      	movs	r2, #140	; 0x8c
 80002e6:	2109      	movs	r1, #9
 80002e8:	4892      	ldr	r0, [pc, #584]	; (8000534 <Console_Init+0x294>)
 80002ea:	f002 feed 	bl	80030c8 <GPIO_Pin_Setup>
		GPIO_Pin_Setup(GPIOA, 10, ALTERNATE_FUNCTION_OUTPUT_OPENDRAIN, USART1_RX);
 80002ee:	2307      	movs	r3, #7
 80002f0:	229c      	movs	r2, #156	; 0x9c
 80002f2:	210a      	movs	r1, #10
 80002f4:	488f      	ldr	r0, [pc, #572]	; (8000534 <Console_Init+0x294>)
 80002f6:	f002 fee7 	bl	80030c8 <GPIO_Pin_Setup>

		port ->BRR |= (int)(84000000 / (16 * baudrate)) << 4;
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	689b      	ldr	r3, [r3, #8]
 80002fe:	683a      	ldr	r2, [r7, #0]
 8000300:	0112      	lsls	r2, r2, #4
 8000302:	498d      	ldr	r1, [pc, #564]	; (8000538 <Console_Init+0x298>)
 8000304:	fb91 f2f2 	sdiv	r2, r1, r2
 8000308:	0112      	lsls	r2, r2, #4
 800030a:	431a      	orrs	r2, r3
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	609a      	str	r2, [r3, #8]
		port -> CR1 |= USART_CR1_TE | USART_CR1_RE;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	68db      	ldr	r3, [r3, #12]
 8000314:	f043 020c 	orr.w	r2, r3, #12
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	60da      	str	r2, [r3, #12]
		port -> CR1 |= USART_CR1_UE;
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	68db      	ldr	r3, [r3, #12]
 8000320:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	60da      	str	r2, [r3, #12]
		port ->CR1 |=  USART_CR1_RE  ;
	}



}
 8000328:	e0f8      	b.n	800051c <Console_Init+0x27c>
	else if(port == USART6)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4a83      	ldr	r2, [pc, #524]	; (800053c <Console_Init+0x29c>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d12d      	bne.n	800038e <Console_Init+0xee>
		RCC -> APB2ENR |= RCC_APB2ENR_USART6EN;
 8000332:	4b7d      	ldr	r3, [pc, #500]	; (8000528 <Console_Init+0x288>)
 8000334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000336:	4a7c      	ldr	r2, [pc, #496]	; (8000528 <Console_Init+0x288>)
 8000338:	f043 0320 	orr.w	r3, r3, #32
 800033c:	6453      	str	r3, [r2, #68]	; 0x44
		GPIO_Pin_Setup(GPIOC, 6, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART6_TX);
 800033e:	2307      	movs	r3, #7
 8000340:	228c      	movs	r2, #140	; 0x8c
 8000342:	2106      	movs	r1, #6
 8000344:	487e      	ldr	r0, [pc, #504]	; (8000540 <Console_Init+0x2a0>)
 8000346:	f002 febf 	bl	80030c8 <GPIO_Pin_Setup>
		GPIO_Pin_Setup(GPIOC, 7, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART6_RX);
 800034a:	2307      	movs	r3, #7
 800034c:	228c      	movs	r2, #140	; 0x8c
 800034e:	2107      	movs	r1, #7
 8000350:	487b      	ldr	r0, [pc, #492]	; (8000540 <Console_Init+0x2a0>)
 8000352:	f002 feb9 	bl	80030c8 <GPIO_Pin_Setup>
		port ->CR1 |= USART_CR1_UE;
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	68db      	ldr	r3, [r3, #12]
 800035a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	60da      	str	r2, [r3, #12]
		port->BRR = (int)(84000000 / (16 * baudrate)) << 4;
 8000362:	683b      	ldr	r3, [r7, #0]
 8000364:	011b      	lsls	r3, r3, #4
 8000366:	4a74      	ldr	r2, [pc, #464]	; (8000538 <Console_Init+0x298>)
 8000368:	fb92 f3f3 	sdiv	r3, r2, r3
 800036c:	011b      	lsls	r3, r3, #4
 800036e:	461a      	mov	r2, r3
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	609a      	str	r2, [r3, #8]
		port ->CR1 |= USART_CR1_TE ;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	68db      	ldr	r3, [r3, #12]
 8000378:	f043 0208 	orr.w	r2, r3, #8
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	60da      	str	r2, [r3, #12]
		port ->CR1 |=  USART_CR1_RE  ;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	68db      	ldr	r3, [r3, #12]
 8000384:	f043 0204 	orr.w	r2, r3, #4
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	60da      	str	r2, [r3, #12]
}
 800038c:	e0c6      	b.n	800051c <Console_Init+0x27c>
	else if(port == USART2)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	4a6c      	ldr	r2, [pc, #432]	; (8000544 <Console_Init+0x2a4>)
 8000392:	4293      	cmp	r3, r2
 8000394:	d12d      	bne.n	80003f2 <Console_Init+0x152>
		RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 8000396:	4b64      	ldr	r3, [pc, #400]	; (8000528 <Console_Init+0x288>)
 8000398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800039a:	4a63      	ldr	r2, [pc, #396]	; (8000528 <Console_Init+0x288>)
 800039c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003a0:	6413      	str	r3, [r2, #64]	; 0x40
		GPIO_Pin_Setup(GPIOA, 2, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART2_TX);
 80003a2:	2307      	movs	r3, #7
 80003a4:	228c      	movs	r2, #140	; 0x8c
 80003a6:	2102      	movs	r1, #2
 80003a8:	4862      	ldr	r0, [pc, #392]	; (8000534 <Console_Init+0x294>)
 80003aa:	f002 fe8d 	bl	80030c8 <GPIO_Pin_Setup>
		GPIO_Pin_Setup(GPIOA, 3, ALTERNATE_FUNCTION_OUTPUT_OPENDRAIN, USART2_RX);
 80003ae:	2307      	movs	r3, #7
 80003b0:	229c      	movs	r2, #156	; 0x9c
 80003b2:	2103      	movs	r1, #3
 80003b4:	485f      	ldr	r0, [pc, #380]	; (8000534 <Console_Init+0x294>)
 80003b6:	f002 fe87 	bl	80030c8 <GPIO_Pin_Setup>
		port ->CR1 |= USART_CR1_UE;
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	68db      	ldr	r3, [r3, #12]
 80003be:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	60da      	str	r2, [r3, #12]
		port->BRR = (int)(84000000 / ((16 * baudrate)*2)) << 4;
 80003c6:	683b      	ldr	r3, [r7, #0]
 80003c8:	015b      	lsls	r3, r3, #5
 80003ca:	4a5b      	ldr	r2, [pc, #364]	; (8000538 <Console_Init+0x298>)
 80003cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80003d0:	011b      	lsls	r3, r3, #4
 80003d2:	461a      	mov	r2, r3
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	609a      	str	r2, [r3, #8]
		port ->CR1 |= USART_CR1_TE ;
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	68db      	ldr	r3, [r3, #12]
 80003dc:	f043 0208 	orr.w	r2, r3, #8
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	60da      	str	r2, [r3, #12]
		port ->CR1 |=  USART_CR1_RE  ;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	68db      	ldr	r3, [r3, #12]
 80003e8:	f043 0204 	orr.w	r2, r3, #4
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	60da      	str	r2, [r3, #12]
}
 80003f0:	e094      	b.n	800051c <Console_Init+0x27c>
	else if(port == USART3)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	4a54      	ldr	r2, [pc, #336]	; (8000548 <Console_Init+0x2a8>)
 80003f6:	4293      	cmp	r3, r2
 80003f8:	d12d      	bne.n	8000456 <Console_Init+0x1b6>
		RCC -> APB1ENR |= RCC_APB1ENR_USART3EN;
 80003fa:	4b4b      	ldr	r3, [pc, #300]	; (8000528 <Console_Init+0x288>)
 80003fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003fe:	4a4a      	ldr	r2, [pc, #296]	; (8000528 <Console_Init+0x288>)
 8000400:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000404:	6413      	str	r3, [r2, #64]	; 0x40
		GPIO_Pin_Setup(GPIOB, 10, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART3_TX);
 8000406:	2307      	movs	r3, #7
 8000408:	228c      	movs	r2, #140	; 0x8c
 800040a:	210a      	movs	r1, #10
 800040c:	484f      	ldr	r0, [pc, #316]	; (800054c <Console_Init+0x2ac>)
 800040e:	f002 fe5b 	bl	80030c8 <GPIO_Pin_Setup>
		GPIO_Pin_Setup(GPIOB, 11, ALTERNATE_FUNCTION_OUTPUT_OPENDRAIN, USART3_RX);
 8000412:	2307      	movs	r3, #7
 8000414:	229c      	movs	r2, #156	; 0x9c
 8000416:	210b      	movs	r1, #11
 8000418:	484c      	ldr	r0, [pc, #304]	; (800054c <Console_Init+0x2ac>)
 800041a:	f002 fe55 	bl	80030c8 <GPIO_Pin_Setup>
		port ->CR1 |= USART_CR1_UE;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	68db      	ldr	r3, [r3, #12]
 8000422:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	60da      	str	r2, [r3, #12]
		port->BRR = (int)(84000000 / ((16 * baudrate)*2)) << 4;
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	015b      	lsls	r3, r3, #5
 800042e:	4a42      	ldr	r2, [pc, #264]	; (8000538 <Console_Init+0x298>)
 8000430:	fb92 f3f3 	sdiv	r3, r2, r3
 8000434:	011b      	lsls	r3, r3, #4
 8000436:	461a      	mov	r2, r3
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	609a      	str	r2, [r3, #8]
		port ->CR1 |= USART_CR1_TE ;
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	68db      	ldr	r3, [r3, #12]
 8000440:	f043 0208 	orr.w	r2, r3, #8
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	60da      	str	r2, [r3, #12]
		port ->CR1 |=  USART_CR1_RE  ;
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	68db      	ldr	r3, [r3, #12]
 800044c:	f043 0204 	orr.w	r2, r3, #4
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	60da      	str	r2, [r3, #12]
}
 8000454:	e062      	b.n	800051c <Console_Init+0x27c>
	else if(port == UART4)
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	4a3d      	ldr	r2, [pc, #244]	; (8000550 <Console_Init+0x2b0>)
 800045a:	4293      	cmp	r3, r2
 800045c:	d12d      	bne.n	80004ba <Console_Init+0x21a>
		RCC -> APB1ENR |= RCC_APB1ENR_UART4EN;
 800045e:	4b32      	ldr	r3, [pc, #200]	; (8000528 <Console_Init+0x288>)
 8000460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000462:	4a31      	ldr	r2, [pc, #196]	; (8000528 <Console_Init+0x288>)
 8000464:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000468:	6413      	str	r3, [r2, #64]	; 0x40
		GPIO_Pin_Setup(GPIOA, 0, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART4_TX);
 800046a:	2307      	movs	r3, #7
 800046c:	228c      	movs	r2, #140	; 0x8c
 800046e:	2100      	movs	r1, #0
 8000470:	4830      	ldr	r0, [pc, #192]	; (8000534 <Console_Init+0x294>)
 8000472:	f002 fe29 	bl	80030c8 <GPIO_Pin_Setup>
		GPIO_Pin_Setup(GPIOA, 1, ALTERNATE_FUNCTION_OUTPUT_OPENDRAIN, USART4_RX);
 8000476:	2307      	movs	r3, #7
 8000478:	229c      	movs	r2, #156	; 0x9c
 800047a:	2101      	movs	r1, #1
 800047c:	482d      	ldr	r0, [pc, #180]	; (8000534 <Console_Init+0x294>)
 800047e:	f002 fe23 	bl	80030c8 <GPIO_Pin_Setup>
		port ->CR1 |= USART_CR1_UE;
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	68db      	ldr	r3, [r3, #12]
 8000486:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	60da      	str	r2, [r3, #12]
		port->BRR = (int)(84000000 / ((16 * baudrate)*2)) << 4;
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	015b      	lsls	r3, r3, #5
 8000492:	4a29      	ldr	r2, [pc, #164]	; (8000538 <Console_Init+0x298>)
 8000494:	fb92 f3f3 	sdiv	r3, r2, r3
 8000498:	011b      	lsls	r3, r3, #4
 800049a:	461a      	mov	r2, r3
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	609a      	str	r2, [r3, #8]
		port ->CR1 |= USART_CR1_TE ;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	68db      	ldr	r3, [r3, #12]
 80004a4:	f043 0208 	orr.w	r2, r3, #8
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	60da      	str	r2, [r3, #12]
		port ->CR1 |=  USART_CR1_RE  ;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	68db      	ldr	r3, [r3, #12]
 80004b0:	f043 0204 	orr.w	r2, r3, #4
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	60da      	str	r2, [r3, #12]
}
 80004b8:	e030      	b.n	800051c <Console_Init+0x27c>
	else if(port == UART5)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4a25      	ldr	r2, [pc, #148]	; (8000554 <Console_Init+0x2b4>)
 80004be:	4293      	cmp	r3, r2
 80004c0:	d12c      	bne.n	800051c <Console_Init+0x27c>
		RCC -> APB1ENR |= RCC_APB1ENR_UART5EN;
 80004c2:	4b19      	ldr	r3, [pc, #100]	; (8000528 <Console_Init+0x288>)
 80004c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004c6:	4a18      	ldr	r2, [pc, #96]	; (8000528 <Console_Init+0x288>)
 80004c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80004cc:	6413      	str	r3, [r2, #64]	; 0x40
		GPIO_Pin_Setup(GPIOC, 12, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART5_TX);
 80004ce:	2307      	movs	r3, #7
 80004d0:	228c      	movs	r2, #140	; 0x8c
 80004d2:	210c      	movs	r1, #12
 80004d4:	481a      	ldr	r0, [pc, #104]	; (8000540 <Console_Init+0x2a0>)
 80004d6:	f002 fdf7 	bl	80030c8 <GPIO_Pin_Setup>
		GPIO_Pin_Setup(GPIOD, 2, ALTERNATE_FUNCTION_OUTPUT_OPENDRAIN, USART5_RX);
 80004da:	2307      	movs	r3, #7
 80004dc:	229c      	movs	r2, #156	; 0x9c
 80004de:	2102      	movs	r1, #2
 80004e0:	481d      	ldr	r0, [pc, #116]	; (8000558 <Console_Init+0x2b8>)
 80004e2:	f002 fdf1 	bl	80030c8 <GPIO_Pin_Setup>
		port ->CR1 |= USART_CR1_UE;
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	68db      	ldr	r3, [r3, #12]
 80004ea:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	60da      	str	r2, [r3, #12]
		port->BRR = (int)(84000000 / ((16 * baudrate)*2)) << 4;
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	015b      	lsls	r3, r3, #5
 80004f6:	4a10      	ldr	r2, [pc, #64]	; (8000538 <Console_Init+0x298>)
 80004f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80004fc:	011b      	lsls	r3, r3, #4
 80004fe:	461a      	mov	r2, r3
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	609a      	str	r2, [r3, #8]
		port ->CR1 |= USART_CR1_TE ;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	68db      	ldr	r3, [r3, #12]
 8000508:	f043 0208 	orr.w	r2, r3, #8
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	60da      	str	r2, [r3, #12]
		port ->CR1 |=  USART_CR1_RE  ;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	f043 0204 	orr.w	r2, r3, #4
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	60da      	str	r2, [r3, #12]
}
 800051c:	bf00      	nop
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	40011000 	.word	0x40011000
 8000528:	40023800 	.word	0x40023800
 800052c:	400264b8 	.word	0x400264b8
 8000530:	08030450 	.word	0x08030450
 8000534:	40020000 	.word	0x40020000
 8000538:	0501bd00 	.word	0x0501bd00
 800053c:	40011400 	.word	0x40011400
 8000540:	40020800 	.word	0x40020800
 8000544:	40004400 	.word	0x40004400
 8000548:	40004800 	.word	0x40004800
 800054c:	40020400 	.word	0x40020400
 8000550:	40004c00 	.word	0x40004c00
 8000554:	40005000 	.word	0x40005000
 8000558:	40020c00 	.word	0x40020c00

0800055c <printConsole>:


 void printConsole(USART_TypeDef *port,char *msg, ...)
{
 800055c:	b40e      	push	{r1, r2, r3}
 800055e:	b580      	push	{r7, lr}
 8000560:	f5ad 7d7f 	sub.w	sp, sp, #1020	; 0x3fc
 8000564:	af00      	add	r7, sp, #0
 8000566:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800056a:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800056e:	6018      	str	r0, [r3, #0]

char buff[1000];
//	#ifdef DEBUG_UART
	va_list args;
	va_start(args, msg);
 8000570:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 8000574:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8000578:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 800057c:	601a      	str	r2, [r3, #0]
	vsprintf(buff, msg, args);
 800057e:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8000582:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8000586:	f107 0010 	add.w	r0, r7, #16
 800058a:	681a      	ldr	r2, [r3, #0]
 800058c:	f8d7 1404 	ldr.w	r1, [r7, #1028]	; 0x404
 8000590:	f003 f8ce 	bl	8003730 <vsiprintf>
	DMA2_Stream7 -> PAR = (uint32_t)&port -> DR;
 8000594:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8000598:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	1d1a      	adds	r2, r3, #4
 80005a0:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <printConsole+0x98>)
 80005a2:	609a      	str	r2, [r3, #8]
	DMA2_Stream7 -> M0AR = (uint32_t)&buff[0];
 80005a4:	4a13      	ldr	r2, [pc, #76]	; (80005f4 <printConsole+0x98>)
 80005a6:	f107 0310 	add.w	r3, r7, #16
 80005aa:	60d3      	str	r3, [r2, #12]
	DMA2_Stream7 -> NDTR = (uint16_t)strlen(buff);
 80005ac:	f107 0310 	add.w	r3, r7, #16
 80005b0:	4618      	mov	r0, r3
 80005b2:	f7ff fe1d 	bl	80001f0 <strlen>
 80005b6:	4603      	mov	r3, r0
 80005b8:	b29a      	uxth	r2, r3
 80005ba:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <printConsole+0x98>)
 80005bc:	605a      	str	r2, [r3, #4]
	DMA2_Stream7 -> CR |= DMA_SxCR_EN;
 80005be:	4b0d      	ldr	r3, [pc, #52]	; (80005f4 <printConsole+0x98>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a0c      	ldr	r2, [pc, #48]	; (80005f4 <printConsole+0x98>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	6013      	str	r3, [r2, #0]
	while((DMA2->HISR & DMA_HIFCR_CTCIF7) == 0){}
 80005ca:	bf00      	nop
 80005cc:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <printConsole+0x9c>)
 80005ce:	685b      	ldr	r3, [r3, #4]
 80005d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d0f9      	beq.n	80005cc <printConsole+0x70>
	DMA2 ->HIFCR |= DMA_HIFCR_CTCIF7;
 80005d8:	4b07      	ldr	r3, [pc, #28]	; (80005f8 <printConsole+0x9c>)
 80005da:	68db      	ldr	r3, [r3, #12]
 80005dc:	4a06      	ldr	r2, [pc, #24]	; (80005f8 <printConsole+0x9c>)
 80005de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80005e2:	60d3      	str	r3, [r2, #12]
////		port -> CR1 |= USART_CR1_SBK;
//		while (!(port->SR & USART_SR_TXE));
//	}

//	#endif
}
 80005e4:	bf00      	nop
 80005e6:	f507 777f 	add.w	r7, r7, #1020	; 0x3fc
 80005ea:	46bd      	mov	sp, r7
 80005ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005f0:	b003      	add	sp, #12
 80005f2:	4770      	bx	lr
 80005f4:	400264b8 	.word	0x400264b8
 80005f8:	40026400 	.word	0x40026400

080005fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	6039      	str	r1, [r7, #0]
 8000606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060c:	2b00      	cmp	r3, #0
 800060e:	db0a      	blt.n	8000626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	b2da      	uxtb	r2, r3
 8000614:	490c      	ldr	r1, [pc, #48]	; (8000648 <__NVIC_SetPriority+0x4c>)
 8000616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061a:	0112      	lsls	r2, r2, #4
 800061c:	b2d2      	uxtb	r2, r2
 800061e:	440b      	add	r3, r1
 8000620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000624:	e00a      	b.n	800063c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	b2da      	uxtb	r2, r3
 800062a:	4908      	ldr	r1, [pc, #32]	; (800064c <__NVIC_SetPriority+0x50>)
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	f003 030f 	and.w	r3, r3, #15
 8000632:	3b04      	subs	r3, #4
 8000634:	0112      	lsls	r2, r2, #4
 8000636:	b2d2      	uxtb	r2, r2
 8000638:	440b      	add	r3, r1
 800063a:	761a      	strb	r2, [r3, #24]
}
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	e000e100 	.word	0xe000e100
 800064c:	e000ed00 	.word	0xe000ed00

08000650 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8000654:	2100      	movs	r1, #0
 8000656:	f06f 0004 	mvn.w	r0, #4
 800065a:	f7ff ffcf 	bl	80005fc <__NVIC_SetPriority>
#endif
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
	...

08000664 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800066a:	f3ef 8305 	mrs	r3, IPSR
 800066e:	603b      	str	r3, [r7, #0]
  return(result);
 8000670:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8000672:	2b00      	cmp	r3, #0
 8000674:	d003      	beq.n	800067e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8000676:	f06f 0305 	mvn.w	r3, #5
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	e00c      	b.n	8000698 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800067e:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <osKernelInitialize+0x44>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d105      	bne.n	8000692 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8000686:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <osKernelInitialize+0x44>)
 8000688:	2201      	movs	r2, #1
 800068a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800068c:	2300      	movs	r3, #0
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	e002      	b.n	8000698 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8000692:	f04f 33ff 	mov.w	r3, #4294967295
 8000696:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8000698:	687b      	ldr	r3, [r7, #4]
}
 800069a:	4618      	mov	r0, r3
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	20000088 	.word	0x20000088

080006ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80006b2:	f3ef 8305 	mrs	r3, IPSR
 80006b6:	603b      	str	r3, [r7, #0]
  return(result);
 80006b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d003      	beq.n	80006c6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80006be:	f06f 0305 	mvn.w	r3, #5
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	e010      	b.n	80006e8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <osKernelStart+0x48>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d109      	bne.n	80006e2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80006ce:	f7ff ffbf 	bl	8000650 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80006d2:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <osKernelStart+0x48>)
 80006d4:	2202      	movs	r2, #2
 80006d6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80006d8:	f001 f866 	bl	80017a8 <vTaskStartScheduler>
      stat = osOK;
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	e002      	b.n	80006e8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80006e2:	f04f 33ff 	mov.w	r3, #4294967295
 80006e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80006e8:	687b      	ldr	r3, [r7, #4]
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000088 	.word	0x20000088

080006f8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08e      	sub	sp, #56	; 0x38
 80006fc:	af04      	add	r7, sp, #16
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8000704:	2300      	movs	r3, #0
 8000706:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000708:	f3ef 8305 	mrs	r3, IPSR
 800070c:	617b      	str	r3, [r7, #20]
  return(result);
 800070e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8000710:	2b00      	cmp	r3, #0
 8000712:	d17e      	bne.n	8000812 <osThreadNew+0x11a>
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d07b      	beq.n	8000812 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800071a:	2380      	movs	r3, #128	; 0x80
 800071c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800071e:	2318      	movs	r3, #24
 8000720:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8000722:	2300      	movs	r3, #0
 8000724:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8000726:	f04f 33ff 	mov.w	r3, #4294967295
 800072a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d045      	beq.n	80007be <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d002      	beq.n	8000740 <osThreadNew+0x48>
        name = attr->name;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d002      	beq.n	800074e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d008      	beq.n	8000766 <osThreadNew+0x6e>
 8000754:	69fb      	ldr	r3, [r7, #28]
 8000756:	2b38      	cmp	r3, #56	; 0x38
 8000758:	d805      	bhi.n	8000766 <osThreadNew+0x6e>
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	685b      	ldr	r3, [r3, #4]
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <osThreadNew+0x72>
        return (NULL);
 8000766:	2300      	movs	r3, #0
 8000768:	e054      	b.n	8000814 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d003      	beq.n	800077a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	089b      	lsrs	r3, r3, #2
 8000778:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	689b      	ldr	r3, [r3, #8]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d00e      	beq.n	80007a0 <osThreadNew+0xa8>
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	68db      	ldr	r3, [r3, #12]
 8000786:	2b5b      	cmp	r3, #91	; 0x5b
 8000788:	d90a      	bls.n	80007a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800078e:	2b00      	cmp	r3, #0
 8000790:	d006      	beq.n	80007a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	695b      	ldr	r3, [r3, #20]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d002      	beq.n	80007a0 <osThreadNew+0xa8>
        mem = 1;
 800079a:	2301      	movs	r3, #1
 800079c:	61bb      	str	r3, [r7, #24]
 800079e:	e010      	b.n	80007c2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	689b      	ldr	r3, [r3, #8]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d10c      	bne.n	80007c2 <osThreadNew+0xca>
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d108      	bne.n	80007c2 <osThreadNew+0xca>
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	691b      	ldr	r3, [r3, #16]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d104      	bne.n	80007c2 <osThreadNew+0xca>
          mem = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61bb      	str	r3, [r7, #24]
 80007bc:	e001      	b.n	80007c2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80007be:	2300      	movs	r3, #0
 80007c0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80007c2:	69bb      	ldr	r3, [r7, #24]
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d110      	bne.n	80007ea <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80007d0:	9202      	str	r2, [sp, #8]
 80007d2:	9301      	str	r3, [sp, #4]
 80007d4:	69fb      	ldr	r3, [r7, #28]
 80007d6:	9300      	str	r3, [sp, #0]
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	6a3a      	ldr	r2, [r7, #32]
 80007dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80007de:	68f8      	ldr	r0, [r7, #12]
 80007e0:	f000 fe0c 	bl	80013fc <xTaskCreateStatic>
 80007e4:	4603      	mov	r3, r0
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	e013      	b.n	8000812 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80007ea:	69bb      	ldr	r3, [r7, #24]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d110      	bne.n	8000812 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80007f0:	6a3b      	ldr	r3, [r7, #32]
 80007f2:	b29a      	uxth	r2, r3
 80007f4:	f107 0310 	add.w	r3, r7, #16
 80007f8:	9301      	str	r3, [sp, #4]
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000802:	68f8      	ldr	r0, [r7, #12]
 8000804:	f000 fe57 	bl	80014b6 <xTaskCreate>
 8000808:	4603      	mov	r3, r0
 800080a:	2b01      	cmp	r3, #1
 800080c:	d001      	beq.n	8000812 <osThreadNew+0x11a>
            hTask = NULL;
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8000812:	693b      	ldr	r3, [r7, #16]
}
 8000814:	4618      	mov	r0, r3
 8000816:	3728      	adds	r7, #40	; 0x28
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000824:	f3ef 8305 	mrs	r3, IPSR
 8000828:	60bb      	str	r3, [r7, #8]
  return(result);
 800082a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800082c:	2b00      	cmp	r3, #0
 800082e:	d003      	beq.n	8000838 <osDelay+0x1c>
    stat = osErrorISR;
 8000830:	f06f 0305 	mvn.w	r3, #5
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	e007      	b.n	8000848 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d002      	beq.n	8000848 <osDelay+0x2c>
      vTaskDelay(ticks);
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f000 ff7c 	bl	8001740 <vTaskDelay>
    }
  }

  return (stat);
 8000848:	68fb      	ldr	r3, [r7, #12]
}
 800084a:	4618      	mov	r0, r3
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	60b9      	str	r1, [r7, #8]
 800085e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	4a07      	ldr	r2, [pc, #28]	; (8000880 <vApplicationGetIdleTaskMemory+0x2c>)
 8000864:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	4a06      	ldr	r2, [pc, #24]	; (8000884 <vApplicationGetIdleTaskMemory+0x30>)
 800086a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2280      	movs	r2, #128	; 0x80
 8000870:	601a      	str	r2, [r3, #0]
}
 8000872:	bf00      	nop
 8000874:	3714      	adds	r7, #20
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	2000008c 	.word	0x2000008c
 8000884:	200000e8 	.word	0x200000e8

08000888 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	60b9      	str	r1, [r7, #8]
 8000892:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	4a07      	ldr	r2, [pc, #28]	; (80008b4 <vApplicationGetTimerTaskMemory+0x2c>)
 8000898:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	4a06      	ldr	r2, [pc, #24]	; (80008b8 <vApplicationGetTimerTaskMemory+0x30>)
 800089e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008a6:	601a      	str	r2, [r3, #0]
}
 80008a8:	bf00      	nop
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	200002e8 	.word	0x200002e8
 80008b8:	20000344 	.word	0x20000344

080008bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	f103 0208 	add.w	r2, r3, #8
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	f04f 32ff 	mov.w	r2, #4294967295
 80008d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	f103 0208 	add.w	r2, r3, #8
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	f103 0208 	add.w	r2, r3, #8
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2200      	movs	r2, #0
 8000908:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800090a:	bf00      	nop
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr

08000916 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000916:	b480      	push	{r7}
 8000918:	b085      	sub	sp, #20
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
 800091e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	68fa      	ldr	r2, [r7, #12]
 800092a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	689a      	ldr	r2, [r3, #8]
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	689b      	ldr	r3, [r3, #8]
 8000938:	683a      	ldr	r2, [r7, #0]
 800093a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	683a      	ldr	r2, [r7, #0]
 8000940:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	687a      	ldr	r2, [r7, #4]
 8000946:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	1c5a      	adds	r2, r3, #1
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	601a      	str	r2, [r3, #0]
}
 8000952:	bf00      	nop
 8000954:	3714      	adds	r7, #20
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800095e:	b480      	push	{r7}
 8000960:	b085      	sub	sp, #20
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
 8000966:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000974:	d103      	bne.n	800097e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	691b      	ldr	r3, [r3, #16]
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	e00c      	b.n	8000998 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	3308      	adds	r3, #8
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	e002      	b.n	800098c <vListInsert+0x2e>
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	68ba      	ldr	r2, [r7, #8]
 8000994:	429a      	cmp	r2, r3
 8000996:	d2f6      	bcs.n	8000986 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	685a      	ldr	r2, [r3, #4]
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	683a      	ldr	r2, [r7, #0]
 80009a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	68fa      	ldr	r2, [r7, #12]
 80009ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	683a      	ldr	r2, [r7, #0]
 80009b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	1c5a      	adds	r2, r3, #1
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	601a      	str	r2, [r3, #0]
}
 80009c4:	bf00      	nop
 80009c6:	3714      	adds	r7, #20
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	691b      	ldr	r3, [r3, #16]
 80009dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	6892      	ldr	r2, [r2, #8]
 80009e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	689b      	ldr	r3, [r3, #8]
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	6852      	ldr	r2, [r2, #4]
 80009f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	687a      	ldr	r2, [r7, #4]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d103      	bne.n	8000a04 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	689a      	ldr	r2, [r3, #8]
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2200      	movs	r2, #0
 8000a08:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	1e5a      	subs	r2, r3, #1
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	681b      	ldr	r3, [r3, #0]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3714      	adds	r7, #20
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d10a      	bne.n	8000a4e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a3c:	f383 8811 	msr	BASEPRI, r3
 8000a40:	f3bf 8f6f 	isb	sy
 8000a44:	f3bf 8f4f 	dsb	sy
 8000a48:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000a4a:	bf00      	nop
 8000a4c:	e7fe      	b.n	8000a4c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8000a4e:	f002 f851 	bl	8002af4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a5a:	68f9      	ldr	r1, [r7, #12]
 8000a5c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000a5e:	fb01 f303 	mul.w	r3, r1, r3
 8000a62:	441a      	add	r2, r3
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a7e:	3b01      	subs	r3, #1
 8000a80:	68f9      	ldr	r1, [r7, #12]
 8000a82:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000a84:	fb01 f303 	mul.w	r3, r1, r3
 8000a88:	441a      	add	r2, r3
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	22ff      	movs	r2, #255	; 0xff
 8000a92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	22ff      	movs	r2, #255	; 0xff
 8000a9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d114      	bne.n	8000ace <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	691b      	ldr	r3, [r3, #16]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d01a      	beq.n	8000ae2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	3310      	adds	r3, #16
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f001 f903 	bl	8001cbc <xTaskRemoveFromEventList>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d012      	beq.n	8000ae2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <xQueueGenericReset+0xcc>)
 8000abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	f3bf 8f4f 	dsb	sy
 8000ac8:	f3bf 8f6f 	isb	sy
 8000acc:	e009      	b.n	8000ae2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	3310      	adds	r3, #16
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fef2 	bl	80008bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	3324      	adds	r3, #36	; 0x24
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff feed 	bl	80008bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000ae2:	f002 f837 	bl	8002b54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000ae6:	2301      	movs	r3, #1
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3710      	adds	r7, #16
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	e000ed04 	.word	0xe000ed04

08000af4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08e      	sub	sp, #56	; 0x38
 8000af8:	af02      	add	r7, sp, #8
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
 8000b00:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d10a      	bne.n	8000b1e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8000b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b0c:	f383 8811 	msr	BASEPRI, r3
 8000b10:	f3bf 8f6f 	isb	sy
 8000b14:	f3bf 8f4f 	dsb	sy
 8000b18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000b1a:	bf00      	nop
 8000b1c:	e7fe      	b.n	8000b1c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d10a      	bne.n	8000b3a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8000b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b28:	f383 8811 	msr	BASEPRI, r3
 8000b2c:	f3bf 8f6f 	isb	sy
 8000b30:	f3bf 8f4f 	dsb	sy
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000b36:	bf00      	nop
 8000b38:	e7fe      	b.n	8000b38 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d002      	beq.n	8000b46 <xQueueGenericCreateStatic+0x52>
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <xQueueGenericCreateStatic+0x56>
 8000b46:	2301      	movs	r3, #1
 8000b48:	e000      	b.n	8000b4c <xQueueGenericCreateStatic+0x58>
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d10a      	bne.n	8000b66 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8000b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b54:	f383 8811 	msr	BASEPRI, r3
 8000b58:	f3bf 8f6f 	isb	sy
 8000b5c:	f3bf 8f4f 	dsb	sy
 8000b60:	623b      	str	r3, [r7, #32]
}
 8000b62:	bf00      	nop
 8000b64:	e7fe      	b.n	8000b64 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d102      	bne.n	8000b72 <xQueueGenericCreateStatic+0x7e>
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d101      	bne.n	8000b76 <xQueueGenericCreateStatic+0x82>
 8000b72:	2301      	movs	r3, #1
 8000b74:	e000      	b.n	8000b78 <xQueueGenericCreateStatic+0x84>
 8000b76:	2300      	movs	r3, #0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d10a      	bne.n	8000b92 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8000b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b80:	f383 8811 	msr	BASEPRI, r3
 8000b84:	f3bf 8f6f 	isb	sy
 8000b88:	f3bf 8f4f 	dsb	sy
 8000b8c:	61fb      	str	r3, [r7, #28]
}
 8000b8e:	bf00      	nop
 8000b90:	e7fe      	b.n	8000b90 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8000b92:	2350      	movs	r3, #80	; 0x50
 8000b94:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	2b50      	cmp	r3, #80	; 0x50
 8000b9a:	d00a      	beq.n	8000bb2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8000b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ba0:	f383 8811 	msr	BASEPRI, r3
 8000ba4:	f3bf 8f6f 	isb	sy
 8000ba8:	f3bf 8f4f 	dsb	sy
 8000bac:	61bb      	str	r3, [r7, #24]
}
 8000bae:	bf00      	nop
 8000bb0:	e7fe      	b.n	8000bb0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8000bb2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8000bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d00d      	beq.n	8000bda <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8000bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000bc6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bcc:	9300      	str	r3, [sp, #0]
 8000bce:	4613      	mov	r3, r2
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	68b9      	ldr	r1, [r7, #8]
 8000bd4:	68f8      	ldr	r0, [r7, #12]
 8000bd6:	f000 f805 	bl	8000be4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3730      	adds	r7, #48	; 0x30
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
 8000bf0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d103      	bne.n	8000c00 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	69ba      	ldr	r2, [r7, #24]
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	e002      	b.n	8000c06 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000c06:	69bb      	ldr	r3, [r7, #24]
 8000c08:	68fa      	ldr	r2, [r7, #12]
 8000c0a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000c12:	2101      	movs	r1, #1
 8000c14:	69b8      	ldr	r0, [r7, #24]
 8000c16:	f7ff ff05 	bl	8000a24 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8000c1a:	69bb      	ldr	r3, [r7, #24]
 8000c1c:	78fa      	ldrb	r2, [r7, #3]
 8000c1e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000c22:	bf00      	nop
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08e      	sub	sp, #56	; 0x38
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
 8000c38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d10a      	bne.n	8000c5e <xQueueGenericSend+0x32>
	__asm volatile
 8000c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c4c:	f383 8811 	msr	BASEPRI, r3
 8000c50:	f3bf 8f6f 	isb	sy
 8000c54:	f3bf 8f4f 	dsb	sy
 8000c58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000c5a:	bf00      	nop
 8000c5c:	e7fe      	b.n	8000c5c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d103      	bne.n	8000c6c <xQueueGenericSend+0x40>
 8000c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d101      	bne.n	8000c70 <xQueueGenericSend+0x44>
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	e000      	b.n	8000c72 <xQueueGenericSend+0x46>
 8000c70:	2300      	movs	r3, #0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d10a      	bne.n	8000c8c <xQueueGenericSend+0x60>
	__asm volatile
 8000c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c7a:	f383 8811 	msr	BASEPRI, r3
 8000c7e:	f3bf 8f6f 	isb	sy
 8000c82:	f3bf 8f4f 	dsb	sy
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000c88:	bf00      	nop
 8000c8a:	e7fe      	b.n	8000c8a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	2b02      	cmp	r3, #2
 8000c90:	d103      	bne.n	8000c9a <xQueueGenericSend+0x6e>
 8000c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d101      	bne.n	8000c9e <xQueueGenericSend+0x72>
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e000      	b.n	8000ca0 <xQueueGenericSend+0x74>
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d10a      	bne.n	8000cba <xQueueGenericSend+0x8e>
	__asm volatile
 8000ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ca8:	f383 8811 	msr	BASEPRI, r3
 8000cac:	f3bf 8f6f 	isb	sy
 8000cb0:	f3bf 8f4f 	dsb	sy
 8000cb4:	623b      	str	r3, [r7, #32]
}
 8000cb6:	bf00      	nop
 8000cb8:	e7fe      	b.n	8000cb8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000cba:	f001 f9bd 	bl	8002038 <xTaskGetSchedulerState>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d102      	bne.n	8000cca <xQueueGenericSend+0x9e>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d101      	bne.n	8000cce <xQueueGenericSend+0xa2>
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e000      	b.n	8000cd0 <xQueueGenericSend+0xa4>
 8000cce:	2300      	movs	r3, #0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d10a      	bne.n	8000cea <xQueueGenericSend+0xbe>
	__asm volatile
 8000cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cd8:	f383 8811 	msr	BASEPRI, r3
 8000cdc:	f3bf 8f6f 	isb	sy
 8000ce0:	f3bf 8f4f 	dsb	sy
 8000ce4:	61fb      	str	r3, [r7, #28]
}
 8000ce6:	bf00      	nop
 8000ce8:	e7fe      	b.n	8000ce8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000cea:	f001 ff03 	bl	8002af4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d302      	bcc.n	8000d00 <xQueueGenericSend+0xd4>
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d129      	bne.n	8000d54 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000d00:	683a      	ldr	r2, [r7, #0]
 8000d02:	68b9      	ldr	r1, [r7, #8]
 8000d04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d06:	f000 fa0b 	bl	8001120 <prvCopyDataToQueue>
 8000d0a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d010      	beq.n	8000d36 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d16:	3324      	adds	r3, #36	; 0x24
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f000 ffcf 	bl	8001cbc <xTaskRemoveFromEventList>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d013      	beq.n	8000d4c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000d24:	4b3f      	ldr	r3, [pc, #252]	; (8000e24 <xQueueGenericSend+0x1f8>)
 8000d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	f3bf 8f4f 	dsb	sy
 8000d30:	f3bf 8f6f 	isb	sy
 8000d34:	e00a      	b.n	8000d4c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d007      	beq.n	8000d4c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000d3c:	4b39      	ldr	r3, [pc, #228]	; (8000e24 <xQueueGenericSend+0x1f8>)
 8000d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	f3bf 8f4f 	dsb	sy
 8000d48:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000d4c:	f001 ff02 	bl	8002b54 <vPortExitCritical>
				return pdPASS;
 8000d50:	2301      	movs	r3, #1
 8000d52:	e063      	b.n	8000e1c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d103      	bne.n	8000d62 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000d5a:	f001 fefb 	bl	8002b54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	e05c      	b.n	8000e1c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d106      	bne.n	8000d76 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f001 f809 	bl	8001d84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000d72:	2301      	movs	r3, #1
 8000d74:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000d76:	f001 feed 	bl	8002b54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000d7a:	f000 fd7b 	bl	8001874 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000d7e:	f001 feb9 	bl	8002af4 <vPortEnterCritical>
 8000d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d88:	b25b      	sxtb	r3, r3
 8000d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d8e:	d103      	bne.n	8000d98 <xQueueGenericSend+0x16c>
 8000d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d92:	2200      	movs	r2, #0
 8000d94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000d9e:	b25b      	sxtb	r3, r3
 8000da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000da4:	d103      	bne.n	8000dae <xQueueGenericSend+0x182>
 8000da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000da8:	2200      	movs	r2, #0
 8000daa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000dae:	f001 fed1 	bl	8002b54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000db2:	1d3a      	adds	r2, r7, #4
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	4611      	mov	r1, r2
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 fff8 	bl	8001db0 <xTaskCheckForTimeOut>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d124      	bne.n	8000e10 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000dc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000dc8:	f000 faa2 	bl	8001310 <prvIsQueueFull>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d018      	beq.n	8000e04 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dd4:	3310      	adds	r3, #16
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	4611      	mov	r1, r2
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f000 ff1e 	bl	8001c1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000de0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000de2:	f000 fa2d 	bl	8001240 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000de6:	f000 fd53 	bl	8001890 <xTaskResumeAll>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	f47f af7c 	bne.w	8000cea <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8000df2:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <xQueueGenericSend+0x1f8>)
 8000df4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	f3bf 8f4f 	dsb	sy
 8000dfe:	f3bf 8f6f 	isb	sy
 8000e02:	e772      	b.n	8000cea <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000e04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e06:	f000 fa1b 	bl	8001240 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000e0a:	f000 fd41 	bl	8001890 <xTaskResumeAll>
 8000e0e:	e76c      	b.n	8000cea <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000e10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e12:	f000 fa15 	bl	8001240 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000e16:	f000 fd3b 	bl	8001890 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000e1a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3738      	adds	r7, #56	; 0x38
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	e000ed04 	.word	0xe000ed04

08000e28 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b090      	sub	sp, #64	; 0x40
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
 8000e34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8000e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d10a      	bne.n	8000e56 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8000e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e44:	f383 8811 	msr	BASEPRI, r3
 8000e48:	f3bf 8f6f 	isb	sy
 8000e4c:	f3bf 8f4f 	dsb	sy
 8000e50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000e52:	bf00      	nop
 8000e54:	e7fe      	b.n	8000e54 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d103      	bne.n	8000e64 <xQueueGenericSendFromISR+0x3c>
 8000e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d101      	bne.n	8000e68 <xQueueGenericSendFromISR+0x40>
 8000e64:	2301      	movs	r3, #1
 8000e66:	e000      	b.n	8000e6a <xQueueGenericSendFromISR+0x42>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d10a      	bne.n	8000e84 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8000e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e72:	f383 8811 	msr	BASEPRI, r3
 8000e76:	f3bf 8f6f 	isb	sy
 8000e7a:	f3bf 8f4f 	dsb	sy
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000e80:	bf00      	nop
 8000e82:	e7fe      	b.n	8000e82 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d103      	bne.n	8000e92 <xQueueGenericSendFromISR+0x6a>
 8000e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d101      	bne.n	8000e96 <xQueueGenericSendFromISR+0x6e>
 8000e92:	2301      	movs	r3, #1
 8000e94:	e000      	b.n	8000e98 <xQueueGenericSendFromISR+0x70>
 8000e96:	2300      	movs	r3, #0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d10a      	bne.n	8000eb2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8000e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ea0:	f383 8811 	msr	BASEPRI, r3
 8000ea4:	f3bf 8f6f 	isb	sy
 8000ea8:	f3bf 8f4f 	dsb	sy
 8000eac:	623b      	str	r3, [r7, #32]
}
 8000eae:	bf00      	nop
 8000eb0:	e7fe      	b.n	8000eb0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000eb2:	f001 fedf 	bl	8002c74 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000eb6:	f3ef 8211 	mrs	r2, BASEPRI
 8000eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ebe:	f383 8811 	msr	BASEPRI, r3
 8000ec2:	f3bf 8f6f 	isb	sy
 8000ec6:	f3bf 8f4f 	dsb	sy
 8000eca:	61fa      	str	r2, [r7, #28]
 8000ecc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8000ece:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000ed0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ed4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d302      	bcc.n	8000ee4 <xQueueGenericSendFromISR+0xbc>
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d12f      	bne.n	8000f44 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ee6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000eea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000ef4:	683a      	ldr	r2, [r7, #0]
 8000ef6:	68b9      	ldr	r1, [r7, #8]
 8000ef8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000efa:	f000 f911 	bl	8001120 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000efe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f06:	d112      	bne.n	8000f2e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d016      	beq.n	8000f3e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f12:	3324      	adds	r3, #36	; 0x24
 8000f14:	4618      	mov	r0, r3
 8000f16:	f000 fed1 	bl	8001cbc <xTaskRemoveFromEventList>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d00e      	beq.n	8000f3e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d00b      	beq.n	8000f3e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2201      	movs	r2, #1
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	e007      	b.n	8000f3e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000f2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f32:	3301      	adds	r3, #1
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	b25a      	sxtb	r2, r3
 8000f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8000f42:	e001      	b.n	8000f48 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f4a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8000f52:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3740      	adds	r7, #64	; 0x40
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08c      	sub	sp, #48	; 0x30
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8000f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d10a      	bne.n	8000f90 <xQueueReceive+0x30>
	__asm volatile
 8000f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f7e:	f383 8811 	msr	BASEPRI, r3
 8000f82:	f3bf 8f6f 	isb	sy
 8000f86:	f3bf 8f4f 	dsb	sy
 8000f8a:	623b      	str	r3, [r7, #32]
}
 8000f8c:	bf00      	nop
 8000f8e:	e7fe      	b.n	8000f8e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d103      	bne.n	8000f9e <xQueueReceive+0x3e>
 8000f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d101      	bne.n	8000fa2 <xQueueReceive+0x42>
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e000      	b.n	8000fa4 <xQueueReceive+0x44>
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d10a      	bne.n	8000fbe <xQueueReceive+0x5e>
	__asm volatile
 8000fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fac:	f383 8811 	msr	BASEPRI, r3
 8000fb0:	f3bf 8f6f 	isb	sy
 8000fb4:	f3bf 8f4f 	dsb	sy
 8000fb8:	61fb      	str	r3, [r7, #28]
}
 8000fba:	bf00      	nop
 8000fbc:	e7fe      	b.n	8000fbc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000fbe:	f001 f83b 	bl	8002038 <xTaskGetSchedulerState>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d102      	bne.n	8000fce <xQueueReceive+0x6e>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d101      	bne.n	8000fd2 <xQueueReceive+0x72>
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e000      	b.n	8000fd4 <xQueueReceive+0x74>
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d10a      	bne.n	8000fee <xQueueReceive+0x8e>
	__asm volatile
 8000fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fdc:	f383 8811 	msr	BASEPRI, r3
 8000fe0:	f3bf 8f6f 	isb	sy
 8000fe4:	f3bf 8f4f 	dsb	sy
 8000fe8:	61bb      	str	r3, [r7, #24]
}
 8000fea:	bf00      	nop
 8000fec:	e7fe      	b.n	8000fec <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000fee:	f001 fd81 	bl	8002af4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d01f      	beq.n	800103e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000ffe:	68b9      	ldr	r1, [r7, #8]
 8001000:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001002:	f000 f8f7 	bl	80011f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001008:	1e5a      	subs	r2, r3, #1
 800100a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800100c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800100e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001010:	691b      	ldr	r3, [r3, #16]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d00f      	beq.n	8001036 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001018:	3310      	adds	r3, #16
 800101a:	4618      	mov	r0, r3
 800101c:	f000 fe4e 	bl	8001cbc <xTaskRemoveFromEventList>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d007      	beq.n	8001036 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001026:	4b3d      	ldr	r3, [pc, #244]	; (800111c <xQueueReceive+0x1bc>)
 8001028:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	f3bf 8f4f 	dsb	sy
 8001032:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001036:	f001 fd8d 	bl	8002b54 <vPortExitCritical>
				return pdPASS;
 800103a:	2301      	movs	r3, #1
 800103c:	e069      	b.n	8001112 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d103      	bne.n	800104c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001044:	f001 fd86 	bl	8002b54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001048:	2300      	movs	r3, #0
 800104a:	e062      	b.n	8001112 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800104c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800104e:	2b00      	cmp	r3, #0
 8001050:	d106      	bne.n	8001060 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001052:	f107 0310 	add.w	r3, r7, #16
 8001056:	4618      	mov	r0, r3
 8001058:	f000 fe94 	bl	8001d84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800105c:	2301      	movs	r3, #1
 800105e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001060:	f001 fd78 	bl	8002b54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001064:	f000 fc06 	bl	8001874 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001068:	f001 fd44 	bl	8002af4 <vPortEnterCritical>
 800106c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800106e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001072:	b25b      	sxtb	r3, r3
 8001074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001078:	d103      	bne.n	8001082 <xQueueReceive+0x122>
 800107a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800107c:	2200      	movs	r2, #0
 800107e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001084:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001088:	b25b      	sxtb	r3, r3
 800108a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800108e:	d103      	bne.n	8001098 <xQueueReceive+0x138>
 8001090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001092:	2200      	movs	r2, #0
 8001094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001098:	f001 fd5c 	bl	8002b54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800109c:	1d3a      	adds	r2, r7, #4
 800109e:	f107 0310 	add.w	r3, r7, #16
 80010a2:	4611      	mov	r1, r2
 80010a4:	4618      	mov	r0, r3
 80010a6:	f000 fe83 	bl	8001db0 <xTaskCheckForTimeOut>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d123      	bne.n	80010f8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80010b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80010b2:	f000 f917 	bl	80012e4 <prvIsQueueEmpty>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d017      	beq.n	80010ec <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80010bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010be:	3324      	adds	r3, #36	; 0x24
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	4611      	mov	r1, r2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 fda9 	bl	8001c1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80010ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80010cc:	f000 f8b8 	bl	8001240 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80010d0:	f000 fbde 	bl	8001890 <xTaskResumeAll>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d189      	bne.n	8000fee <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80010da:	4b10      	ldr	r3, [pc, #64]	; (800111c <xQueueReceive+0x1bc>)
 80010dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	f3bf 8f4f 	dsb	sy
 80010e6:	f3bf 8f6f 	isb	sy
 80010ea:	e780      	b.n	8000fee <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80010ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80010ee:	f000 f8a7 	bl	8001240 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80010f2:	f000 fbcd 	bl	8001890 <xTaskResumeAll>
 80010f6:	e77a      	b.n	8000fee <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80010f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80010fa:	f000 f8a1 	bl	8001240 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80010fe:	f000 fbc7 	bl	8001890 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001102:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001104:	f000 f8ee 	bl	80012e4 <prvIsQueueEmpty>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	f43f af6f 	beq.w	8000fee <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001110:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8001112:	4618      	mov	r0, r3
 8001114:	3730      	adds	r7, #48	; 0x30
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	e000ed04 	.word	0xe000ed04

08001120 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001134:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	2b00      	cmp	r3, #0
 800113c:	d10d      	bne.n	800115a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d14d      	bne.n	80011e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	4618      	mov	r0, r3
 800114c:	f000 ff92 	bl	8002074 <xTaskPriorityDisinherit>
 8001150:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	e043      	b.n	80011e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d119      	bne.n	8001194 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	6858      	ldr	r0, [r3, #4]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	461a      	mov	r2, r3
 800116a:	68b9      	ldr	r1, [r7, #8]
 800116c:	f002 fab4 	bl	80036d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	685a      	ldr	r2, [r3, #4]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001178:	441a      	add	r2, r3
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	685a      	ldr	r2, [r3, #4]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	429a      	cmp	r2, r3
 8001188:	d32b      	bcc.n	80011e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	e026      	b.n	80011e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	68d8      	ldr	r0, [r3, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	461a      	mov	r2, r3
 800119e:	68b9      	ldr	r1, [r7, #8]
 80011a0:	f002 fa9a 	bl	80036d8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	68da      	ldr	r2, [r3, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ac:	425b      	negs	r3, r3
 80011ae:	441a      	add	r2, r3
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	68da      	ldr	r2, [r3, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d207      	bcs.n	80011d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	689a      	ldr	r2, [r3, #8]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c8:	425b      	negs	r3, r3
 80011ca:	441a      	add	r2, r3
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d105      	bne.n	80011e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d002      	beq.n	80011e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	3b01      	subs	r3, #1
 80011e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	1c5a      	adds	r2, r3, #1
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80011ea:	697b      	ldr	r3, [r7, #20]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	2b00      	cmp	r3, #0
 8001204:	d018      	beq.n	8001238 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	68da      	ldr	r2, [r3, #12]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	441a      	add	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	68da      	ldr	r2, [r3, #12]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	429a      	cmp	r2, r3
 800121e:	d303      	bcc.n	8001228 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68d9      	ldr	r1, [r3, #12]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001230:	461a      	mov	r2, r3
 8001232:	6838      	ldr	r0, [r7, #0]
 8001234:	f002 fa50 	bl	80036d8 <memcpy>
	}
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001248:	f001 fc54 	bl	8002af4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001252:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001254:	e011      	b.n	800127a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125a:	2b00      	cmp	r3, #0
 800125c:	d012      	beq.n	8001284 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	3324      	adds	r3, #36	; 0x24
 8001262:	4618      	mov	r0, r3
 8001264:	f000 fd2a 	bl	8001cbc <xTaskRemoveFromEventList>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800126e:	f000 fe01 	bl	8001e74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	3b01      	subs	r3, #1
 8001276:	b2db      	uxtb	r3, r3
 8001278:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800127a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800127e:	2b00      	cmp	r3, #0
 8001280:	dce9      	bgt.n	8001256 <prvUnlockQueue+0x16>
 8001282:	e000      	b.n	8001286 <prvUnlockQueue+0x46>
					break;
 8001284:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	22ff      	movs	r2, #255	; 0xff
 800128a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800128e:	f001 fc61 	bl	8002b54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001292:	f001 fc2f 	bl	8002af4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800129c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800129e:	e011      	b.n	80012c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	691b      	ldr	r3, [r3, #16]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d012      	beq.n	80012ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3310      	adds	r3, #16
 80012ac:	4618      	mov	r0, r3
 80012ae:	f000 fd05 	bl	8001cbc <xTaskRemoveFromEventList>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80012b8:	f000 fddc 	bl	8001e74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80012bc:	7bbb      	ldrb	r3, [r7, #14]
 80012be:	3b01      	subs	r3, #1
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80012c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	dce9      	bgt.n	80012a0 <prvUnlockQueue+0x60>
 80012cc:	e000      	b.n	80012d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80012ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	22ff      	movs	r2, #255	; 0xff
 80012d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80012d8:	f001 fc3c 	bl	8002b54 <vPortExitCritical>
}
 80012dc:	bf00      	nop
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80012ec:	f001 fc02 	bl	8002af4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d102      	bne.n	80012fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80012f8:	2301      	movs	r3, #1
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	e001      	b.n	8001302 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001302:	f001 fc27 	bl	8002b54 <vPortExitCritical>

	return xReturn;
 8001306:	68fb      	ldr	r3, [r7, #12]
}
 8001308:	4618      	mov	r0, r3
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001318:	f001 fbec 	bl	8002af4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001324:	429a      	cmp	r2, r3
 8001326:	d102      	bne.n	800132e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001328:	2301      	movs	r3, #1
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	e001      	b.n	8001332 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001332:	f001 fc0f 	bl	8002b54 <vPortExitCritical>

	return xReturn;
 8001336:	68fb      	ldr	r3, [r7, #12]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800134a:	2300      	movs	r3, #0
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	e014      	b.n	800137a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001350:	4a0f      	ldr	r2, [pc, #60]	; (8001390 <vQueueAddToRegistry+0x50>)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d10b      	bne.n	8001374 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800135c:	490c      	ldr	r1, [pc, #48]	; (8001390 <vQueueAddToRegistry+0x50>)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	683a      	ldr	r2, [r7, #0]
 8001362:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001366:	4a0a      	ldr	r2, [pc, #40]	; (8001390 <vQueueAddToRegistry+0x50>)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	4413      	add	r3, r2
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8001372:	e006      	b.n	8001382 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	3301      	adds	r3, #1
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2b07      	cmp	r3, #7
 800137e:	d9e7      	bls.n	8001350 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001380:	bf00      	nop
 8001382:	bf00      	nop
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	20000744 	.word	0x20000744

08001394 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80013a4:	f001 fba6 	bl	8002af4 <vPortEnterCritical>
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80013ae:	b25b      	sxtb	r3, r3
 80013b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b4:	d103      	bne.n	80013be <vQueueWaitForMessageRestricted+0x2a>
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80013c4:	b25b      	sxtb	r3, r3
 80013c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ca:	d103      	bne.n	80013d4 <vQueueWaitForMessageRestricted+0x40>
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80013d4:	f001 fbbe 	bl	8002b54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d106      	bne.n	80013ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	3324      	adds	r3, #36	; 0x24
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	68b9      	ldr	r1, [r7, #8]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f000 fc3b 	bl	8001c64 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80013ee:	6978      	ldr	r0, [r7, #20]
 80013f0:	f7ff ff26 	bl	8001240 <prvUnlockQueue>
	}
 80013f4:	bf00      	nop
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08e      	sub	sp, #56	; 0x38
 8001400:	af04      	add	r7, sp, #16
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
 8001408:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800140a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800140c:	2b00      	cmp	r3, #0
 800140e:	d10a      	bne.n	8001426 <xTaskCreateStatic+0x2a>
	__asm volatile
 8001410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001414:	f383 8811 	msr	BASEPRI, r3
 8001418:	f3bf 8f6f 	isb	sy
 800141c:	f3bf 8f4f 	dsb	sy
 8001420:	623b      	str	r3, [r7, #32]
}
 8001422:	bf00      	nop
 8001424:	e7fe      	b.n	8001424 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001428:	2b00      	cmp	r3, #0
 800142a:	d10a      	bne.n	8001442 <xTaskCreateStatic+0x46>
	__asm volatile
 800142c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001430:	f383 8811 	msr	BASEPRI, r3
 8001434:	f3bf 8f6f 	isb	sy
 8001438:	f3bf 8f4f 	dsb	sy
 800143c:	61fb      	str	r3, [r7, #28]
}
 800143e:	bf00      	nop
 8001440:	e7fe      	b.n	8001440 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001442:	235c      	movs	r3, #92	; 0x5c
 8001444:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	2b5c      	cmp	r3, #92	; 0x5c
 800144a:	d00a      	beq.n	8001462 <xTaskCreateStatic+0x66>
	__asm volatile
 800144c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001450:	f383 8811 	msr	BASEPRI, r3
 8001454:	f3bf 8f6f 	isb	sy
 8001458:	f3bf 8f4f 	dsb	sy
 800145c:	61bb      	str	r3, [r7, #24]
}
 800145e:	bf00      	nop
 8001460:	e7fe      	b.n	8001460 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001462:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001466:	2b00      	cmp	r3, #0
 8001468:	d01e      	beq.n	80014a8 <xTaskCreateStatic+0xac>
 800146a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800146c:	2b00      	cmp	r3, #0
 800146e:	d01b      	beq.n	80014a8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001476:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001478:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147c:	2202      	movs	r2, #2
 800147e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001482:	2300      	movs	r3, #0
 8001484:	9303      	str	r3, [sp, #12]
 8001486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001488:	9302      	str	r3, [sp, #8]
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	9301      	str	r3, [sp, #4]
 8001490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	68b9      	ldr	r1, [r7, #8]
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	f000 f850 	bl	8001540 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80014a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80014a2:	f000 f8dd 	bl	8001660 <prvAddNewTaskToReadyList>
 80014a6:	e001      	b.n	80014ac <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80014ac:	697b      	ldr	r3, [r7, #20]
	}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3728      	adds	r7, #40	; 0x28
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b08c      	sub	sp, #48	; 0x30
 80014ba:	af04      	add	r7, sp, #16
 80014bc:	60f8      	str	r0, [r7, #12]
 80014be:	60b9      	str	r1, [r7, #8]
 80014c0:	603b      	str	r3, [r7, #0]
 80014c2:	4613      	mov	r3, r2
 80014c4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80014c6:	88fb      	ldrh	r3, [r7, #6]
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4618      	mov	r0, r3
 80014cc:	f001 fc12 	bl	8002cf4 <pvPortMalloc>
 80014d0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d00e      	beq.n	80014f6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80014d8:	205c      	movs	r0, #92	; 0x5c
 80014da:	f001 fc0b 	bl	8002cf4 <pvPortMalloc>
 80014de:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	697a      	ldr	r2, [r7, #20]
 80014ea:	631a      	str	r2, [r3, #48]	; 0x30
 80014ec:	e005      	b.n	80014fa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80014ee:	6978      	ldr	r0, [r7, #20]
 80014f0:	f001 fccc 	bl	8002e8c <vPortFree>
 80014f4:	e001      	b.n	80014fa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d017      	beq.n	8001530 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	2200      	movs	r2, #0
 8001504:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001508:	88fa      	ldrh	r2, [r7, #6]
 800150a:	2300      	movs	r3, #0
 800150c:	9303      	str	r3, [sp, #12]
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	9302      	str	r3, [sp, #8]
 8001512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001514:	9301      	str	r3, [sp, #4]
 8001516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	68b9      	ldr	r1, [r7, #8]
 800151e:	68f8      	ldr	r0, [r7, #12]
 8001520:	f000 f80e 	bl	8001540 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001524:	69f8      	ldr	r0, [r7, #28]
 8001526:	f000 f89b 	bl	8001660 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800152a:	2301      	movs	r3, #1
 800152c:	61bb      	str	r3, [r7, #24]
 800152e:	e002      	b.n	8001536 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001530:	f04f 33ff 	mov.w	r3, #4294967295
 8001534:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001536:	69bb      	ldr	r3, [r7, #24]
	}
 8001538:	4618      	mov	r0, r3
 800153a:	3720      	adds	r7, #32
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
 800154c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800154e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001550:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	461a      	mov	r2, r3
 8001558:	21a5      	movs	r1, #165	; 0xa5
 800155a:	f002 f8cb 	bl	80036f4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800155e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001568:	3b01      	subs	r3, #1
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4413      	add	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	f023 0307 	bic.w	r3, r3, #7
 8001576:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00a      	beq.n	8001598 <prvInitialiseNewTask+0x58>
	__asm volatile
 8001582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001586:	f383 8811 	msr	BASEPRI, r3
 800158a:	f3bf 8f6f 	isb	sy
 800158e:	f3bf 8f4f 	dsb	sy
 8001592:	617b      	str	r3, [r7, #20]
}
 8001594:	bf00      	nop
 8001596:	e7fe      	b.n	8001596 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d01f      	beq.n	80015de <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
 80015a2:	e012      	b.n	80015ca <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80015a4:	68ba      	ldr	r2, [r7, #8]
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	4413      	add	r3, r2
 80015aa:	7819      	ldrb	r1, [r3, #0]
 80015ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	4413      	add	r3, r2
 80015b2:	3334      	adds	r3, #52	; 0x34
 80015b4:	460a      	mov	r2, r1
 80015b6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80015b8:	68ba      	ldr	r2, [r7, #8]
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	4413      	add	r3, r2
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d006      	beq.n	80015d2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	3301      	adds	r3, #1
 80015c8:	61fb      	str	r3, [r7, #28]
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	2b0f      	cmp	r3, #15
 80015ce:	d9e9      	bls.n	80015a4 <prvInitialiseNewTask+0x64>
 80015d0:	e000      	b.n	80015d4 <prvInitialiseNewTask+0x94>
			{
				break;
 80015d2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80015d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80015dc:	e003      	b.n	80015e6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80015de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80015e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e8:	2b37      	cmp	r3, #55	; 0x37
 80015ea:	d901      	bls.n	80015f0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80015ec:	2337      	movs	r3, #55	; 0x37
 80015ee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80015f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015f4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80015f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015fa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80015fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015fe:	2200      	movs	r2, #0
 8001600:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001604:	3304      	adds	r3, #4
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff f978 	bl	80008fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800160c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800160e:	3318      	adds	r3, #24
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff f973 	bl	80008fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800161a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800161c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800161e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8001622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001624:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800162a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800162c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800162e:	2200      	movs	r2, #0
 8001630:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001634:	2200      	movs	r2, #0
 8001636:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	68f9      	ldr	r1, [r7, #12]
 800163e:	69b8      	ldr	r0, [r7, #24]
 8001640:	f001 f928 	bl	8002894 <pxPortInitialiseStack>
 8001644:	4602      	mov	r2, r0
 8001646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001648:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800164a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800164c:	2b00      	cmp	r3, #0
 800164e:	d002      	beq.n	8001656 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001652:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001654:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001656:	bf00      	nop
 8001658:	3720      	adds	r7, #32
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001668:	f001 fa44 	bl	8002af4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800166c:	4b2d      	ldr	r3, [pc, #180]	; (8001724 <prvAddNewTaskToReadyList+0xc4>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	3301      	adds	r3, #1
 8001672:	4a2c      	ldr	r2, [pc, #176]	; (8001724 <prvAddNewTaskToReadyList+0xc4>)
 8001674:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001676:	4b2c      	ldr	r3, [pc, #176]	; (8001728 <prvAddNewTaskToReadyList+0xc8>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d109      	bne.n	8001692 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800167e:	4a2a      	ldr	r2, [pc, #168]	; (8001728 <prvAddNewTaskToReadyList+0xc8>)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001684:	4b27      	ldr	r3, [pc, #156]	; (8001724 <prvAddNewTaskToReadyList+0xc4>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d110      	bne.n	80016ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800168c:	f000 fc16 	bl	8001ebc <prvInitialiseTaskLists>
 8001690:	e00d      	b.n	80016ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001692:	4b26      	ldr	r3, [pc, #152]	; (800172c <prvAddNewTaskToReadyList+0xcc>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d109      	bne.n	80016ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800169a:	4b23      	ldr	r3, [pc, #140]	; (8001728 <prvAddNewTaskToReadyList+0xc8>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d802      	bhi.n	80016ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80016a8:	4a1f      	ldr	r2, [pc, #124]	; (8001728 <prvAddNewTaskToReadyList+0xc8>)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80016ae:	4b20      	ldr	r3, [pc, #128]	; (8001730 <prvAddNewTaskToReadyList+0xd0>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	3301      	adds	r3, #1
 80016b4:	4a1e      	ldr	r2, [pc, #120]	; (8001730 <prvAddNewTaskToReadyList+0xd0>)
 80016b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80016b8:	4b1d      	ldr	r3, [pc, #116]	; (8001730 <prvAddNewTaskToReadyList+0xd0>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016c4:	4b1b      	ldr	r3, [pc, #108]	; (8001734 <prvAddNewTaskToReadyList+0xd4>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d903      	bls.n	80016d4 <prvAddNewTaskToReadyList+0x74>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d0:	4a18      	ldr	r2, [pc, #96]	; (8001734 <prvAddNewTaskToReadyList+0xd4>)
 80016d2:	6013      	str	r3, [r2, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016d8:	4613      	mov	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	4413      	add	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4a15      	ldr	r2, [pc, #84]	; (8001738 <prvAddNewTaskToReadyList+0xd8>)
 80016e2:	441a      	add	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3304      	adds	r3, #4
 80016e8:	4619      	mov	r1, r3
 80016ea:	4610      	mov	r0, r2
 80016ec:	f7ff f913 	bl	8000916 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80016f0:	f001 fa30 	bl	8002b54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80016f4:	4b0d      	ldr	r3, [pc, #52]	; (800172c <prvAddNewTaskToReadyList+0xcc>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d00e      	beq.n	800171a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80016fc:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <prvAddNewTaskToReadyList+0xc8>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001706:	429a      	cmp	r2, r3
 8001708:	d207      	bcs.n	800171a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800170a:	4b0c      	ldr	r3, [pc, #48]	; (800173c <prvAddNewTaskToReadyList+0xdc>)
 800170c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	f3bf 8f4f 	dsb	sy
 8001716:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000c58 	.word	0x20000c58
 8001728:	20000784 	.word	0x20000784
 800172c:	20000c64 	.word	0x20000c64
 8001730:	20000c74 	.word	0x20000c74
 8001734:	20000c60 	.word	0x20000c60
 8001738:	20000788 	.word	0x20000788
 800173c:	e000ed04 	.word	0xe000ed04

08001740 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001748:	2300      	movs	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d017      	beq.n	8001782 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001752:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <vTaskDelay+0x60>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00a      	beq.n	8001770 <vTaskDelay+0x30>
	__asm volatile
 800175a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800175e:	f383 8811 	msr	BASEPRI, r3
 8001762:	f3bf 8f6f 	isb	sy
 8001766:	f3bf 8f4f 	dsb	sy
 800176a:	60bb      	str	r3, [r7, #8]
}
 800176c:	bf00      	nop
 800176e:	e7fe      	b.n	800176e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8001770:	f000 f880 	bl	8001874 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001774:	2100      	movs	r1, #0
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 fcea 	bl	8002150 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800177c:	f000 f888 	bl	8001890 <xTaskResumeAll>
 8001780:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d107      	bne.n	8001798 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <vTaskDelay+0x64>)
 800178a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	f3bf 8f4f 	dsb	sy
 8001794:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001798:	bf00      	nop
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20000c80 	.word	0x20000c80
 80017a4:	e000ed04 	.word	0xe000ed04

080017a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08a      	sub	sp, #40	; 0x28
 80017ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80017b6:	463a      	mov	r2, r7
 80017b8:	1d39      	adds	r1, r7, #4
 80017ba:	f107 0308 	add.w	r3, r7, #8
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff f848 	bl	8000854 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80017c4:	6839      	ldr	r1, [r7, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	68ba      	ldr	r2, [r7, #8]
 80017ca:	9202      	str	r2, [sp, #8]
 80017cc:	9301      	str	r3, [sp, #4]
 80017ce:	2300      	movs	r3, #0
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	2300      	movs	r3, #0
 80017d4:	460a      	mov	r2, r1
 80017d6:	4921      	ldr	r1, [pc, #132]	; (800185c <vTaskStartScheduler+0xb4>)
 80017d8:	4821      	ldr	r0, [pc, #132]	; (8001860 <vTaskStartScheduler+0xb8>)
 80017da:	f7ff fe0f 	bl	80013fc <xTaskCreateStatic>
 80017de:	4603      	mov	r3, r0
 80017e0:	4a20      	ldr	r2, [pc, #128]	; (8001864 <vTaskStartScheduler+0xbc>)
 80017e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80017e4:	4b1f      	ldr	r3, [pc, #124]	; (8001864 <vTaskStartScheduler+0xbc>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d002      	beq.n	80017f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80017ec:	2301      	movs	r3, #1
 80017ee:	617b      	str	r3, [r7, #20]
 80017f0:	e001      	b.n	80017f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d102      	bne.n	8001802 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80017fc:	f000 fcfc 	bl	80021f8 <xTimerCreateTimerTask>
 8001800:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d116      	bne.n	8001836 <vTaskStartScheduler+0x8e>
	__asm volatile
 8001808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800180c:	f383 8811 	msr	BASEPRI, r3
 8001810:	f3bf 8f6f 	isb	sy
 8001814:	f3bf 8f4f 	dsb	sy
 8001818:	613b      	str	r3, [r7, #16]
}
 800181a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800181c:	4b12      	ldr	r3, [pc, #72]	; (8001868 <vTaskStartScheduler+0xc0>)
 800181e:	f04f 32ff 	mov.w	r2, #4294967295
 8001822:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001824:	4b11      	ldr	r3, [pc, #68]	; (800186c <vTaskStartScheduler+0xc4>)
 8001826:	2201      	movs	r2, #1
 8001828:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800182a:	4b11      	ldr	r3, [pc, #68]	; (8001870 <vTaskStartScheduler+0xc8>)
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001830:	f001 f8be 	bl	80029b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001834:	e00e      	b.n	8001854 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800183c:	d10a      	bne.n	8001854 <vTaskStartScheduler+0xac>
	__asm volatile
 800183e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001842:	f383 8811 	msr	BASEPRI, r3
 8001846:	f3bf 8f6f 	isb	sy
 800184a:	f3bf 8f4f 	dsb	sy
 800184e:	60fb      	str	r3, [r7, #12]
}
 8001850:	bf00      	nop
 8001852:	e7fe      	b.n	8001852 <vTaskStartScheduler+0xaa>
}
 8001854:	bf00      	nop
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	08003fdc 	.word	0x08003fdc
 8001860:	08001e8d 	.word	0x08001e8d
 8001864:	20000c7c 	.word	0x20000c7c
 8001868:	20000c78 	.word	0x20000c78
 800186c:	20000c64 	.word	0x20000c64
 8001870:	20000c5c 	.word	0x20000c5c

08001874 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8001878:	4b04      	ldr	r3, [pc, #16]	; (800188c <vTaskSuspendAll+0x18>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	3301      	adds	r3, #1
 800187e:	4a03      	ldr	r2, [pc, #12]	; (800188c <vTaskSuspendAll+0x18>)
 8001880:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	20000c80 	.word	0x20000c80

08001890 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800189a:	2300      	movs	r3, #0
 800189c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800189e:	4b42      	ldr	r3, [pc, #264]	; (80019a8 <xTaskResumeAll+0x118>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d10a      	bne.n	80018bc <xTaskResumeAll+0x2c>
	__asm volatile
 80018a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018aa:	f383 8811 	msr	BASEPRI, r3
 80018ae:	f3bf 8f6f 	isb	sy
 80018b2:	f3bf 8f4f 	dsb	sy
 80018b6:	603b      	str	r3, [r7, #0]
}
 80018b8:	bf00      	nop
 80018ba:	e7fe      	b.n	80018ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80018bc:	f001 f91a 	bl	8002af4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80018c0:	4b39      	ldr	r3, [pc, #228]	; (80019a8 <xTaskResumeAll+0x118>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	3b01      	subs	r3, #1
 80018c6:	4a38      	ldr	r2, [pc, #224]	; (80019a8 <xTaskResumeAll+0x118>)
 80018c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80018ca:	4b37      	ldr	r3, [pc, #220]	; (80019a8 <xTaskResumeAll+0x118>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d162      	bne.n	8001998 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80018d2:	4b36      	ldr	r3, [pc, #216]	; (80019ac <xTaskResumeAll+0x11c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d05e      	beq.n	8001998 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80018da:	e02f      	b.n	800193c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80018dc:	4b34      	ldr	r3, [pc, #208]	; (80019b0 <xTaskResumeAll+0x120>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	3318      	adds	r3, #24
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff f871 	bl	80009d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	3304      	adds	r3, #4
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff f86c 	bl	80009d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018fc:	4b2d      	ldr	r3, [pc, #180]	; (80019b4 <xTaskResumeAll+0x124>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	429a      	cmp	r2, r3
 8001902:	d903      	bls.n	800190c <xTaskResumeAll+0x7c>
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001908:	4a2a      	ldr	r2, [pc, #168]	; (80019b4 <xTaskResumeAll+0x124>)
 800190a:	6013      	str	r3, [r2, #0]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001910:	4613      	mov	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4a27      	ldr	r2, [pc, #156]	; (80019b8 <xTaskResumeAll+0x128>)
 800191a:	441a      	add	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	3304      	adds	r3, #4
 8001920:	4619      	mov	r1, r3
 8001922:	4610      	mov	r0, r2
 8001924:	f7fe fff7 	bl	8000916 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800192c:	4b23      	ldr	r3, [pc, #140]	; (80019bc <xTaskResumeAll+0x12c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001932:	429a      	cmp	r2, r3
 8001934:	d302      	bcc.n	800193c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8001936:	4b22      	ldr	r3, [pc, #136]	; (80019c0 <xTaskResumeAll+0x130>)
 8001938:	2201      	movs	r2, #1
 800193a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800193c:	4b1c      	ldr	r3, [pc, #112]	; (80019b0 <xTaskResumeAll+0x120>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d1cb      	bne.n	80018dc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800194a:	f000 fb55 	bl	8001ff8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800194e:	4b1d      	ldr	r3, [pc, #116]	; (80019c4 <xTaskResumeAll+0x134>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d010      	beq.n	800197c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800195a:	f000 f847 	bl	80019ec <xTaskIncrementTick>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d002      	beq.n	800196a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8001964:	4b16      	ldr	r3, [pc, #88]	; (80019c0 <xTaskResumeAll+0x130>)
 8001966:	2201      	movs	r2, #1
 8001968:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	3b01      	subs	r3, #1
 800196e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1f1      	bne.n	800195a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8001976:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <xTaskResumeAll+0x134>)
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800197c:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <xTaskResumeAll+0x130>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d009      	beq.n	8001998 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001984:	2301      	movs	r3, #1
 8001986:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001988:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <xTaskResumeAll+0x138>)
 800198a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	f3bf 8f4f 	dsb	sy
 8001994:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001998:	f001 f8dc 	bl	8002b54 <vPortExitCritical>

	return xAlreadyYielded;
 800199c:	68bb      	ldr	r3, [r7, #8]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000c80 	.word	0x20000c80
 80019ac:	20000c58 	.word	0x20000c58
 80019b0:	20000c18 	.word	0x20000c18
 80019b4:	20000c60 	.word	0x20000c60
 80019b8:	20000788 	.word	0x20000788
 80019bc:	20000784 	.word	0x20000784
 80019c0:	20000c6c 	.word	0x20000c6c
 80019c4:	20000c68 	.word	0x20000c68
 80019c8:	e000ed04 	.word	0xe000ed04

080019cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80019d2:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <xTaskGetTickCount+0x1c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80019d8:	687b      	ldr	r3, [r7, #4]
}
 80019da:	4618      	mov	r0, r3
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	20000c5c 	.word	0x20000c5c

080019ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80019f6:	4b4f      	ldr	r3, [pc, #316]	; (8001b34 <xTaskIncrementTick+0x148>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f040 808f 	bne.w	8001b1e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001a00:	4b4d      	ldr	r3, [pc, #308]	; (8001b38 <xTaskIncrementTick+0x14c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	3301      	adds	r3, #1
 8001a06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001a08:	4a4b      	ldr	r2, [pc, #300]	; (8001b38 <xTaskIncrementTick+0x14c>)
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d120      	bne.n	8001a56 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8001a14:	4b49      	ldr	r3, [pc, #292]	; (8001b3c <xTaskIncrementTick+0x150>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d00a      	beq.n	8001a34 <xTaskIncrementTick+0x48>
	__asm volatile
 8001a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a22:	f383 8811 	msr	BASEPRI, r3
 8001a26:	f3bf 8f6f 	isb	sy
 8001a2a:	f3bf 8f4f 	dsb	sy
 8001a2e:	603b      	str	r3, [r7, #0]
}
 8001a30:	bf00      	nop
 8001a32:	e7fe      	b.n	8001a32 <xTaskIncrementTick+0x46>
 8001a34:	4b41      	ldr	r3, [pc, #260]	; (8001b3c <xTaskIncrementTick+0x150>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	4b41      	ldr	r3, [pc, #260]	; (8001b40 <xTaskIncrementTick+0x154>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a3f      	ldr	r2, [pc, #252]	; (8001b3c <xTaskIncrementTick+0x150>)
 8001a40:	6013      	str	r3, [r2, #0]
 8001a42:	4a3f      	ldr	r2, [pc, #252]	; (8001b40 <xTaskIncrementTick+0x154>)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	4b3e      	ldr	r3, [pc, #248]	; (8001b44 <xTaskIncrementTick+0x158>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	4a3d      	ldr	r2, [pc, #244]	; (8001b44 <xTaskIncrementTick+0x158>)
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	f000 fad1 	bl	8001ff8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001a56:	4b3c      	ldr	r3, [pc, #240]	; (8001b48 <xTaskIncrementTick+0x15c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d349      	bcc.n	8001af4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a60:	4b36      	ldr	r3, [pc, #216]	; (8001b3c <xTaskIncrementTick+0x150>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d104      	bne.n	8001a74 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a6a:	4b37      	ldr	r3, [pc, #220]	; (8001b48 <xTaskIncrementTick+0x15c>)
 8001a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a70:	601a      	str	r2, [r3, #0]
					break;
 8001a72:	e03f      	b.n	8001af4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a74:	4b31      	ldr	r3, [pc, #196]	; (8001b3c <xTaskIncrementTick+0x150>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d203      	bcs.n	8001a94 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001a8c:	4a2e      	ldr	r2, [pc, #184]	; (8001b48 <xTaskIncrementTick+0x15c>)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001a92:	e02f      	b.n	8001af4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	3304      	adds	r3, #4
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7fe ff99 	bl	80009d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d004      	beq.n	8001ab0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	3318      	adds	r3, #24
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7fe ff90 	bl	80009d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ab4:	4b25      	ldr	r3, [pc, #148]	; (8001b4c <xTaskIncrementTick+0x160>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d903      	bls.n	8001ac4 <xTaskIncrementTick+0xd8>
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac0:	4a22      	ldr	r2, [pc, #136]	; (8001b4c <xTaskIncrementTick+0x160>)
 8001ac2:	6013      	str	r3, [r2, #0]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ac8:	4613      	mov	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4a1f      	ldr	r2, [pc, #124]	; (8001b50 <xTaskIncrementTick+0x164>)
 8001ad2:	441a      	add	r2, r3
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	3304      	adds	r3, #4
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4610      	mov	r0, r2
 8001adc:	f7fe ff1b 	bl	8000916 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ae4:	4b1b      	ldr	r3, [pc, #108]	; (8001b54 <xTaskIncrementTick+0x168>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d3b8      	bcc.n	8001a60 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8001aee:	2301      	movs	r3, #1
 8001af0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001af2:	e7b5      	b.n	8001a60 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001af4:	4b17      	ldr	r3, [pc, #92]	; (8001b54 <xTaskIncrementTick+0x168>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001afa:	4915      	ldr	r1, [pc, #84]	; (8001b50 <xTaskIncrementTick+0x164>)
 8001afc:	4613      	mov	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	440b      	add	r3, r1
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d901      	bls.n	8001b10 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001b10:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <xTaskIncrementTick+0x16c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d007      	beq.n	8001b28 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	617b      	str	r3, [r7, #20]
 8001b1c:	e004      	b.n	8001b28 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001b1e:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <xTaskIncrementTick+0x170>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	3301      	adds	r3, #1
 8001b24:	4a0d      	ldr	r2, [pc, #52]	; (8001b5c <xTaskIncrementTick+0x170>)
 8001b26:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001b28:	697b      	ldr	r3, [r7, #20]
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3718      	adds	r7, #24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000c80 	.word	0x20000c80
 8001b38:	20000c5c 	.word	0x20000c5c
 8001b3c:	20000c10 	.word	0x20000c10
 8001b40:	20000c14 	.word	0x20000c14
 8001b44:	20000c70 	.word	0x20000c70
 8001b48:	20000c78 	.word	0x20000c78
 8001b4c:	20000c60 	.word	0x20000c60
 8001b50:	20000788 	.word	0x20000788
 8001b54:	20000784 	.word	0x20000784
 8001b58:	20000c6c 	.word	0x20000c6c
 8001b5c:	20000c68 	.word	0x20000c68

08001b60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001b66:	4b28      	ldr	r3, [pc, #160]	; (8001c08 <vTaskSwitchContext+0xa8>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001b6e:	4b27      	ldr	r3, [pc, #156]	; (8001c0c <vTaskSwitchContext+0xac>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001b74:	e041      	b.n	8001bfa <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8001b76:	4b25      	ldr	r3, [pc, #148]	; (8001c0c <vTaskSwitchContext+0xac>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b7c:	4b24      	ldr	r3, [pc, #144]	; (8001c10 <vTaskSwitchContext+0xb0>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	e010      	b.n	8001ba6 <vTaskSwitchContext+0x46>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d10a      	bne.n	8001ba0 <vTaskSwitchContext+0x40>
	__asm volatile
 8001b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b8e:	f383 8811 	msr	BASEPRI, r3
 8001b92:	f3bf 8f6f 	isb	sy
 8001b96:	f3bf 8f4f 	dsb	sy
 8001b9a:	607b      	str	r3, [r7, #4]
}
 8001b9c:	bf00      	nop
 8001b9e:	e7fe      	b.n	8001b9e <vTaskSwitchContext+0x3e>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	491b      	ldr	r1, [pc, #108]	; (8001c14 <vTaskSwitchContext+0xb4>)
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	4613      	mov	r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	4413      	add	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	440b      	add	r3, r1
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d0e4      	beq.n	8001b84 <vTaskSwitchContext+0x24>
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4a13      	ldr	r2, [pc, #76]	; (8001c14 <vTaskSwitchContext+0xb4>)
 8001bc6:	4413      	add	r3, r2
 8001bc8:	60bb      	str	r3, [r7, #8]
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	605a      	str	r2, [r3, #4]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	3308      	adds	r3, #8
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d104      	bne.n	8001bea <vTaskSwitchContext+0x8a>
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	4a09      	ldr	r2, [pc, #36]	; (8001c18 <vTaskSwitchContext+0xb8>)
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	4a06      	ldr	r2, [pc, #24]	; (8001c10 <vTaskSwitchContext+0xb0>)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6013      	str	r3, [r2, #0]
}
 8001bfa:	bf00      	nop
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	20000c80 	.word	0x20000c80
 8001c0c:	20000c6c 	.word	0x20000c6c
 8001c10:	20000c60 	.word	0x20000c60
 8001c14:	20000788 	.word	0x20000788
 8001c18:	20000784 	.word	0x20000784

08001c1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d10a      	bne.n	8001c42 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8001c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c30:	f383 8811 	msr	BASEPRI, r3
 8001c34:	f3bf 8f6f 	isb	sy
 8001c38:	f3bf 8f4f 	dsb	sy
 8001c3c:	60fb      	str	r3, [r7, #12]
}
 8001c3e:	bf00      	nop
 8001c40:	e7fe      	b.n	8001c40 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001c42:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <vTaskPlaceOnEventList+0x44>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	3318      	adds	r3, #24
 8001c48:	4619      	mov	r1, r3
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7fe fe87 	bl	800095e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001c50:	2101      	movs	r1, #1
 8001c52:	6838      	ldr	r0, [r7, #0]
 8001c54:	f000 fa7c 	bl	8002150 <prvAddCurrentTaskToDelayedList>
}
 8001c58:	bf00      	nop
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20000784 	.word	0x20000784

08001c64 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10a      	bne.n	8001c8c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8001c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c7a:	f383 8811 	msr	BASEPRI, r3
 8001c7e:	f3bf 8f6f 	isb	sy
 8001c82:	f3bf 8f4f 	dsb	sy
 8001c86:	617b      	str	r3, [r7, #20]
}
 8001c88:	bf00      	nop
 8001c8a:	e7fe      	b.n	8001c8a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001c8c:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <vTaskPlaceOnEventListRestricted+0x54>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	3318      	adds	r3, #24
 8001c92:	4619      	mov	r1, r3
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f7fe fe3e 	bl	8000916 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d002      	beq.n	8001ca6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8001ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	68b8      	ldr	r0, [r7, #8]
 8001caa:	f000 fa51 	bl	8002150 <prvAddCurrentTaskToDelayedList>
	}
 8001cae:	bf00      	nop
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000784 	.word	0x20000784

08001cbc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d10a      	bne.n	8001ce8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8001cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cd6:	f383 8811 	msr	BASEPRI, r3
 8001cda:	f3bf 8f6f 	isb	sy
 8001cde:	f3bf 8f4f 	dsb	sy
 8001ce2:	60fb      	str	r3, [r7, #12]
}
 8001ce4:	bf00      	nop
 8001ce6:	e7fe      	b.n	8001ce6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	3318      	adds	r3, #24
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe fe6f 	bl	80009d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001cf2:	4b1e      	ldr	r3, [pc, #120]	; (8001d6c <xTaskRemoveFromEventList+0xb0>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d11d      	bne.n	8001d36 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7fe fe66 	bl	80009d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d08:	4b19      	ldr	r3, [pc, #100]	; (8001d70 <xTaskRemoveFromEventList+0xb4>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d903      	bls.n	8001d18 <xTaskRemoveFromEventList+0x5c>
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d14:	4a16      	ldr	r2, [pc, #88]	; (8001d70 <xTaskRemoveFromEventList+0xb4>)
 8001d16:	6013      	str	r3, [r2, #0]
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4413      	add	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4a13      	ldr	r2, [pc, #76]	; (8001d74 <xTaskRemoveFromEventList+0xb8>)
 8001d26:	441a      	add	r2, r3
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	3304      	adds	r3, #4
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4610      	mov	r0, r2
 8001d30:	f7fe fdf1 	bl	8000916 <vListInsertEnd>
 8001d34:	e005      	b.n	8001d42 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	3318      	adds	r3, #24
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	480e      	ldr	r0, [pc, #56]	; (8001d78 <xTaskRemoveFromEventList+0xbc>)
 8001d3e:	f7fe fdea 	bl	8000916 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d46:	4b0d      	ldr	r3, [pc, #52]	; (8001d7c <xTaskRemoveFromEventList+0xc0>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d905      	bls.n	8001d5c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001d50:	2301      	movs	r3, #1
 8001d52:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001d54:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <xTaskRemoveFromEventList+0xc4>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	e001      	b.n	8001d60 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8001d60:	697b      	ldr	r3, [r7, #20]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000c80 	.word	0x20000c80
 8001d70:	20000c60 	.word	0x20000c60
 8001d74:	20000788 	.word	0x20000788
 8001d78:	20000c18 	.word	0x20000c18
 8001d7c:	20000784 	.word	0x20000784
 8001d80:	20000c6c 	.word	0x20000c6c

08001d84 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <vTaskInternalSetTimeOutState+0x24>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001d94:	4b05      	ldr	r3, [pc, #20]	; (8001dac <vTaskInternalSetTimeOutState+0x28>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	605a      	str	r2, [r3, #4]
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	20000c70 	.word	0x20000c70
 8001dac:	20000c5c 	.word	0x20000c5c

08001db0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b088      	sub	sp, #32
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d10a      	bne.n	8001dd6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8001dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dc4:	f383 8811 	msr	BASEPRI, r3
 8001dc8:	f3bf 8f6f 	isb	sy
 8001dcc:	f3bf 8f4f 	dsb	sy
 8001dd0:	613b      	str	r3, [r7, #16]
}
 8001dd2:	bf00      	nop
 8001dd4:	e7fe      	b.n	8001dd4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10a      	bne.n	8001df2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8001ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001de0:	f383 8811 	msr	BASEPRI, r3
 8001de4:	f3bf 8f6f 	isb	sy
 8001de8:	f3bf 8f4f 	dsb	sy
 8001dec:	60fb      	str	r3, [r7, #12]
}
 8001dee:	bf00      	nop
 8001df0:	e7fe      	b.n	8001df0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8001df2:	f000 fe7f 	bl	8002af4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001df6:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <xTaskCheckForTimeOut+0xbc>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e0e:	d102      	bne.n	8001e16 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001e10:	2300      	movs	r3, #0
 8001e12:	61fb      	str	r3, [r7, #28]
 8001e14:	e023      	b.n	8001e5e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	4b15      	ldr	r3, [pc, #84]	; (8001e70 <xTaskCheckForTimeOut+0xc0>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d007      	beq.n	8001e32 <xTaskCheckForTimeOut+0x82>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d302      	bcc.n	8001e32 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	61fb      	str	r3, [r7, #28]
 8001e30:	e015      	b.n	8001e5e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d20b      	bcs.n	8001e54 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	1ad2      	subs	r2, r2, r3
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f7ff ff9b 	bl	8001d84 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
 8001e52:	e004      	b.n	8001e5e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8001e5e:	f000 fe79 	bl	8002b54 <vPortExitCritical>

	return xReturn;
 8001e62:	69fb      	ldr	r3, [r7, #28]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3720      	adds	r7, #32
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20000c5c 	.word	0x20000c5c
 8001e70:	20000c70 	.word	0x20000c70

08001e74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8001e78:	4b03      	ldr	r3, [pc, #12]	; (8001e88 <vTaskMissedYield+0x14>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	601a      	str	r2, [r3, #0]
}
 8001e7e:	bf00      	nop
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	20000c6c 	.word	0x20000c6c

08001e8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001e94:	f000 f852 	bl	8001f3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001e98:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <prvIdleTask+0x28>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d9f9      	bls.n	8001e94 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001ea0:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <prvIdleTask+0x2c>)
 8001ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	f3bf 8f4f 	dsb	sy
 8001eac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001eb0:	e7f0      	b.n	8001e94 <prvIdleTask+0x8>
 8001eb2:	bf00      	nop
 8001eb4:	20000788 	.word	0x20000788
 8001eb8:	e000ed04 	.word	0xe000ed04

08001ebc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	607b      	str	r3, [r7, #4]
 8001ec6:	e00c      	b.n	8001ee2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4a12      	ldr	r2, [pc, #72]	; (8001f1c <prvInitialiseTaskLists+0x60>)
 8001ed4:	4413      	add	r3, r2
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7fe fcf0 	bl	80008bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	607b      	str	r3, [r7, #4]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b37      	cmp	r3, #55	; 0x37
 8001ee6:	d9ef      	bls.n	8001ec8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001ee8:	480d      	ldr	r0, [pc, #52]	; (8001f20 <prvInitialiseTaskLists+0x64>)
 8001eea:	f7fe fce7 	bl	80008bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001eee:	480d      	ldr	r0, [pc, #52]	; (8001f24 <prvInitialiseTaskLists+0x68>)
 8001ef0:	f7fe fce4 	bl	80008bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001ef4:	480c      	ldr	r0, [pc, #48]	; (8001f28 <prvInitialiseTaskLists+0x6c>)
 8001ef6:	f7fe fce1 	bl	80008bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001efa:	480c      	ldr	r0, [pc, #48]	; (8001f2c <prvInitialiseTaskLists+0x70>)
 8001efc:	f7fe fcde 	bl	80008bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001f00:	480b      	ldr	r0, [pc, #44]	; (8001f30 <prvInitialiseTaskLists+0x74>)
 8001f02:	f7fe fcdb 	bl	80008bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001f06:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <prvInitialiseTaskLists+0x78>)
 8001f08:	4a05      	ldr	r2, [pc, #20]	; (8001f20 <prvInitialiseTaskLists+0x64>)
 8001f0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001f0c:	4b0a      	ldr	r3, [pc, #40]	; (8001f38 <prvInitialiseTaskLists+0x7c>)
 8001f0e:	4a05      	ldr	r2, [pc, #20]	; (8001f24 <prvInitialiseTaskLists+0x68>)
 8001f10:	601a      	str	r2, [r3, #0]
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000788 	.word	0x20000788
 8001f20:	20000be8 	.word	0x20000be8
 8001f24:	20000bfc 	.word	0x20000bfc
 8001f28:	20000c18 	.word	0x20000c18
 8001f2c:	20000c2c 	.word	0x20000c2c
 8001f30:	20000c44 	.word	0x20000c44
 8001f34:	20000c10 	.word	0x20000c10
 8001f38:	20000c14 	.word	0x20000c14

08001f3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001f42:	e019      	b.n	8001f78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001f44:	f000 fdd6 	bl	8002af4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f48:	4b10      	ldr	r3, [pc, #64]	; (8001f8c <prvCheckTasksWaitingTermination+0x50>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3304      	adds	r3, #4
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7fe fd3b 	bl	80009d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001f5a:	4b0d      	ldr	r3, [pc, #52]	; (8001f90 <prvCheckTasksWaitingTermination+0x54>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	4a0b      	ldr	r2, [pc, #44]	; (8001f90 <prvCheckTasksWaitingTermination+0x54>)
 8001f62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001f64:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <prvCheckTasksWaitingTermination+0x58>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	4a0a      	ldr	r2, [pc, #40]	; (8001f94 <prvCheckTasksWaitingTermination+0x58>)
 8001f6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8001f6e:	f000 fdf1 	bl	8002b54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f810 	bl	8001f98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001f78:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <prvCheckTasksWaitingTermination+0x58>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1e1      	bne.n	8001f44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001f80:	bf00      	nop
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000c2c 	.word	0x20000c2c
 8001f90:	20000c58 	.word	0x20000c58
 8001f94:	20000c40 	.word	0x20000c40

08001f98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d108      	bne.n	8001fbc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f000 ff6c 	bl	8002e8c <vPortFree>
				vPortFree( pxTCB );
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 ff69 	bl	8002e8c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001fba:	e018      	b.n	8001fee <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d103      	bne.n	8001fce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 ff60 	bl	8002e8c <vPortFree>
	}
 8001fcc:	e00f      	b.n	8001fee <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d00a      	beq.n	8001fee <prvDeleteTCB+0x56>
	__asm volatile
 8001fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fdc:	f383 8811 	msr	BASEPRI, r3
 8001fe0:	f3bf 8f6f 	isb	sy
 8001fe4:	f3bf 8f4f 	dsb	sy
 8001fe8:	60fb      	str	r3, [r7, #12]
}
 8001fea:	bf00      	nop
 8001fec:	e7fe      	b.n	8001fec <prvDeleteTCB+0x54>
	}
 8001fee:	bf00      	nop
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001ffe:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <prvResetNextTaskUnblockTime+0x38>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d104      	bne.n	8002012 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002008:	4b0a      	ldr	r3, [pc, #40]	; (8002034 <prvResetNextTaskUnblockTime+0x3c>)
 800200a:	f04f 32ff 	mov.w	r2, #4294967295
 800200e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002010:	e008      	b.n	8002024 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002012:	4b07      	ldr	r3, [pc, #28]	; (8002030 <prvResetNextTaskUnblockTime+0x38>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	4a04      	ldr	r2, [pc, #16]	; (8002034 <prvResetNextTaskUnblockTime+0x3c>)
 8002022:	6013      	str	r3, [r2, #0]
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	20000c10 	.word	0x20000c10
 8002034:	20000c78 	.word	0x20000c78

08002038 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800203e:	4b0b      	ldr	r3, [pc, #44]	; (800206c <xTaskGetSchedulerState+0x34>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d102      	bne.n	800204c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002046:	2301      	movs	r3, #1
 8002048:	607b      	str	r3, [r7, #4]
 800204a:	e008      	b.n	800205e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800204c:	4b08      	ldr	r3, [pc, #32]	; (8002070 <xTaskGetSchedulerState+0x38>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d102      	bne.n	800205a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002054:	2302      	movs	r3, #2
 8002056:	607b      	str	r3, [r7, #4]
 8002058:	e001      	b.n	800205e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800205a:	2300      	movs	r3, #0
 800205c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800205e:	687b      	ldr	r3, [r7, #4]
	}
 8002060:	4618      	mov	r0, r3
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	20000c64 	.word	0x20000c64
 8002070:	20000c80 	.word	0x20000c80

08002074 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d056      	beq.n	8002138 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800208a:	4b2e      	ldr	r3, [pc, #184]	; (8002144 <xTaskPriorityDisinherit+0xd0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	429a      	cmp	r2, r3
 8002092:	d00a      	beq.n	80020aa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8002094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002098:	f383 8811 	msr	BASEPRI, r3
 800209c:	f3bf 8f6f 	isb	sy
 80020a0:	f3bf 8f4f 	dsb	sy
 80020a4:	60fb      	str	r3, [r7, #12]
}
 80020a6:	bf00      	nop
 80020a8:	e7fe      	b.n	80020a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10a      	bne.n	80020c8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80020b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020b6:	f383 8811 	msr	BASEPRI, r3
 80020ba:	f3bf 8f6f 	isb	sy
 80020be:	f3bf 8f4f 	dsb	sy
 80020c2:	60bb      	str	r3, [r7, #8]
}
 80020c4:	bf00      	nop
 80020c6:	e7fe      	b.n	80020c6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020cc:	1e5a      	subs	r2, r3, #1
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020da:	429a      	cmp	r2, r3
 80020dc:	d02c      	beq.n	8002138 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d128      	bne.n	8002138 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	3304      	adds	r3, #4
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7fe fc70 	bl	80009d0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002108:	4b0f      	ldr	r3, [pc, #60]	; (8002148 <xTaskPriorityDisinherit+0xd4>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	429a      	cmp	r2, r3
 800210e:	d903      	bls.n	8002118 <xTaskPriorityDisinherit+0xa4>
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002114:	4a0c      	ldr	r2, [pc, #48]	; (8002148 <xTaskPriorityDisinherit+0xd4>)
 8002116:	6013      	str	r3, [r2, #0]
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800211c:	4613      	mov	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4a09      	ldr	r2, [pc, #36]	; (800214c <xTaskPriorityDisinherit+0xd8>)
 8002126:	441a      	add	r2, r3
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	3304      	adds	r3, #4
 800212c:	4619      	mov	r1, r3
 800212e:	4610      	mov	r0, r2
 8002130:	f7fe fbf1 	bl	8000916 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002134:	2301      	movs	r3, #1
 8002136:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002138:	697b      	ldr	r3, [r7, #20]
	}
 800213a:	4618      	mov	r0, r3
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20000784 	.word	0x20000784
 8002148:	20000c60 	.word	0x20000c60
 800214c:	20000788 	.word	0x20000788

08002150 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800215a:	4b21      	ldr	r3, [pc, #132]	; (80021e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002160:	4b20      	ldr	r3, [pc, #128]	; (80021e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	3304      	adds	r3, #4
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe fc32 	bl	80009d0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002172:	d10a      	bne.n	800218a <prvAddCurrentTaskToDelayedList+0x3a>
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d007      	beq.n	800218a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800217a:	4b1a      	ldr	r3, [pc, #104]	; (80021e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	3304      	adds	r3, #4
 8002180:	4619      	mov	r1, r3
 8002182:	4819      	ldr	r0, [pc, #100]	; (80021e8 <prvAddCurrentTaskToDelayedList+0x98>)
 8002184:	f7fe fbc7 	bl	8000916 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002188:	e026      	b.n	80021d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4413      	add	r3, r2
 8002190:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002192:	4b14      	ldr	r3, [pc, #80]	; (80021e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d209      	bcs.n	80021b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80021a2:	4b12      	ldr	r3, [pc, #72]	; (80021ec <prvAddCurrentTaskToDelayedList+0x9c>)
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	4b0f      	ldr	r3, [pc, #60]	; (80021e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	3304      	adds	r3, #4
 80021ac:	4619      	mov	r1, r3
 80021ae:	4610      	mov	r0, r2
 80021b0:	f7fe fbd5 	bl	800095e <vListInsert>
}
 80021b4:	e010      	b.n	80021d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80021b6:	4b0e      	ldr	r3, [pc, #56]	; (80021f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	4b0a      	ldr	r3, [pc, #40]	; (80021e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	3304      	adds	r3, #4
 80021c0:	4619      	mov	r1, r3
 80021c2:	4610      	mov	r0, r2
 80021c4:	f7fe fbcb 	bl	800095e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80021c8:	4b0a      	ldr	r3, [pc, #40]	; (80021f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68ba      	ldr	r2, [r7, #8]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d202      	bcs.n	80021d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80021d2:	4a08      	ldr	r2, [pc, #32]	; (80021f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	6013      	str	r3, [r2, #0]
}
 80021d8:	bf00      	nop
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	20000c5c 	.word	0x20000c5c
 80021e4:	20000784 	.word	0x20000784
 80021e8:	20000c44 	.word	0x20000c44
 80021ec:	20000c14 	.word	0x20000c14
 80021f0:	20000c10 	.word	0x20000c10
 80021f4:	20000c78 	.word	0x20000c78

080021f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08a      	sub	sp, #40	; 0x28
 80021fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8002202:	f000 fb07 	bl	8002814 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002206:	4b1c      	ldr	r3, [pc, #112]	; (8002278 <xTimerCreateTimerTask+0x80>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d021      	beq.n	8002252 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800220e:	2300      	movs	r3, #0
 8002210:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8002212:	2300      	movs	r3, #0
 8002214:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8002216:	1d3a      	adds	r2, r7, #4
 8002218:	f107 0108 	add.w	r1, r7, #8
 800221c:	f107 030c 	add.w	r3, r7, #12
 8002220:	4618      	mov	r0, r3
 8002222:	f7fe fb31 	bl	8000888 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	9202      	str	r2, [sp, #8]
 800222e:	9301      	str	r3, [sp, #4]
 8002230:	2302      	movs	r3, #2
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	2300      	movs	r3, #0
 8002236:	460a      	mov	r2, r1
 8002238:	4910      	ldr	r1, [pc, #64]	; (800227c <xTimerCreateTimerTask+0x84>)
 800223a:	4811      	ldr	r0, [pc, #68]	; (8002280 <xTimerCreateTimerTask+0x88>)
 800223c:	f7ff f8de 	bl	80013fc <xTaskCreateStatic>
 8002240:	4603      	mov	r3, r0
 8002242:	4a10      	ldr	r2, [pc, #64]	; (8002284 <xTimerCreateTimerTask+0x8c>)
 8002244:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8002246:	4b0f      	ldr	r3, [pc, #60]	; (8002284 <xTimerCreateTimerTask+0x8c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800224e:	2301      	movs	r3, #1
 8002250:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d10a      	bne.n	800226e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8002258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800225c:	f383 8811 	msr	BASEPRI, r3
 8002260:	f3bf 8f6f 	isb	sy
 8002264:	f3bf 8f4f 	dsb	sy
 8002268:	613b      	str	r3, [r7, #16]
}
 800226a:	bf00      	nop
 800226c:	e7fe      	b.n	800226c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800226e:	697b      	ldr	r3, [r7, #20]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3718      	adds	r7, #24
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	20000cb4 	.word	0x20000cb4
 800227c:	08003fe4 	.word	0x08003fe4
 8002280:	080023bd 	.word	0x080023bd
 8002284:	20000cb8 	.word	0x20000cb8

08002288 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b08a      	sub	sp, #40	; 0x28
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
 8002294:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8002296:	2300      	movs	r3, #0
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d10a      	bne.n	80022b6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80022a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022a4:	f383 8811 	msr	BASEPRI, r3
 80022a8:	f3bf 8f6f 	isb	sy
 80022ac:	f3bf 8f4f 	dsb	sy
 80022b0:	623b      	str	r3, [r7, #32]
}
 80022b2:	bf00      	nop
 80022b4:	e7fe      	b.n	80022b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80022b6:	4b1a      	ldr	r3, [pc, #104]	; (8002320 <xTimerGenericCommand+0x98>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d02a      	beq.n	8002314 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	2b05      	cmp	r3, #5
 80022ce:	dc18      	bgt.n	8002302 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80022d0:	f7ff feb2 	bl	8002038 <xTaskGetSchedulerState>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d109      	bne.n	80022ee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80022da:	4b11      	ldr	r3, [pc, #68]	; (8002320 <xTimerGenericCommand+0x98>)
 80022dc:	6818      	ldr	r0, [r3, #0]
 80022de:	f107 0110 	add.w	r1, r7, #16
 80022e2:	2300      	movs	r3, #0
 80022e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022e6:	f7fe fca1 	bl	8000c2c <xQueueGenericSend>
 80022ea:	6278      	str	r0, [r7, #36]	; 0x24
 80022ec:	e012      	b.n	8002314 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80022ee:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <xTimerGenericCommand+0x98>)
 80022f0:	6818      	ldr	r0, [r3, #0]
 80022f2:	f107 0110 	add.w	r1, r7, #16
 80022f6:	2300      	movs	r3, #0
 80022f8:	2200      	movs	r2, #0
 80022fa:	f7fe fc97 	bl	8000c2c <xQueueGenericSend>
 80022fe:	6278      	str	r0, [r7, #36]	; 0x24
 8002300:	e008      	b.n	8002314 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002302:	4b07      	ldr	r3, [pc, #28]	; (8002320 <xTimerGenericCommand+0x98>)
 8002304:	6818      	ldr	r0, [r3, #0]
 8002306:	f107 0110 	add.w	r1, r7, #16
 800230a:	2300      	movs	r3, #0
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	f7fe fd8b 	bl	8000e28 <xQueueGenericSendFromISR>
 8002312:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002316:	4618      	mov	r0, r3
 8002318:	3728      	adds	r7, #40	; 0x28
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000cb4 	.word	0x20000cb4

08002324 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b088      	sub	sp, #32
 8002328:	af02      	add	r7, sp, #8
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800232e:	4b22      	ldr	r3, [pc, #136]	; (80023b8 <prvProcessExpiredTimer+0x94>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	3304      	adds	r3, #4
 800233c:	4618      	mov	r0, r3
 800233e:	f7fe fb47 	bl	80009d0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	2b00      	cmp	r3, #0
 800234e:	d022      	beq.n	8002396 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	699a      	ldr	r2, [r3, #24]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	18d1      	adds	r1, r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	6978      	ldr	r0, [r7, #20]
 800235e:	f000 f8d1 	bl	8002504 <prvInsertTimerInActiveList>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d01f      	beq.n	80023a8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002368:	2300      	movs	r3, #0
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	2300      	movs	r3, #0
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	2100      	movs	r1, #0
 8002372:	6978      	ldr	r0, [r7, #20]
 8002374:	f7ff ff88 	bl	8002288 <xTimerGenericCommand>
 8002378:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d113      	bne.n	80023a8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8002380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002384:	f383 8811 	msr	BASEPRI, r3
 8002388:	f3bf 8f6f 	isb	sy
 800238c:	f3bf 8f4f 	dsb	sy
 8002390:	60fb      	str	r3, [r7, #12]
}
 8002392:	bf00      	nop
 8002394:	e7fe      	b.n	8002394 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800239c:	f023 0301 	bic.w	r3, r3, #1
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	6978      	ldr	r0, [r7, #20]
 80023ae:	4798      	blx	r3
}
 80023b0:	bf00      	nop
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	20000cac 	.word	0x20000cac

080023bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80023c4:	f107 0308 	add.w	r3, r7, #8
 80023c8:	4618      	mov	r0, r3
 80023ca:	f000 f857 	bl	800247c <prvGetNextExpireTime>
 80023ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	4619      	mov	r1, r3
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f000 f803 	bl	80023e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80023da:	f000 f8d5 	bl	8002588 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80023de:	e7f1      	b.n	80023c4 <prvTimerTask+0x8>

080023e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80023ea:	f7ff fa43 	bl	8001874 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80023ee:	f107 0308 	add.w	r3, r7, #8
 80023f2:	4618      	mov	r0, r3
 80023f4:	f000 f866 	bl	80024c4 <prvSampleTimeNow>
 80023f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d130      	bne.n	8002462 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10a      	bne.n	800241c <prvProcessTimerOrBlockTask+0x3c>
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	429a      	cmp	r2, r3
 800240c:	d806      	bhi.n	800241c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800240e:	f7ff fa3f 	bl	8001890 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002412:	68f9      	ldr	r1, [r7, #12]
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f7ff ff85 	bl	8002324 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800241a:	e024      	b.n	8002466 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d008      	beq.n	8002434 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002422:	4b13      	ldr	r3, [pc, #76]	; (8002470 <prvProcessTimerOrBlockTask+0x90>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <prvProcessTimerOrBlockTask+0x50>
 800242c:	2301      	movs	r3, #1
 800242e:	e000      	b.n	8002432 <prvProcessTimerOrBlockTask+0x52>
 8002430:	2300      	movs	r3, #0
 8002432:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002434:	4b0f      	ldr	r3, [pc, #60]	; (8002474 <prvProcessTimerOrBlockTask+0x94>)
 8002436:	6818      	ldr	r0, [r3, #0]
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	4619      	mov	r1, r3
 8002442:	f7fe ffa7 	bl	8001394 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8002446:	f7ff fa23 	bl	8001890 <xTaskResumeAll>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10a      	bne.n	8002466 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8002450:	4b09      	ldr	r3, [pc, #36]	; (8002478 <prvProcessTimerOrBlockTask+0x98>)
 8002452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	f3bf 8f4f 	dsb	sy
 800245c:	f3bf 8f6f 	isb	sy
}
 8002460:	e001      	b.n	8002466 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8002462:	f7ff fa15 	bl	8001890 <xTaskResumeAll>
}
 8002466:	bf00      	nop
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20000cb0 	.word	0x20000cb0
 8002474:	20000cb4 	.word	0x20000cb4
 8002478:	e000ed04 	.word	0xe000ed04

0800247c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002484:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <prvGetNextExpireTime+0x44>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <prvGetNextExpireTime+0x16>
 800248e:	2201      	movs	r2, #1
 8002490:	e000      	b.n	8002494 <prvGetNextExpireTime+0x18>
 8002492:	2200      	movs	r2, #0
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d105      	bne.n	80024ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80024a0:	4b07      	ldr	r3, [pc, #28]	; (80024c0 <prvGetNextExpireTime+0x44>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	e001      	b.n	80024b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80024b0:	68fb      	ldr	r3, [r7, #12]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	20000cac 	.word	0x20000cac

080024c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80024cc:	f7ff fa7e 	bl	80019cc <xTaskGetTickCount>
 80024d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80024d2:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <prvSampleTimeNow+0x3c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d205      	bcs.n	80024e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80024dc:	f000 f936 	bl	800274c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	e002      	b.n	80024ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80024ee:	4a04      	ldr	r2, [pc, #16]	; (8002500 <prvSampleTimeNow+0x3c>)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80024f4:	68fb      	ldr	r3, [r7, #12]
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000cbc 	.word	0x20000cbc

08002504 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
 8002510:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	429a      	cmp	r2, r3
 8002528:	d812      	bhi.n	8002550 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	1ad2      	subs	r2, r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	429a      	cmp	r2, r3
 8002536:	d302      	bcc.n	800253e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002538:	2301      	movs	r3, #1
 800253a:	617b      	str	r3, [r7, #20]
 800253c:	e01b      	b.n	8002576 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800253e:	4b10      	ldr	r3, [pc, #64]	; (8002580 <prvInsertTimerInActiveList+0x7c>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	3304      	adds	r3, #4
 8002546:	4619      	mov	r1, r3
 8002548:	4610      	mov	r0, r2
 800254a:	f7fe fa08 	bl	800095e <vListInsert>
 800254e:	e012      	b.n	8002576 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	429a      	cmp	r2, r3
 8002556:	d206      	bcs.n	8002566 <prvInsertTimerInActiveList+0x62>
 8002558:	68ba      	ldr	r2, [r7, #8]
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	429a      	cmp	r2, r3
 800255e:	d302      	bcc.n	8002566 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002560:	2301      	movs	r3, #1
 8002562:	617b      	str	r3, [r7, #20]
 8002564:	e007      	b.n	8002576 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002566:	4b07      	ldr	r3, [pc, #28]	; (8002584 <prvInsertTimerInActiveList+0x80>)
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	3304      	adds	r3, #4
 800256e:	4619      	mov	r1, r3
 8002570:	4610      	mov	r0, r2
 8002572:	f7fe f9f4 	bl	800095e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8002576:	697b      	ldr	r3, [r7, #20]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3718      	adds	r7, #24
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	20000cb0 	.word	0x20000cb0
 8002584:	20000cac 	.word	0x20000cac

08002588 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b08e      	sub	sp, #56	; 0x38
 800258c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800258e:	e0ca      	b.n	8002726 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	da18      	bge.n	80025c8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8002596:	1d3b      	adds	r3, r7, #4
 8002598:	3304      	adds	r3, #4
 800259a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800259c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10a      	bne.n	80025b8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80025a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a6:	f383 8811 	msr	BASEPRI, r3
 80025aa:	f3bf 8f6f 	isb	sy
 80025ae:	f3bf 8f4f 	dsb	sy
 80025b2:	61fb      	str	r3, [r7, #28]
}
 80025b4:	bf00      	nop
 80025b6:	e7fe      	b.n	80025b6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80025b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025be:	6850      	ldr	r0, [r2, #4]
 80025c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025c2:	6892      	ldr	r2, [r2, #8]
 80025c4:	4611      	mov	r1, r2
 80025c6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f2c0 80aa 	blt.w	8002724 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80025d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d6:	695b      	ldr	r3, [r3, #20]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d004      	beq.n	80025e6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80025dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025de:	3304      	adds	r3, #4
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fe f9f5 	bl	80009d0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80025e6:	463b      	mov	r3, r7
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff ff6b 	bl	80024c4 <prvSampleTimeNow>
 80025ee:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b09      	cmp	r3, #9
 80025f4:	f200 8097 	bhi.w	8002726 <prvProcessReceivedCommands+0x19e>
 80025f8:	a201      	add	r2, pc, #4	; (adr r2, 8002600 <prvProcessReceivedCommands+0x78>)
 80025fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025fe:	bf00      	nop
 8002600:	08002629 	.word	0x08002629
 8002604:	08002629 	.word	0x08002629
 8002608:	08002629 	.word	0x08002629
 800260c:	0800269d 	.word	0x0800269d
 8002610:	080026b1 	.word	0x080026b1
 8002614:	080026fb 	.word	0x080026fb
 8002618:	08002629 	.word	0x08002629
 800261c:	08002629 	.word	0x08002629
 8002620:	0800269d 	.word	0x0800269d
 8002624:	080026b1 	.word	0x080026b1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800262e:	f043 0301 	orr.w	r3, r3, #1
 8002632:	b2da      	uxtb	r2, r3
 8002634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002636:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	18d1      	adds	r1, r2, r3
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002646:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002648:	f7ff ff5c 	bl	8002504 <prvInsertTimerInActiveList>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d069      	beq.n	8002726 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002658:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800265a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b00      	cmp	r3, #0
 8002666:	d05e      	beq.n	8002726 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002668:	68ba      	ldr	r2, [r7, #8]
 800266a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	441a      	add	r2, r3
 8002670:	2300      	movs	r3, #0
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	2300      	movs	r3, #0
 8002676:	2100      	movs	r1, #0
 8002678:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800267a:	f7ff fe05 	bl	8002288 <xTimerGenericCommand>
 800267e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8002680:	6a3b      	ldr	r3, [r7, #32]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d14f      	bne.n	8002726 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8002686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800268a:	f383 8811 	msr	BASEPRI, r3
 800268e:	f3bf 8f6f 	isb	sy
 8002692:	f3bf 8f4f 	dsb	sy
 8002696:	61bb      	str	r3, [r7, #24]
}
 8002698:	bf00      	nop
 800269a:	e7fe      	b.n	800269a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800269c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80026a2:	f023 0301 	bic.w	r3, r3, #1
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80026ae:	e03a      	b.n	8002726 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80026b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80026c2:	68ba      	ldr	r2, [r7, #8]
 80026c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80026c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d10a      	bne.n	80026e6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80026d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d4:	f383 8811 	msr	BASEPRI, r3
 80026d8:	f3bf 8f6f 	isb	sy
 80026dc:	f3bf 8f4f 	dsb	sy
 80026e0:	617b      	str	r3, [r7, #20]
}
 80026e2:	bf00      	nop
 80026e4:	e7fe      	b.n	80026e4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80026e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e8:	699a      	ldr	r2, [r3, #24]
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	18d1      	adds	r1, r2, r3
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026f4:	f7ff ff06 	bl	8002504 <prvInsertTimerInActiveList>
					break;
 80026f8:	e015      	b.n	8002726 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80026fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d103      	bne.n	8002710 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8002708:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800270a:	f000 fbbf 	bl	8002e8c <vPortFree>
 800270e:	e00a      	b.n	8002726 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002712:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002716:	f023 0301 	bic.w	r3, r3, #1
 800271a:	b2da      	uxtb	r2, r3
 800271c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8002722:	e000      	b.n	8002726 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8002724:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002726:	4b08      	ldr	r3, [pc, #32]	; (8002748 <prvProcessReceivedCommands+0x1c0>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	1d39      	adds	r1, r7, #4
 800272c:	2200      	movs	r2, #0
 800272e:	4618      	mov	r0, r3
 8002730:	f7fe fc16 	bl	8000f60 <xQueueReceive>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	f47f af2a 	bne.w	8002590 <prvProcessReceivedCommands+0x8>
	}
}
 800273c:	bf00      	nop
 800273e:	bf00      	nop
 8002740:	3730      	adds	r7, #48	; 0x30
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	20000cb4 	.word	0x20000cb4

0800274c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002752:	e048      	b.n	80027e6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002754:	4b2d      	ldr	r3, [pc, #180]	; (800280c <prvSwitchTimerLists+0xc0>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800275e:	4b2b      	ldr	r3, [pc, #172]	; (800280c <prvSwitchTimerLists+0xc0>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	3304      	adds	r3, #4
 800276c:	4618      	mov	r0, r3
 800276e:	f7fe f92f 	bl	80009d0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b00      	cmp	r3, #0
 8002786:	d02e      	beq.n	80027e6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	4413      	add	r3, r2
 8002790:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	429a      	cmp	r2, r3
 8002798:	d90e      	bls.n	80027b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	68ba      	ldr	r2, [r7, #8]
 800279e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80027a6:	4b19      	ldr	r3, [pc, #100]	; (800280c <prvSwitchTimerLists+0xc0>)
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	3304      	adds	r3, #4
 80027ae:	4619      	mov	r1, r3
 80027b0:	4610      	mov	r0, r2
 80027b2:	f7fe f8d4 	bl	800095e <vListInsert>
 80027b6:	e016      	b.n	80027e6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80027b8:	2300      	movs	r3, #0
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	2300      	movs	r3, #0
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	2100      	movs	r1, #0
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f7ff fd60 	bl	8002288 <xTimerGenericCommand>
 80027c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10a      	bne.n	80027e6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80027d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d4:	f383 8811 	msr	BASEPRI, r3
 80027d8:	f3bf 8f6f 	isb	sy
 80027dc:	f3bf 8f4f 	dsb	sy
 80027e0:	603b      	str	r3, [r7, #0]
}
 80027e2:	bf00      	nop
 80027e4:	e7fe      	b.n	80027e4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80027e6:	4b09      	ldr	r3, [pc, #36]	; (800280c <prvSwitchTimerLists+0xc0>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1b1      	bne.n	8002754 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80027f0:	4b06      	ldr	r3, [pc, #24]	; (800280c <prvSwitchTimerLists+0xc0>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80027f6:	4b06      	ldr	r3, [pc, #24]	; (8002810 <prvSwitchTimerLists+0xc4>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a04      	ldr	r2, [pc, #16]	; (800280c <prvSwitchTimerLists+0xc0>)
 80027fc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80027fe:	4a04      	ldr	r2, [pc, #16]	; (8002810 <prvSwitchTimerLists+0xc4>)
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	6013      	str	r3, [r2, #0]
}
 8002804:	bf00      	nop
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	20000cac 	.word	0x20000cac
 8002810:	20000cb0 	.word	0x20000cb0

08002814 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800281a:	f000 f96b 	bl	8002af4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800281e:	4b15      	ldr	r3, [pc, #84]	; (8002874 <prvCheckForValidListAndQueue+0x60>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d120      	bne.n	8002868 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8002826:	4814      	ldr	r0, [pc, #80]	; (8002878 <prvCheckForValidListAndQueue+0x64>)
 8002828:	f7fe f848 	bl	80008bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800282c:	4813      	ldr	r0, [pc, #76]	; (800287c <prvCheckForValidListAndQueue+0x68>)
 800282e:	f7fe f845 	bl	80008bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002832:	4b13      	ldr	r3, [pc, #76]	; (8002880 <prvCheckForValidListAndQueue+0x6c>)
 8002834:	4a10      	ldr	r2, [pc, #64]	; (8002878 <prvCheckForValidListAndQueue+0x64>)
 8002836:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002838:	4b12      	ldr	r3, [pc, #72]	; (8002884 <prvCheckForValidListAndQueue+0x70>)
 800283a:	4a10      	ldr	r2, [pc, #64]	; (800287c <prvCheckForValidListAndQueue+0x68>)
 800283c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800283e:	2300      	movs	r3, #0
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	4b11      	ldr	r3, [pc, #68]	; (8002888 <prvCheckForValidListAndQueue+0x74>)
 8002844:	4a11      	ldr	r2, [pc, #68]	; (800288c <prvCheckForValidListAndQueue+0x78>)
 8002846:	2110      	movs	r1, #16
 8002848:	200a      	movs	r0, #10
 800284a:	f7fe f953 	bl	8000af4 <xQueueGenericCreateStatic>
 800284e:	4603      	mov	r3, r0
 8002850:	4a08      	ldr	r2, [pc, #32]	; (8002874 <prvCheckForValidListAndQueue+0x60>)
 8002852:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002854:	4b07      	ldr	r3, [pc, #28]	; (8002874 <prvCheckForValidListAndQueue+0x60>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d005      	beq.n	8002868 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800285c:	4b05      	ldr	r3, [pc, #20]	; (8002874 <prvCheckForValidListAndQueue+0x60>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	490b      	ldr	r1, [pc, #44]	; (8002890 <prvCheckForValidListAndQueue+0x7c>)
 8002862:	4618      	mov	r0, r3
 8002864:	f7fe fd6c 	bl	8001340 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002868:	f000 f974 	bl	8002b54 <vPortExitCritical>
}
 800286c:	bf00      	nop
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	20000cb4 	.word	0x20000cb4
 8002878:	20000c84 	.word	0x20000c84
 800287c:	20000c98 	.word	0x20000c98
 8002880:	20000cac 	.word	0x20000cac
 8002884:	20000cb0 	.word	0x20000cb0
 8002888:	20000d60 	.word	0x20000d60
 800288c:	20000cc0 	.word	0x20000cc0
 8002890:	08003fec 	.word	0x08003fec

08002894 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	3b04      	subs	r3, #4
 80028a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	3b04      	subs	r3, #4
 80028b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	f023 0201 	bic.w	r2, r3, #1
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	3b04      	subs	r3, #4
 80028c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80028c4:	4a0c      	ldr	r2, [pc, #48]	; (80028f8 <pxPortInitialiseStack+0x64>)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	3b14      	subs	r3, #20
 80028ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	3b04      	subs	r3, #4
 80028da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f06f 0202 	mvn.w	r2, #2
 80028e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	3b20      	subs	r3, #32
 80028e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80028ea:	68fb      	ldr	r3, [r7, #12]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	080028fd 	.word	0x080028fd

080028fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002902:	2300      	movs	r3, #0
 8002904:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002906:	4b12      	ldr	r3, [pc, #72]	; (8002950 <prvTaskExitError+0x54>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290e:	d00a      	beq.n	8002926 <prvTaskExitError+0x2a>
	__asm volatile
 8002910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002914:	f383 8811 	msr	BASEPRI, r3
 8002918:	f3bf 8f6f 	isb	sy
 800291c:	f3bf 8f4f 	dsb	sy
 8002920:	60fb      	str	r3, [r7, #12]
}
 8002922:	bf00      	nop
 8002924:	e7fe      	b.n	8002924 <prvTaskExitError+0x28>
	__asm volatile
 8002926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800292a:	f383 8811 	msr	BASEPRI, r3
 800292e:	f3bf 8f6f 	isb	sy
 8002932:	f3bf 8f4f 	dsb	sy
 8002936:	60bb      	str	r3, [r7, #8]
}
 8002938:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800293a:	bf00      	nop
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d0fc      	beq.n	800293c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002942:	bf00      	nop
 8002944:	bf00      	nop
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	20000000 	.word	0x20000000
	...

08002960 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002960:	4b07      	ldr	r3, [pc, #28]	; (8002980 <pxCurrentTCBConst2>)
 8002962:	6819      	ldr	r1, [r3, #0]
 8002964:	6808      	ldr	r0, [r1, #0]
 8002966:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800296a:	f380 8809 	msr	PSP, r0
 800296e:	f3bf 8f6f 	isb	sy
 8002972:	f04f 0000 	mov.w	r0, #0
 8002976:	f380 8811 	msr	BASEPRI, r0
 800297a:	4770      	bx	lr
 800297c:	f3af 8000 	nop.w

08002980 <pxCurrentTCBConst2>:
 8002980:	20000784 	.word	0x20000784
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002984:	bf00      	nop
 8002986:	bf00      	nop

08002988 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002988:	4808      	ldr	r0, [pc, #32]	; (80029ac <prvPortStartFirstTask+0x24>)
 800298a:	6800      	ldr	r0, [r0, #0]
 800298c:	6800      	ldr	r0, [r0, #0]
 800298e:	f380 8808 	msr	MSP, r0
 8002992:	f04f 0000 	mov.w	r0, #0
 8002996:	f380 8814 	msr	CONTROL, r0
 800299a:	b662      	cpsie	i
 800299c:	b661      	cpsie	f
 800299e:	f3bf 8f4f 	dsb	sy
 80029a2:	f3bf 8f6f 	isb	sy
 80029a6:	df00      	svc	0
 80029a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80029aa:	bf00      	nop
 80029ac:	e000ed08 	.word	0xe000ed08

080029b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80029b6:	4b46      	ldr	r3, [pc, #280]	; (8002ad0 <xPortStartScheduler+0x120>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a46      	ldr	r2, [pc, #280]	; (8002ad4 <xPortStartScheduler+0x124>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d10a      	bne.n	80029d6 <xPortStartScheduler+0x26>
	__asm volatile
 80029c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c4:	f383 8811 	msr	BASEPRI, r3
 80029c8:	f3bf 8f6f 	isb	sy
 80029cc:	f3bf 8f4f 	dsb	sy
 80029d0:	613b      	str	r3, [r7, #16]
}
 80029d2:	bf00      	nop
 80029d4:	e7fe      	b.n	80029d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80029d6:	4b3e      	ldr	r3, [pc, #248]	; (8002ad0 <xPortStartScheduler+0x120>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a3f      	ldr	r2, [pc, #252]	; (8002ad8 <xPortStartScheduler+0x128>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d10a      	bne.n	80029f6 <xPortStartScheduler+0x46>
	__asm volatile
 80029e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e4:	f383 8811 	msr	BASEPRI, r3
 80029e8:	f3bf 8f6f 	isb	sy
 80029ec:	f3bf 8f4f 	dsb	sy
 80029f0:	60fb      	str	r3, [r7, #12]
}
 80029f2:	bf00      	nop
 80029f4:	e7fe      	b.n	80029f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80029f6:	4b39      	ldr	r3, [pc, #228]	; (8002adc <xPortStartScheduler+0x12c>)
 80029f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	22ff      	movs	r2, #255	; 0xff
 8002a06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002a10:	78fb      	ldrb	r3, [r7, #3]
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a18:	b2da      	uxtb	r2, r3
 8002a1a:	4b31      	ldr	r3, [pc, #196]	; (8002ae0 <xPortStartScheduler+0x130>)
 8002a1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002a1e:	4b31      	ldr	r3, [pc, #196]	; (8002ae4 <xPortStartScheduler+0x134>)
 8002a20:	2207      	movs	r2, #7
 8002a22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a24:	e009      	b.n	8002a3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8002a26:	4b2f      	ldr	r3, [pc, #188]	; (8002ae4 <xPortStartScheduler+0x134>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	4a2d      	ldr	r2, [pc, #180]	; (8002ae4 <xPortStartScheduler+0x134>)
 8002a2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002a30:	78fb      	ldrb	r3, [r7, #3]
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a3a:	78fb      	ldrb	r3, [r7, #3]
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a42:	2b80      	cmp	r3, #128	; 0x80
 8002a44:	d0ef      	beq.n	8002a26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002a46:	4b27      	ldr	r3, [pc, #156]	; (8002ae4 <xPortStartScheduler+0x134>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f1c3 0307 	rsb	r3, r3, #7
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	d00a      	beq.n	8002a68 <xPortStartScheduler+0xb8>
	__asm volatile
 8002a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a56:	f383 8811 	msr	BASEPRI, r3
 8002a5a:	f3bf 8f6f 	isb	sy
 8002a5e:	f3bf 8f4f 	dsb	sy
 8002a62:	60bb      	str	r3, [r7, #8]
}
 8002a64:	bf00      	nop
 8002a66:	e7fe      	b.n	8002a66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002a68:	4b1e      	ldr	r3, [pc, #120]	; (8002ae4 <xPortStartScheduler+0x134>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	021b      	lsls	r3, r3, #8
 8002a6e:	4a1d      	ldr	r2, [pc, #116]	; (8002ae4 <xPortStartScheduler+0x134>)
 8002a70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002a72:	4b1c      	ldr	r3, [pc, #112]	; (8002ae4 <xPortStartScheduler+0x134>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a7a:	4a1a      	ldr	r2, [pc, #104]	; (8002ae4 <xPortStartScheduler+0x134>)
 8002a7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002a86:	4b18      	ldr	r3, [pc, #96]	; (8002ae8 <xPortStartScheduler+0x138>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a17      	ldr	r2, [pc, #92]	; (8002ae8 <xPortStartScheduler+0x138>)
 8002a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002a92:	4b15      	ldr	r3, [pc, #84]	; (8002ae8 <xPortStartScheduler+0x138>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a14      	ldr	r2, [pc, #80]	; (8002ae8 <xPortStartScheduler+0x138>)
 8002a98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002a9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002a9e:	f000 f8bb 	bl	8002c18 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002aa2:	4b12      	ldr	r3, [pc, #72]	; (8002aec <xPortStartScheduler+0x13c>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002aa8:	f000 f8da 	bl	8002c60 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002aac:	4b10      	ldr	r3, [pc, #64]	; (8002af0 <xPortStartScheduler+0x140>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a0f      	ldr	r2, [pc, #60]	; (8002af0 <xPortStartScheduler+0x140>)
 8002ab2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002ab6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002ab8:	f7ff ff66 	bl	8002988 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002abc:	f7ff f850 	bl	8001b60 <vTaskSwitchContext>
	prvTaskExitError();
 8002ac0:	f7ff ff1c 	bl	80028fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3718      	adds	r7, #24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	e000ed00 	.word	0xe000ed00
 8002ad4:	410fc271 	.word	0x410fc271
 8002ad8:	410fc270 	.word	0x410fc270
 8002adc:	e000e400 	.word	0xe000e400
 8002ae0:	20000db0 	.word	0x20000db0
 8002ae4:	20000db4 	.word	0x20000db4
 8002ae8:	e000ed20 	.word	0xe000ed20
 8002aec:	20000000 	.word	0x20000000
 8002af0:	e000ef34 	.word	0xe000ef34

08002af4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
	__asm volatile
 8002afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002afe:	f383 8811 	msr	BASEPRI, r3
 8002b02:	f3bf 8f6f 	isb	sy
 8002b06:	f3bf 8f4f 	dsb	sy
 8002b0a:	607b      	str	r3, [r7, #4]
}
 8002b0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002b0e:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <vPortEnterCritical+0x58>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	3301      	adds	r3, #1
 8002b14:	4a0d      	ldr	r2, [pc, #52]	; (8002b4c <vPortEnterCritical+0x58>)
 8002b16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002b18:	4b0c      	ldr	r3, [pc, #48]	; (8002b4c <vPortEnterCritical+0x58>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d10f      	bne.n	8002b40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002b20:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <vPortEnterCritical+0x5c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00a      	beq.n	8002b40 <vPortEnterCritical+0x4c>
	__asm volatile
 8002b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b2e:	f383 8811 	msr	BASEPRI, r3
 8002b32:	f3bf 8f6f 	isb	sy
 8002b36:	f3bf 8f4f 	dsb	sy
 8002b3a:	603b      	str	r3, [r7, #0]
}
 8002b3c:	bf00      	nop
 8002b3e:	e7fe      	b.n	8002b3e <vPortEnterCritical+0x4a>
	}
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	20000000 	.word	0x20000000
 8002b50:	e000ed04 	.word	0xe000ed04

08002b54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002b5a:	4b12      	ldr	r3, [pc, #72]	; (8002ba4 <vPortExitCritical+0x50>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10a      	bne.n	8002b78 <vPortExitCritical+0x24>
	__asm volatile
 8002b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b66:	f383 8811 	msr	BASEPRI, r3
 8002b6a:	f3bf 8f6f 	isb	sy
 8002b6e:	f3bf 8f4f 	dsb	sy
 8002b72:	607b      	str	r3, [r7, #4]
}
 8002b74:	bf00      	nop
 8002b76:	e7fe      	b.n	8002b76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002b78:	4b0a      	ldr	r3, [pc, #40]	; (8002ba4 <vPortExitCritical+0x50>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	4a09      	ldr	r2, [pc, #36]	; (8002ba4 <vPortExitCritical+0x50>)
 8002b80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002b82:	4b08      	ldr	r3, [pc, #32]	; (8002ba4 <vPortExitCritical+0x50>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d105      	bne.n	8002b96 <vPortExitCritical+0x42>
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	f383 8811 	msr	BASEPRI, r3
}
 8002b94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	20000000 	.word	0x20000000
	...

08002bb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002bb0:	f3ef 8009 	mrs	r0, PSP
 8002bb4:	f3bf 8f6f 	isb	sy
 8002bb8:	4b15      	ldr	r3, [pc, #84]	; (8002c10 <pxCurrentTCBConst>)
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	f01e 0f10 	tst.w	lr, #16
 8002bc0:	bf08      	it	eq
 8002bc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002bc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bca:	6010      	str	r0, [r2, #0]
 8002bcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002bd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002bd4:	f380 8811 	msr	BASEPRI, r0
 8002bd8:	f3bf 8f4f 	dsb	sy
 8002bdc:	f3bf 8f6f 	isb	sy
 8002be0:	f7fe ffbe 	bl	8001b60 <vTaskSwitchContext>
 8002be4:	f04f 0000 	mov.w	r0, #0
 8002be8:	f380 8811 	msr	BASEPRI, r0
 8002bec:	bc09      	pop	{r0, r3}
 8002bee:	6819      	ldr	r1, [r3, #0]
 8002bf0:	6808      	ldr	r0, [r1, #0]
 8002bf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bf6:	f01e 0f10 	tst.w	lr, #16
 8002bfa:	bf08      	it	eq
 8002bfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002c00:	f380 8809 	msr	PSP, r0
 8002c04:	f3bf 8f6f 	isb	sy
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	f3af 8000 	nop.w

08002c10 <pxCurrentTCBConst>:
 8002c10:	20000784 	.word	0x20000784
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002c14:	bf00      	nop
 8002c16:	bf00      	nop

08002c18 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002c1c:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <vPortSetupTimerInterrupt+0x34>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002c22:	4b0b      	ldr	r3, [pc, #44]	; (8002c50 <vPortSetupTimerInterrupt+0x38>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002c28:	4b0a      	ldr	r3, [pc, #40]	; (8002c54 <vPortSetupTimerInterrupt+0x3c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a0a      	ldr	r2, [pc, #40]	; (8002c58 <vPortSetupTimerInterrupt+0x40>)
 8002c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c32:	099b      	lsrs	r3, r3, #6
 8002c34:	4a09      	ldr	r2, [pc, #36]	; (8002c5c <vPortSetupTimerInterrupt+0x44>)
 8002c36:	3b01      	subs	r3, #1
 8002c38:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002c3a:	4b04      	ldr	r3, [pc, #16]	; (8002c4c <vPortSetupTimerInterrupt+0x34>)
 8002c3c:	2207      	movs	r2, #7
 8002c3e:	601a      	str	r2, [r3, #0]
}
 8002c40:	bf00      	nop
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	e000e010 	.word	0xe000e010
 8002c50:	e000e018 	.word	0xe000e018
 8002c54:	20000004 	.word	0x20000004
 8002c58:	10624dd3 	.word	0x10624dd3
 8002c5c:	e000e014 	.word	0xe000e014

08002c60 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002c60:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002c70 <vPortEnableVFP+0x10>
 8002c64:	6801      	ldr	r1, [r0, #0]
 8002c66:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002c6a:	6001      	str	r1, [r0, #0]
 8002c6c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002c6e:	bf00      	nop
 8002c70:	e000ed88 	.word	0xe000ed88

08002c74 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8002c7a:	f3ef 8305 	mrs	r3, IPSR
 8002c7e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2b0f      	cmp	r3, #15
 8002c84:	d914      	bls.n	8002cb0 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002c86:	4a17      	ldr	r2, [pc, #92]	; (8002ce4 <vPortValidateInterruptPriority+0x70>)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002c90:	4b15      	ldr	r3, [pc, #84]	; (8002ce8 <vPortValidateInterruptPriority+0x74>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	7afa      	ldrb	r2, [r7, #11]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d20a      	bcs.n	8002cb0 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8002c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c9e:	f383 8811 	msr	BASEPRI, r3
 8002ca2:	f3bf 8f6f 	isb	sy
 8002ca6:	f3bf 8f4f 	dsb	sy
 8002caa:	607b      	str	r3, [r7, #4]
}
 8002cac:	bf00      	nop
 8002cae:	e7fe      	b.n	8002cae <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002cb0:	4b0e      	ldr	r3, [pc, #56]	; (8002cec <vPortValidateInterruptPriority+0x78>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002cb8:	4b0d      	ldr	r3, [pc, #52]	; (8002cf0 <vPortValidateInterruptPriority+0x7c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d90a      	bls.n	8002cd6 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8002cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc4:	f383 8811 	msr	BASEPRI, r3
 8002cc8:	f3bf 8f6f 	isb	sy
 8002ccc:	f3bf 8f4f 	dsb	sy
 8002cd0:	603b      	str	r3, [r7, #0]
}
 8002cd2:	bf00      	nop
 8002cd4:	e7fe      	b.n	8002cd4 <vPortValidateInterruptPriority+0x60>
	}
 8002cd6:	bf00      	nop
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	e000e3f0 	.word	0xe000e3f0
 8002ce8:	20000db0 	.word	0x20000db0
 8002cec:	e000ed0c 	.word	0xe000ed0c
 8002cf0:	20000db4 	.word	0x20000db4

08002cf4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b08a      	sub	sp, #40	; 0x28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002d00:	f7fe fdb8 	bl	8001874 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002d04:	4b5b      	ldr	r3, [pc, #364]	; (8002e74 <pvPortMalloc+0x180>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002d0c:	f000 f920 	bl	8002f50 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002d10:	4b59      	ldr	r3, [pc, #356]	; (8002e78 <pvPortMalloc+0x184>)
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4013      	ands	r3, r2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f040 8093 	bne.w	8002e44 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d01d      	beq.n	8002d60 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002d24:	2208      	movs	r2, #8
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4413      	add	r3, r2
 8002d2a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d014      	beq.n	8002d60 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f023 0307 	bic.w	r3, r3, #7
 8002d3c:	3308      	adds	r3, #8
 8002d3e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00a      	beq.n	8002d60 <pvPortMalloc+0x6c>
	__asm volatile
 8002d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4e:	f383 8811 	msr	BASEPRI, r3
 8002d52:	f3bf 8f6f 	isb	sy
 8002d56:	f3bf 8f4f 	dsb	sy
 8002d5a:	617b      	str	r3, [r7, #20]
}
 8002d5c:	bf00      	nop
 8002d5e:	e7fe      	b.n	8002d5e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d06e      	beq.n	8002e44 <pvPortMalloc+0x150>
 8002d66:	4b45      	ldr	r3, [pc, #276]	; (8002e7c <pvPortMalloc+0x188>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d869      	bhi.n	8002e44 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002d70:	4b43      	ldr	r3, [pc, #268]	; (8002e80 <pvPortMalloc+0x18c>)
 8002d72:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002d74:	4b42      	ldr	r3, [pc, #264]	; (8002e80 <pvPortMalloc+0x18c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002d7a:	e004      	b.n	8002d86 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d903      	bls.n	8002d98 <pvPortMalloc+0xa4>
 8002d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1f1      	bne.n	8002d7c <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002d98:	4b36      	ldr	r3, [pc, #216]	; (8002e74 <pvPortMalloc+0x180>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d050      	beq.n	8002e44 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2208      	movs	r2, #8
 8002da8:	4413      	add	r3, r2
 8002daa:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	6a3b      	ldr	r3, [r7, #32]
 8002db2:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	1ad2      	subs	r2, r2, r3
 8002dbc:	2308      	movs	r3, #8
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d91f      	bls.n	8002e04 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4413      	add	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00a      	beq.n	8002dec <pvPortMalloc+0xf8>
	__asm volatile
 8002dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dda:	f383 8811 	msr	BASEPRI, r3
 8002dde:	f3bf 8f6f 	isb	sy
 8002de2:	f3bf 8f4f 	dsb	sy
 8002de6:	613b      	str	r3, [r7, #16]
}
 8002de8:	bf00      	nop
 8002dea:	e7fe      	b.n	8002dea <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	1ad2      	subs	r2, r2, r3
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002dfe:	69b8      	ldr	r0, [r7, #24]
 8002e00:	f000 f908 	bl	8003014 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002e04:	4b1d      	ldr	r3, [pc, #116]	; (8002e7c <pvPortMalloc+0x188>)
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	4a1b      	ldr	r2, [pc, #108]	; (8002e7c <pvPortMalloc+0x188>)
 8002e10:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002e12:	4b1a      	ldr	r3, [pc, #104]	; (8002e7c <pvPortMalloc+0x188>)
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	4b1b      	ldr	r3, [pc, #108]	; (8002e84 <pvPortMalloc+0x190>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d203      	bcs.n	8002e26 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002e1e:	4b17      	ldr	r3, [pc, #92]	; (8002e7c <pvPortMalloc+0x188>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a18      	ldr	r2, [pc, #96]	; (8002e84 <pvPortMalloc+0x190>)
 8002e24:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	4b13      	ldr	r3, [pc, #76]	; (8002e78 <pvPortMalloc+0x184>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e32:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e36:	2200      	movs	r2, #0
 8002e38:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8002e3a:	4b13      	ldr	r3, [pc, #76]	; (8002e88 <pvPortMalloc+0x194>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	4a11      	ldr	r2, [pc, #68]	; (8002e88 <pvPortMalloc+0x194>)
 8002e42:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002e44:	f7fe fd24 	bl	8001890 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00a      	beq.n	8002e68 <pvPortMalloc+0x174>
	__asm volatile
 8002e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e56:	f383 8811 	msr	BASEPRI, r3
 8002e5a:	f3bf 8f6f 	isb	sy
 8002e5e:	f3bf 8f4f 	dsb	sy
 8002e62:	60fb      	str	r3, [r7, #12]
}
 8002e64:	bf00      	nop
 8002e66:	e7fe      	b.n	8002e66 <pvPortMalloc+0x172>
	return pvReturn;
 8002e68:	69fb      	ldr	r3, [r7, #28]
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3728      	adds	r7, #40	; 0x28
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	200049c0 	.word	0x200049c0
 8002e78:	200049d4 	.word	0x200049d4
 8002e7c:	200049c4 	.word	0x200049c4
 8002e80:	200049b8 	.word	0x200049b8
 8002e84:	200049c8 	.word	0x200049c8
 8002e88:	200049cc 	.word	0x200049cc

08002e8c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d04d      	beq.n	8002f3a <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002e9e:	2308      	movs	r3, #8
 8002ea0:	425b      	negs	r3, r3
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	4b24      	ldr	r3, [pc, #144]	; (8002f44 <vPortFree+0xb8>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10a      	bne.n	8002ed0 <vPortFree+0x44>
	__asm volatile
 8002eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ebe:	f383 8811 	msr	BASEPRI, r3
 8002ec2:	f3bf 8f6f 	isb	sy
 8002ec6:	f3bf 8f4f 	dsb	sy
 8002eca:	60fb      	str	r3, [r7, #12]
}
 8002ecc:	bf00      	nop
 8002ece:	e7fe      	b.n	8002ece <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00a      	beq.n	8002eee <vPortFree+0x62>
	__asm volatile
 8002ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002edc:	f383 8811 	msr	BASEPRI, r3
 8002ee0:	f3bf 8f6f 	isb	sy
 8002ee4:	f3bf 8f4f 	dsb	sy
 8002ee8:	60bb      	str	r3, [r7, #8]
}
 8002eea:	bf00      	nop
 8002eec:	e7fe      	b.n	8002eec <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	685a      	ldr	r2, [r3, #4]
 8002ef2:	4b14      	ldr	r3, [pc, #80]	; (8002f44 <vPortFree+0xb8>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d01e      	beq.n	8002f3a <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d11a      	bne.n	8002f3a <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	4b0e      	ldr	r3, [pc, #56]	; (8002f44 <vPortFree+0xb8>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	401a      	ands	r2, r3
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002f14:	f7fe fcae 	bl	8001874 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <vPortFree+0xbc>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4413      	add	r3, r2
 8002f22:	4a09      	ldr	r2, [pc, #36]	; (8002f48 <vPortFree+0xbc>)
 8002f24:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002f26:	6938      	ldr	r0, [r7, #16]
 8002f28:	f000 f874 	bl	8003014 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002f2c:	4b07      	ldr	r3, [pc, #28]	; (8002f4c <vPortFree+0xc0>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	3301      	adds	r3, #1
 8002f32:	4a06      	ldr	r2, [pc, #24]	; (8002f4c <vPortFree+0xc0>)
 8002f34:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8002f36:	f7fe fcab 	bl	8001890 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002f3a:	bf00      	nop
 8002f3c:	3718      	adds	r7, #24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	200049d4 	.word	0x200049d4
 8002f48:	200049c4 	.word	0x200049c4
 8002f4c:	200049d0 	.word	0x200049d0

08002f50 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002f56:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002f5a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002f5c:	4b27      	ldr	r3, [pc, #156]	; (8002ffc <prvHeapInit+0xac>)
 8002f5e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f003 0307 	and.w	r3, r3, #7
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00c      	beq.n	8002f84 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	3307      	adds	r3, #7
 8002f6e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f023 0307 	bic.w	r3, r3, #7
 8002f76:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	4a1f      	ldr	r2, [pc, #124]	; (8002ffc <prvHeapInit+0xac>)
 8002f80:	4413      	add	r3, r2
 8002f82:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002f88:	4a1d      	ldr	r2, [pc, #116]	; (8003000 <prvHeapInit+0xb0>)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002f8e:	4b1c      	ldr	r3, [pc, #112]	; (8003000 <prvHeapInit+0xb0>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	4413      	add	r3, r2
 8002f9a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002f9c:	2208      	movs	r2, #8
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	1a9b      	subs	r3, r3, r2
 8002fa2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f023 0307 	bic.w	r3, r3, #7
 8002faa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	4a15      	ldr	r2, [pc, #84]	; (8003004 <prvHeapInit+0xb4>)
 8002fb0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002fb2:	4b14      	ldr	r3, [pc, #80]	; (8003004 <prvHeapInit+0xb4>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002fba:	4b12      	ldr	r3, [pc, #72]	; (8003004 <prvHeapInit+0xb4>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	1ad2      	subs	r2, r2, r3
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002fd0:	4b0c      	ldr	r3, [pc, #48]	; (8003004 <prvHeapInit+0xb4>)
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	4a0a      	ldr	r2, [pc, #40]	; (8003008 <prvHeapInit+0xb8>)
 8002fde:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	4a09      	ldr	r2, [pc, #36]	; (800300c <prvHeapInit+0xbc>)
 8002fe6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002fe8:	4b09      	ldr	r3, [pc, #36]	; (8003010 <prvHeapInit+0xc0>)
 8002fea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002fee:	601a      	str	r2, [r3, #0]
}
 8002ff0:	bf00      	nop
 8002ff2:	3714      	adds	r7, #20
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	20000db8 	.word	0x20000db8
 8003000:	200049b8 	.word	0x200049b8
 8003004:	200049c0 	.word	0x200049c0
 8003008:	200049c8 	.word	0x200049c8
 800300c:	200049c4 	.word	0x200049c4
 8003010:	200049d4 	.word	0x200049d4

08003014 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800301c:	4b28      	ldr	r3, [pc, #160]	; (80030c0 <prvInsertBlockIntoFreeList+0xac>)
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	e002      	b.n	8003028 <prvInsertBlockIntoFreeList+0x14>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	429a      	cmp	r2, r3
 8003030:	d8f7      	bhi.n	8003022 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	4413      	add	r3, r2
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	429a      	cmp	r2, r3
 8003042:	d108      	bne.n	8003056 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	441a      	add	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	68ba      	ldr	r2, [r7, #8]
 8003060:	441a      	add	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	429a      	cmp	r2, r3
 8003068:	d118      	bne.n	800309c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	4b15      	ldr	r3, [pc, #84]	; (80030c4 <prvInsertBlockIntoFreeList+0xb0>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	d00d      	beq.n	8003092 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	441a      	add	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	e008      	b.n	80030a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003092:	4b0c      	ldr	r3, [pc, #48]	; (80030c4 <prvInsertBlockIntoFreeList+0xb0>)
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	e003      	b.n	80030a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d002      	beq.n	80030b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80030b2:	bf00      	nop
 80030b4:	3714      	adds	r7, #20
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	200049b8 	.word	0x200049b8
 80030c4:	200049c0 	.word	0x200049c0

080030c8 <GPIO_Pin_Setup>:

#include "GPIO.h"


int GPIO_Pin_Setup(GPIO_TypeDef *PORT, uint8_t pin, uint8_t function, uint8_t alternate_function)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	4608      	mov	r0, r1
 80030d2:	4611      	mov	r1, r2
 80030d4:	461a      	mov	r2, r3
 80030d6:	4603      	mov	r3, r0
 80030d8:	70fb      	strb	r3, [r7, #3]
 80030da:	460b      	mov	r3, r1
 80030dc:	70bb      	strb	r3, [r7, #2]
 80030de:	4613      	mov	r3, r2
 80030e0:	707b      	strb	r3, [r7, #1]

	if(PORT == GPIOA)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a61      	ldr	r2, [pc, #388]	; (800326c <GPIO_Pin_Setup+0x1a4>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d106      	bne.n	80030f8 <GPIO_Pin_Setup+0x30>
	{
		RCC -> AHB1ENR   |= RCC_AHB1ENR_GPIOAEN;
 80030ea:	4b61      	ldr	r3, [pc, #388]	; (8003270 <GPIO_Pin_Setup+0x1a8>)
 80030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ee:	4a60      	ldr	r2, [pc, #384]	; (8003270 <GPIO_Pin_Setup+0x1a8>)
 80030f0:	f043 0301 	orr.w	r3, r3, #1
 80030f4:	6313      	str	r3, [r2, #48]	; 0x30
 80030f6:	e039      	b.n	800316c <GPIO_Pin_Setup+0xa4>
	} else 	if(PORT == GPIOB)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a5e      	ldr	r2, [pc, #376]	; (8003274 <GPIO_Pin_Setup+0x1ac>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d106      	bne.n	800310e <GPIO_Pin_Setup+0x46>
	{
		RCC -> AHB1ENR   |= RCC_AHB1ENR_GPIOBEN;
 8003100:	4b5b      	ldr	r3, [pc, #364]	; (8003270 <GPIO_Pin_Setup+0x1a8>)
 8003102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003104:	4a5a      	ldr	r2, [pc, #360]	; (8003270 <GPIO_Pin_Setup+0x1a8>)
 8003106:	f043 0302 	orr.w	r3, r3, #2
 800310a:	6313      	str	r3, [r2, #48]	; 0x30
 800310c:	e02e      	b.n	800316c <GPIO_Pin_Setup+0xa4>
	}else 	if(PORT == GPIOC)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a59      	ldr	r2, [pc, #356]	; (8003278 <GPIO_Pin_Setup+0x1b0>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d106      	bne.n	8003124 <GPIO_Pin_Setup+0x5c>
	{
		RCC -> AHB1ENR   |= RCC_AHB1ENR_GPIOCEN;
 8003116:	4b56      	ldr	r3, [pc, #344]	; (8003270 <GPIO_Pin_Setup+0x1a8>)
 8003118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311a:	4a55      	ldr	r2, [pc, #340]	; (8003270 <GPIO_Pin_Setup+0x1a8>)
 800311c:	f043 0304 	orr.w	r3, r3, #4
 8003120:	6313      	str	r3, [r2, #48]	; 0x30
 8003122:	e023      	b.n	800316c <GPIO_Pin_Setup+0xa4>
	}else 	if(PORT == GPIOD)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a55      	ldr	r2, [pc, #340]	; (800327c <GPIO_Pin_Setup+0x1b4>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d106      	bne.n	800313a <GPIO_Pin_Setup+0x72>
	{
		RCC -> AHB1ENR   |= RCC_AHB1ENR_GPIODEN;
 800312c:	4b50      	ldr	r3, [pc, #320]	; (8003270 <GPIO_Pin_Setup+0x1a8>)
 800312e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003130:	4a4f      	ldr	r2, [pc, #316]	; (8003270 <GPIO_Pin_Setup+0x1a8>)
 8003132:	f043 0308 	orr.w	r3, r3, #8
 8003136:	6313      	str	r3, [r2, #48]	; 0x30
 8003138:	e018      	b.n	800316c <GPIO_Pin_Setup+0xa4>
	}else 	if(PORT == GPIOE)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a50      	ldr	r2, [pc, #320]	; (8003280 <GPIO_Pin_Setup+0x1b8>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d106      	bne.n	8003150 <GPIO_Pin_Setup+0x88>
	{
		RCC -> AHB1ENR   |= RCC_AHB1ENR_GPIOEEN;
 8003142:	4b4b      	ldr	r3, [pc, #300]	; (8003270 <GPIO_Pin_Setup+0x1a8>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	4a4a      	ldr	r2, [pc, #296]	; (8003270 <GPIO_Pin_Setup+0x1a8>)
 8003148:	f043 0310 	orr.w	r3, r3, #16
 800314c:	6313      	str	r3, [r2, #48]	; 0x30
 800314e:	e00d      	b.n	800316c <GPIO_Pin_Setup+0xa4>
	}else 	if(PORT == GPIOH)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a4c      	ldr	r2, [pc, #304]	; (8003284 <GPIO_Pin_Setup+0x1bc>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d106      	bne.n	8003166 <GPIO_Pin_Setup+0x9e>
	{
		RCC -> AHB1ENR   |= RCC_AHB1ENR_GPIOHEN;
 8003158:	4b45      	ldr	r3, [pc, #276]	; (8003270 <GPIO_Pin_Setup+0x1a8>)
 800315a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315c:	4a44      	ldr	r2, [pc, #272]	; (8003270 <GPIO_Pin_Setup+0x1a8>)
 800315e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003162:	6313      	str	r3, [r2, #48]	; 0x30
 8003164:	e002      	b.n	800316c <GPIO_Pin_Setup+0xa4>
	}else
	{
		return -1;
 8003166:	f04f 33ff 	mov.w	r3, #4294967295
 800316a:	e078      	b.n	800325e <GPIO_Pin_Setup+0x196>
//	PORT -> OTYPER  &= ~((0xFF) << (1 * pin));
//	PORT -> OSPEEDR &= ~((0xFF) << (2 * pin));
//	PORT -> PUPDR   &= ~((0xFF) << (2 * pin));


	PORT -> MODER	&= ~(0x3 << (2 * pin));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	78fa      	ldrb	r2, [r7, #3]
 8003172:	0052      	lsls	r2, r2, #1
 8003174:	2103      	movs	r1, #3
 8003176:	fa01 f202 	lsl.w	r2, r1, r2
 800317a:	43d2      	mvns	r2, r2
 800317c:	401a      	ands	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	601a      	str	r2, [r3, #0]
	PORT -> MODER   |= ((0xC0  & function)>>6) << (2 * pin);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	78ba      	ldrb	r2, [r7, #2]
 8003188:	0992      	lsrs	r2, r2, #6
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	4611      	mov	r1, r2
 800318e:	78fa      	ldrb	r2, [r7, #3]
 8003190:	0052      	lsls	r2, r2, #1
 8003192:	fa01 f202 	lsl.w	r2, r1, r2
 8003196:	431a      	orrs	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	601a      	str	r2, [r3, #0]

	PORT -> OTYPER	&= ~(0x1 << (1 * pin));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	78fa      	ldrb	r2, [r7, #3]
 80031a2:	2101      	movs	r1, #1
 80031a4:	fa01 f202 	lsl.w	r2, r1, r2
 80031a8:	43d2      	mvns	r2, r2
 80031aa:	401a      	ands	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	605a      	str	r2, [r3, #4]
	PORT -> OTYPER  |= ((0x30  & function)>>4) << (1 * pin);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	78ba      	ldrb	r2, [r7, #2]
 80031b6:	0912      	lsrs	r2, r2, #4
 80031b8:	b2d2      	uxtb	r2, r2
 80031ba:	f002 0103 	and.w	r1, r2, #3
 80031be:	78fa      	ldrb	r2, [r7, #3]
 80031c0:	fa01 f202 	lsl.w	r2, r1, r2
 80031c4:	431a      	orrs	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	605a      	str	r2, [r3, #4]

	PORT -> OSPEEDR	&= ~(0x3 << (2 * pin));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	78fa      	ldrb	r2, [r7, #3]
 80031d0:	0052      	lsls	r2, r2, #1
 80031d2:	2103      	movs	r1, #3
 80031d4:	fa01 f202 	lsl.w	r2, r1, r2
 80031d8:	43d2      	mvns	r2, r2
 80031da:	401a      	ands	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	609a      	str	r2, [r3, #8]
	PORT -> OSPEEDR |= ((0x0C  & function)>>2) << (2 * pin);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	78ba      	ldrb	r2, [r7, #2]
 80031e6:	0892      	lsrs	r2, r2, #2
 80031e8:	b2d2      	uxtb	r2, r2
 80031ea:	f002 0103 	and.w	r1, r2, #3
 80031ee:	78fa      	ldrb	r2, [r7, #3]
 80031f0:	0052      	lsls	r2, r2, #1
 80031f2:	fa01 f202 	lsl.w	r2, r1, r2
 80031f6:	431a      	orrs	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	609a      	str	r2, [r3, #8]

	PORT -> PUPDR	&= ~(0x03 << (2 * pin));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	78fa      	ldrb	r2, [r7, #3]
 8003202:	0052      	lsls	r2, r2, #1
 8003204:	2103      	movs	r1, #3
 8003206:	fa01 f202 	lsl.w	r2, r1, r2
 800320a:	43d2      	mvns	r2, r2
 800320c:	401a      	ands	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	60da      	str	r2, [r3, #12]
	PORT -> PUPDR   |= ((0x03  & function)>>0) << (2 * pin);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	78ba      	ldrb	r2, [r7, #2]
 8003218:	f002 0103 	and.w	r1, r2, #3
 800321c:	78fa      	ldrb	r2, [r7, #3]
 800321e:	0052      	lsls	r2, r2, #1
 8003220:	fa01 f202 	lsl.w	r2, r1, r2
 8003224:	431a      	orrs	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	60da      	str	r2, [r3, #12]

	if(pin < 8)PORT -> AFR[0] |= ( alternate_function << (4 * (pin)));
 800322a:	78fb      	ldrb	r3, [r7, #3]
 800322c:	2b07      	cmp	r3, #7
 800322e:	d80a      	bhi.n	8003246 <GPIO_Pin_Setup+0x17e>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	7879      	ldrb	r1, [r7, #1]
 8003236:	78fa      	ldrb	r2, [r7, #3]
 8003238:	0092      	lsls	r2, r2, #2
 800323a:	fa01 f202 	lsl.w	r2, r1, r2
 800323e:	431a      	orrs	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	621a      	str	r2, [r3, #32]
 8003244:	e00a      	b.n	800325c <GPIO_Pin_Setup+0x194>
	else	   PORT -> AFR[1] |= ( alternate_function << (4 * (pin - 8)));
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	7879      	ldrb	r1, [r7, #1]
 800324c:	78fa      	ldrb	r2, [r7, #3]
 800324e:	3a08      	subs	r2, #8
 8003250:	0092      	lsls	r2, r2, #2
 8003252:	fa01 f202 	lsl.w	r2, r1, r2
 8003256:	431a      	orrs	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	625a      	str	r2, [r3, #36]	; 0x24

	if (alternate_function == NONE) {}

	return 0;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	40020000 	.word	0x40020000
 8003270:	40023800 	.word	0x40023800
 8003274:	40020400 	.word	0x40020400
 8003278:	40020800 	.word	0x40020800
 800327c:	40020c00 	.word	0x40020c00
 8003280:	40021000 	.word	0x40021000
 8003284:	40021c00 	.word	0x40021c00

08003288 <__NVIC_SetPriority>:
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	4603      	mov	r3, r0
 8003290:	6039      	str	r1, [r7, #0]
 8003292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003298:	2b00      	cmp	r3, #0
 800329a:	db0a      	blt.n	80032b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	490c      	ldr	r1, [pc, #48]	; (80032d4 <__NVIC_SetPriority+0x4c>)
 80032a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a6:	0112      	lsls	r2, r2, #4
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	440b      	add	r3, r1
 80032ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80032b0:	e00a      	b.n	80032c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	4908      	ldr	r1, [pc, #32]	; (80032d8 <__NVIC_SetPriority+0x50>)
 80032b8:	79fb      	ldrb	r3, [r7, #7]
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	3b04      	subs	r3, #4
 80032c0:	0112      	lsls	r2, r2, #4
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	440b      	add	r3, r1
 80032c6:	761a      	strb	r2, [r3, #24]
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	e000e100 	.word	0xe000e100
 80032d8:	e000ed00 	.word	0xe000ed00

080032dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032ec:	d301      	bcc.n	80032f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032ee:	2301      	movs	r3, #1
 80032f0:	e00f      	b.n	8003312 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032f2:	4a0a      	ldr	r2, [pc, #40]	; (800331c <SysTick_Config+0x40>)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	3b01      	subs	r3, #1
 80032f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032fa:	210f      	movs	r1, #15
 80032fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003300:	f7ff ffc2 	bl	8003288 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003304:	4b05      	ldr	r3, [pc, #20]	; (800331c <SysTick_Config+0x40>)
 8003306:	2200      	movs	r2, #0
 8003308:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800330a:	4b04      	ldr	r3, [pc, #16]	; (800331c <SysTick_Config+0x40>)
 800330c:	2207      	movs	r2, #7
 800330e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	e000e010 	.word	0xe000e010

08003320 <MCU_Clock_Setup>:
{
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
}

__STATIC_INLINE void MCU_Clock_Setup(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
	uint8_t pll_m = 4;
 8003326:	2304      	movs	r3, #4
 8003328:	71fb      	strb	r3, [r7, #7]
	uint8_t pll_n = 168; //192
 800332a:	23a8      	movs	r3, #168	; 0xa8
 800332c:	71bb      	strb	r3, [r7, #6]
	uint8_t pll_p = 0;
 800332e:	2300      	movs	r3, #0
 8003330:	717b      	strb	r3, [r7, #5]
	uint8_t pll_q = 7;
 8003332:	2307      	movs	r3, #7
 8003334:	713b      	strb	r3, [r7, #4]

	RCC->PLLCFGR = 0x00000000;
 8003336:	4b3d      	ldr	r3, [pc, #244]	; (800342c <MCU_Clock_Setup+0x10c>)
 8003338:	2200      	movs	r2, #0
 800333a:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 800333c:	4b3b      	ldr	r3, [pc, #236]	; (800342c <MCU_Clock_Setup+0x10c>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a3a      	ldr	r2, [pc, #232]	; (800342c <MCU_Clock_Setup+0x10c>)
 8003342:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003346:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 8003348:	bf00      	nop
 800334a:	4b38      	ldr	r3, [pc, #224]	; (800342c <MCU_Clock_Setup+0x10c>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d0f9      	beq.n	800334a <MCU_Clock_Setup+0x2a>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 8003356:	4b35      	ldr	r3, [pc, #212]	; (800342c <MCU_Clock_Setup+0x10c>)
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	4a34      	ldr	r2, [pc, #208]	; (800342c <MCU_Clock_Setup+0x10c>)
 800335c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003360:	6413      	str	r3, [r2, #64]	; 0x40
	PWR ->CR |= PWR_CR_VOS;
 8003362:	4b33      	ldr	r3, [pc, #204]	; (8003430 <MCU_Clock_Setup+0x110>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a32      	ldr	r2, [pc, #200]	; (8003430 <MCU_Clock_Setup+0x110>)
 8003368:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800336c:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 800336e:	4b31      	ldr	r3, [pc, #196]	; (8003434 <MCU_Clock_Setup+0x114>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a30      	ldr	r2, [pc, #192]	; (8003434 <MCU_Clock_Setup+0x114>)
 8003374:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003378:	f043 0305 	orr.w	r3, r3, #5
 800337c:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 800337e:	4b2b      	ldr	r3, [pc, #172]	; (800342c <MCU_Clock_Setup+0x10c>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	793a      	ldrb	r2, [r7, #4]
 8003384:	0611      	lsls	r1, r2, #24
 8003386:	797a      	ldrb	r2, [r7, #5]
 8003388:	0412      	lsls	r2, r2, #16
 800338a:	4311      	orrs	r1, r2
 800338c:	79ba      	ldrb	r2, [r7, #6]
 800338e:	0192      	lsls	r2, r2, #6
 8003390:	4311      	orrs	r1, r2
 8003392:	79fa      	ldrb	r2, [r7, #7]
 8003394:	430a      	orrs	r2, r1
 8003396:	4611      	mov	r1, r2
 8003398:	4a24      	ldr	r2, [pc, #144]	; (800342c <MCU_Clock_Setup+0x10c>)
 800339a:	430b      	orrs	r3, r1
 800339c:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 800339e:	4b23      	ldr	r3, [pc, #140]	; (800342c <MCU_Clock_Setup+0x10c>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	4a22      	ldr	r2, [pc, #136]	; (800342c <MCU_Clock_Setup+0x10c>)
 80033a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033a8:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 80033aa:	4b20      	ldr	r3, [pc, #128]	; (800342c <MCU_Clock_Setup+0x10c>)
 80033ac:	4a1f      	ldr	r2, [pc, #124]	; (800342c <MCU_Clock_Setup+0x10c>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 80033b2:	4b1e      	ldr	r3, [pc, #120]	; (800342c <MCU_Clock_Setup+0x10c>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	4a1d      	ldr	r2, [pc, #116]	; (800342c <MCU_Clock_Setup+0x10c>)
 80033b8:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80033bc:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 80033be:	4b1b      	ldr	r3, [pc, #108]	; (800342c <MCU_Clock_Setup+0x10c>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	4a1a      	ldr	r2, [pc, #104]	; (800342c <MCU_Clock_Setup+0x10c>)
 80033c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033c8:	6093      	str	r3, [r2, #8]
	RCC -> CR |= RCC_CR_PLLON;
 80033ca:	4b18      	ldr	r3, [pc, #96]	; (800342c <MCU_Clock_Setup+0x10c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a17      	ldr	r2, [pc, #92]	; (800342c <MCU_Clock_Setup+0x10c>)
 80033d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033d4:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 80033d6:	bf00      	nop
 80033d8:	4b14      	ldr	r3, [pc, #80]	; (800342c <MCU_Clock_Setup+0x10c>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0f9      	beq.n	80033d8 <MCU_Clock_Setup+0xb8>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 80033e4:	4b11      	ldr	r3, [pc, #68]	; (800342c <MCU_Clock_Setup+0x10c>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	4a10      	ldr	r2, [pc, #64]	; (800342c <MCU_Clock_Setup+0x10c>)
 80033ea:	f043 0302 	orr.w	r3, r3, #2
 80033ee:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 80033f0:	bf00      	nop
 80033f2:	4b0e      	ldr	r3, [pc, #56]	; (800342c <MCU_Clock_Setup+0x10c>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f003 0308 	and.w	r3, r3, #8
 80033fa:	2b08      	cmp	r3, #8
 80033fc:	d1f9      	bne.n	80033f2 <MCU_Clock_Setup+0xd2>
	SystemCoreClockUpdate();
 80033fe:	f000 f897 	bl	8003530 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 8003402:	4b0d      	ldr	r3, [pc, #52]	; (8003438 <MCU_Clock_Setup+0x118>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	08db      	lsrs	r3, r3, #3
 8003408:	4a0c      	ldr	r2, [pc, #48]	; (800343c <MCU_Clock_Setup+0x11c>)
 800340a:	fba2 2303 	umull	r2, r3, r2, r3
 800340e:	085b      	lsrs	r3, r3, #1
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff ff63 	bl	80032dc <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8003416:	4b05      	ldr	r3, [pc, #20]	; (800342c <MCU_Clock_Setup+0x10c>)
 8003418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341a:	4a04      	ldr	r2, [pc, #16]	; (800342c <MCU_Clock_Setup+0x10c>)
 800341c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003420:	6453      	str	r3, [r2, #68]	; 0x44
}
 8003422:	bf00      	nop
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	40023800 	.word	0x40023800
 8003430:	40007000 	.word	0x40007000
 8003434:	40023c00 	.word	0x40023c00
 8003438:	20000004 	.word	0x20000004
 800343c:	18618619 	.word	0x18618619

08003440 <main>:
void Console_Entry_Function(void *argument);



int main(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0

	MCU_Clock_Setup();
 8003444:	f7ff ff6c 	bl	8003320 <MCU_Clock_Setup>
	Console_Init(USART1, 9600);
 8003448:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 800344c:	4807      	ldr	r0, [pc, #28]	; (800346c <main+0x2c>)
 800344e:	f7fc ff27 	bl	80002a0 <Console_Init>


	osKernelInitialize();
 8003452:	f7fd f907 	bl	8000664 <osKernelInitialize>


	Console_Handle = osThreadNew(Console_Entry_Function, NULL, &Console_Attribute);
 8003456:	4a06      	ldr	r2, [pc, #24]	; (8003470 <main+0x30>)
 8003458:	2100      	movs	r1, #0
 800345a:	4806      	ldr	r0, [pc, #24]	; (8003474 <main+0x34>)
 800345c:	f7fd f94c 	bl	80006f8 <osThreadNew>
 8003460:	4603      	mov	r3, r0
 8003462:	4a05      	ldr	r2, [pc, #20]	; (8003478 <main+0x38>)
 8003464:	6013      	str	r3, [r2, #0]


	osKernelStart();
 8003466:	f7fd f921 	bl	80006ac <osKernelStart>


    /* Loop forever */
	for(;;);
 800346a:	e7fe      	b.n	800346a <main+0x2a>
 800346c:	40011000 	.word	0x40011000
 8003470:	08004030 	.word	0x08004030
 8003474:	0800347d 	.word	0x0800347d
 8003478:	200049d8 	.word	0x200049d8

0800347c <Console_Entry_Function>:
}


void Console_Entry_Function(void *argument)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinkPA02 */
  /* Infinite loop */
  for(;;)
  {
	  printConsole(USART1, "Console Function for 1st Thread\r\n");
 8003484:	4904      	ldr	r1, [pc, #16]	; (8003498 <Console_Entry_Function+0x1c>)
 8003486:	4805      	ldr	r0, [pc, #20]	; (800349c <Console_Entry_Function+0x20>)
 8003488:	f7fd f868 	bl	800055c <printConsole>
	  osDelay(1000);
 800348c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003490:	f7fd f9c4 	bl	800081c <osDelay>
	  printConsole(USART1, "Console Function for 1st Thread\r\n");
 8003494:	e7f6      	b.n	8003484 <Console_Entry_Function+0x8>
 8003496:	bf00      	nop
 8003498:	0800400c 	.word	0x0800400c
 800349c:	40011000 	.word	0x40011000

080034a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034a8:	4a14      	ldr	r2, [pc, #80]	; (80034fc <_sbrk+0x5c>)
 80034aa:	4b15      	ldr	r3, [pc, #84]	; (8003500 <_sbrk+0x60>)
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034b4:	4b13      	ldr	r3, [pc, #76]	; (8003504 <_sbrk+0x64>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d102      	bne.n	80034c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034bc:	4b11      	ldr	r3, [pc, #68]	; (8003504 <_sbrk+0x64>)
 80034be:	4a12      	ldr	r2, [pc, #72]	; (8003508 <_sbrk+0x68>)
 80034c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034c2:	4b10      	ldr	r3, [pc, #64]	; (8003504 <_sbrk+0x64>)
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4413      	add	r3, r2
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d207      	bcs.n	80034e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034d0:	f000 f8d8 	bl	8003684 <__errno>
 80034d4:	4603      	mov	r3, r0
 80034d6:	220c      	movs	r2, #12
 80034d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034da:	f04f 33ff 	mov.w	r3, #4294967295
 80034de:	e009      	b.n	80034f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034e0:	4b08      	ldr	r3, [pc, #32]	; (8003504 <_sbrk+0x64>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034e6:	4b07      	ldr	r3, [pc, #28]	; (8003504 <_sbrk+0x64>)
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4413      	add	r3, r2
 80034ee:	4a05      	ldr	r2, [pc, #20]	; (8003504 <_sbrk+0x64>)
 80034f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034f2:	68fb      	ldr	r3, [r7, #12]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3718      	adds	r7, #24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	20020000 	.word	0x20020000
 8003500:	00000400 	.word	0x00000400
 8003504:	200049dc 	.word	0x200049dc
 8003508:	200049f0 	.word	0x200049f0

0800350c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003510:	4b06      	ldr	r3, [pc, #24]	; (800352c <SystemInit+0x20>)
 8003512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003516:	4a05      	ldr	r2, [pc, #20]	; (800352c <SystemInit+0x20>)
 8003518:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800351c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003520:	bf00      	nop
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	e000ed00 	.word	0xe000ed00

08003530 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8003530:	b480      	push	{r7}
 8003532:	b087      	sub	sp, #28
 8003534:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8003536:	2300      	movs	r3, #0
 8003538:	613b      	str	r3, [r7, #16]
 800353a:	2300      	movs	r3, #0
 800353c:	617b      	str	r3, [r7, #20]
 800353e:	2302      	movs	r3, #2
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	2300      	movs	r3, #0
 8003544:	60bb      	str	r3, [r7, #8]
 8003546:	2302      	movs	r3, #2
 8003548:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800354a:	4b34      	ldr	r3, [pc, #208]	; (800361c <SystemCoreClockUpdate+0xec>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 030c 	and.w	r3, r3, #12
 8003552:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	2b08      	cmp	r3, #8
 8003558:	d011      	beq.n	800357e <SystemCoreClockUpdate+0x4e>
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	2b08      	cmp	r3, #8
 800355e:	d844      	bhi.n	80035ea <SystemCoreClockUpdate+0xba>
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <SystemCoreClockUpdate+0x3e>
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	2b04      	cmp	r3, #4
 800356a:	d004      	beq.n	8003576 <SystemCoreClockUpdate+0x46>
 800356c:	e03d      	b.n	80035ea <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800356e:	4b2c      	ldr	r3, [pc, #176]	; (8003620 <SystemCoreClockUpdate+0xf0>)
 8003570:	4a2c      	ldr	r2, [pc, #176]	; (8003624 <SystemCoreClockUpdate+0xf4>)
 8003572:	601a      	str	r2, [r3, #0]
      break;
 8003574:	e03d      	b.n	80035f2 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8003576:	4b2a      	ldr	r3, [pc, #168]	; (8003620 <SystemCoreClockUpdate+0xf0>)
 8003578:	4a2b      	ldr	r2, [pc, #172]	; (8003628 <SystemCoreClockUpdate+0xf8>)
 800357a:	601a      	str	r2, [r3, #0]
      break;
 800357c:	e039      	b.n	80035f2 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800357e:	4b27      	ldr	r3, [pc, #156]	; (800361c <SystemCoreClockUpdate+0xec>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	0d9b      	lsrs	r3, r3, #22
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800358a:	4b24      	ldr	r3, [pc, #144]	; (800361c <SystemCoreClockUpdate+0xec>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003592:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00c      	beq.n	80035b4 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800359a:	4a23      	ldr	r2, [pc, #140]	; (8003628 <SystemCoreClockUpdate+0xf8>)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a2:	4a1e      	ldr	r2, [pc, #120]	; (800361c <SystemCoreClockUpdate+0xec>)
 80035a4:	6852      	ldr	r2, [r2, #4]
 80035a6:	0992      	lsrs	r2, r2, #6
 80035a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035ac:	fb02 f303 	mul.w	r3, r2, r3
 80035b0:	617b      	str	r3, [r7, #20]
 80035b2:	e00b      	b.n	80035cc <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80035b4:	4a1b      	ldr	r2, [pc, #108]	; (8003624 <SystemCoreClockUpdate+0xf4>)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035bc:	4a17      	ldr	r2, [pc, #92]	; (800361c <SystemCoreClockUpdate+0xec>)
 80035be:	6852      	ldr	r2, [r2, #4]
 80035c0:	0992      	lsrs	r2, r2, #6
 80035c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035c6:	fb02 f303 	mul.w	r3, r2, r3
 80035ca:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80035cc:	4b13      	ldr	r3, [pc, #76]	; (800361c <SystemCoreClockUpdate+0xec>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	0c1b      	lsrs	r3, r3, #16
 80035d2:	f003 0303 	and.w	r3, r3, #3
 80035d6:	3301      	adds	r3, #1
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e4:	4a0e      	ldr	r2, [pc, #56]	; (8003620 <SystemCoreClockUpdate+0xf0>)
 80035e6:	6013      	str	r3, [r2, #0]
      break;
 80035e8:	e003      	b.n	80035f2 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80035ea:	4b0d      	ldr	r3, [pc, #52]	; (8003620 <SystemCoreClockUpdate+0xf0>)
 80035ec:	4a0d      	ldr	r2, [pc, #52]	; (8003624 <SystemCoreClockUpdate+0xf4>)
 80035ee:	601a      	str	r2, [r3, #0]
      break;
 80035f0:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80035f2:	4b0a      	ldr	r3, [pc, #40]	; (800361c <SystemCoreClockUpdate+0xec>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	091b      	lsrs	r3, r3, #4
 80035f8:	f003 030f 	and.w	r3, r3, #15
 80035fc:	4a0b      	ldr	r2, [pc, #44]	; (800362c <SystemCoreClockUpdate+0xfc>)
 80035fe:	5cd3      	ldrb	r3, [r2, r3]
 8003600:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8003602:	4b07      	ldr	r3, [pc, #28]	; (8003620 <SystemCoreClockUpdate+0xf0>)
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	fa22 f303 	lsr.w	r3, r2, r3
 800360c:	4a04      	ldr	r2, [pc, #16]	; (8003620 <SystemCoreClockUpdate+0xf0>)
 800360e:	6013      	str	r3, [r2, #0]
}
 8003610:	bf00      	nop
 8003612:	371c      	adds	r7, #28
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	40023800 	.word	0x40023800
 8003620:	20000004 	.word	0x20000004
 8003624:	00f42400 	.word	0x00f42400
 8003628:	017d7840 	.word	0x017d7840
 800362c:	08004054 	.word	0x08004054

08003630 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003630:	480d      	ldr	r0, [pc, #52]	; (8003668 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003632:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003634:	f7ff ff6a 	bl	800350c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003638:	480c      	ldr	r0, [pc, #48]	; (800366c <LoopForever+0x6>)
  ldr r1, =_edata
 800363a:	490d      	ldr	r1, [pc, #52]	; (8003670 <LoopForever+0xa>)
  ldr r2, =_sidata
 800363c:	4a0d      	ldr	r2, [pc, #52]	; (8003674 <LoopForever+0xe>)
  movs r3, #0
 800363e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003640:	e002      	b.n	8003648 <LoopCopyDataInit>

08003642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003646:	3304      	adds	r3, #4

08003648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800364a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800364c:	d3f9      	bcc.n	8003642 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800364e:	4a0a      	ldr	r2, [pc, #40]	; (8003678 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003650:	4c0a      	ldr	r4, [pc, #40]	; (800367c <LoopForever+0x16>)
  movs r3, #0
 8003652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003654:	e001      	b.n	800365a <LoopFillZerobss>

08003656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003658:	3204      	adds	r2, #4

0800365a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800365a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800365c:	d3fb      	bcc.n	8003656 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800365e:	f000 f817 	bl	8003690 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003662:	f7ff feed 	bl	8003440 <main>

08003666 <LoopForever>:

LoopForever:
  b LoopForever
 8003666:	e7fe      	b.n	8003666 <LoopForever>
  ldr   r0, =_estack
 8003668:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800366c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003670:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8003674:	080040a0 	.word	0x080040a0
  ldr r2, =_sbss
 8003678:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800367c:	200049f0 	.word	0x200049f0

08003680 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003680:	e7fe      	b.n	8003680 <ADC_IRQHandler>
	...

08003684 <__errno>:
 8003684:	4b01      	ldr	r3, [pc, #4]	; (800368c <__errno+0x8>)
 8003686:	6818      	ldr	r0, [r3, #0]
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	20000008 	.word	0x20000008

08003690 <__libc_init_array>:
 8003690:	b570      	push	{r4, r5, r6, lr}
 8003692:	4d0d      	ldr	r5, [pc, #52]	; (80036c8 <__libc_init_array+0x38>)
 8003694:	4c0d      	ldr	r4, [pc, #52]	; (80036cc <__libc_init_array+0x3c>)
 8003696:	1b64      	subs	r4, r4, r5
 8003698:	10a4      	asrs	r4, r4, #2
 800369a:	2600      	movs	r6, #0
 800369c:	42a6      	cmp	r6, r4
 800369e:	d109      	bne.n	80036b4 <__libc_init_array+0x24>
 80036a0:	4d0b      	ldr	r5, [pc, #44]	; (80036d0 <__libc_init_array+0x40>)
 80036a2:	4c0c      	ldr	r4, [pc, #48]	; (80036d4 <__libc_init_array+0x44>)
 80036a4:	f000 fc8e 	bl	8003fc4 <_init>
 80036a8:	1b64      	subs	r4, r4, r5
 80036aa:	10a4      	asrs	r4, r4, #2
 80036ac:	2600      	movs	r6, #0
 80036ae:	42a6      	cmp	r6, r4
 80036b0:	d105      	bne.n	80036be <__libc_init_array+0x2e>
 80036b2:	bd70      	pop	{r4, r5, r6, pc}
 80036b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80036b8:	4798      	blx	r3
 80036ba:	3601      	adds	r6, #1
 80036bc:	e7ee      	b.n	800369c <__libc_init_array+0xc>
 80036be:	f855 3b04 	ldr.w	r3, [r5], #4
 80036c2:	4798      	blx	r3
 80036c4:	3601      	adds	r6, #1
 80036c6:	e7f2      	b.n	80036ae <__libc_init_array+0x1e>
 80036c8:	08004098 	.word	0x08004098
 80036cc:	08004098 	.word	0x08004098
 80036d0:	08004098 	.word	0x08004098
 80036d4:	0800409c 	.word	0x0800409c

080036d8 <memcpy>:
 80036d8:	440a      	add	r2, r1
 80036da:	4291      	cmp	r1, r2
 80036dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80036e0:	d100      	bne.n	80036e4 <memcpy+0xc>
 80036e2:	4770      	bx	lr
 80036e4:	b510      	push	{r4, lr}
 80036e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036ee:	4291      	cmp	r1, r2
 80036f0:	d1f9      	bne.n	80036e6 <memcpy+0xe>
 80036f2:	bd10      	pop	{r4, pc}

080036f4 <memset>:
 80036f4:	4402      	add	r2, r0
 80036f6:	4603      	mov	r3, r0
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d100      	bne.n	80036fe <memset+0xa>
 80036fc:	4770      	bx	lr
 80036fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003702:	e7f9      	b.n	80036f8 <memset+0x4>

08003704 <_vsiprintf_r>:
 8003704:	b500      	push	{lr}
 8003706:	b09b      	sub	sp, #108	; 0x6c
 8003708:	9100      	str	r1, [sp, #0]
 800370a:	9104      	str	r1, [sp, #16]
 800370c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003710:	9105      	str	r1, [sp, #20]
 8003712:	9102      	str	r1, [sp, #8]
 8003714:	4905      	ldr	r1, [pc, #20]	; (800372c <_vsiprintf_r+0x28>)
 8003716:	9103      	str	r1, [sp, #12]
 8003718:	4669      	mov	r1, sp
 800371a:	f000 f86f 	bl	80037fc <_svfiprintf_r>
 800371e:	9b00      	ldr	r3, [sp, #0]
 8003720:	2200      	movs	r2, #0
 8003722:	701a      	strb	r2, [r3, #0]
 8003724:	b01b      	add	sp, #108	; 0x6c
 8003726:	f85d fb04 	ldr.w	pc, [sp], #4
 800372a:	bf00      	nop
 800372c:	ffff0208 	.word	0xffff0208

08003730 <vsiprintf>:
 8003730:	4613      	mov	r3, r2
 8003732:	460a      	mov	r2, r1
 8003734:	4601      	mov	r1, r0
 8003736:	4802      	ldr	r0, [pc, #8]	; (8003740 <vsiprintf+0x10>)
 8003738:	6800      	ldr	r0, [r0, #0]
 800373a:	f7ff bfe3 	b.w	8003704 <_vsiprintf_r>
 800373e:	bf00      	nop
 8003740:	20000008 	.word	0x20000008

08003744 <__ssputs_r>:
 8003744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003748:	688e      	ldr	r6, [r1, #8]
 800374a:	429e      	cmp	r6, r3
 800374c:	4682      	mov	sl, r0
 800374e:	460c      	mov	r4, r1
 8003750:	4690      	mov	r8, r2
 8003752:	461f      	mov	r7, r3
 8003754:	d838      	bhi.n	80037c8 <__ssputs_r+0x84>
 8003756:	898a      	ldrh	r2, [r1, #12]
 8003758:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800375c:	d032      	beq.n	80037c4 <__ssputs_r+0x80>
 800375e:	6825      	ldr	r5, [r4, #0]
 8003760:	6909      	ldr	r1, [r1, #16]
 8003762:	eba5 0901 	sub.w	r9, r5, r1
 8003766:	6965      	ldr	r5, [r4, #20]
 8003768:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800376c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003770:	3301      	adds	r3, #1
 8003772:	444b      	add	r3, r9
 8003774:	106d      	asrs	r5, r5, #1
 8003776:	429d      	cmp	r5, r3
 8003778:	bf38      	it	cc
 800377a:	461d      	movcc	r5, r3
 800377c:	0553      	lsls	r3, r2, #21
 800377e:	d531      	bpl.n	80037e4 <__ssputs_r+0xa0>
 8003780:	4629      	mov	r1, r5
 8003782:	f000 fb55 	bl	8003e30 <_malloc_r>
 8003786:	4606      	mov	r6, r0
 8003788:	b950      	cbnz	r0, 80037a0 <__ssputs_r+0x5c>
 800378a:	230c      	movs	r3, #12
 800378c:	f8ca 3000 	str.w	r3, [sl]
 8003790:	89a3      	ldrh	r3, [r4, #12]
 8003792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003796:	81a3      	strh	r3, [r4, #12]
 8003798:	f04f 30ff 	mov.w	r0, #4294967295
 800379c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037a0:	6921      	ldr	r1, [r4, #16]
 80037a2:	464a      	mov	r2, r9
 80037a4:	f7ff ff98 	bl	80036d8 <memcpy>
 80037a8:	89a3      	ldrh	r3, [r4, #12]
 80037aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80037ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037b2:	81a3      	strh	r3, [r4, #12]
 80037b4:	6126      	str	r6, [r4, #16]
 80037b6:	6165      	str	r5, [r4, #20]
 80037b8:	444e      	add	r6, r9
 80037ba:	eba5 0509 	sub.w	r5, r5, r9
 80037be:	6026      	str	r6, [r4, #0]
 80037c0:	60a5      	str	r5, [r4, #8]
 80037c2:	463e      	mov	r6, r7
 80037c4:	42be      	cmp	r6, r7
 80037c6:	d900      	bls.n	80037ca <__ssputs_r+0x86>
 80037c8:	463e      	mov	r6, r7
 80037ca:	6820      	ldr	r0, [r4, #0]
 80037cc:	4632      	mov	r2, r6
 80037ce:	4641      	mov	r1, r8
 80037d0:	f000 faa8 	bl	8003d24 <memmove>
 80037d4:	68a3      	ldr	r3, [r4, #8]
 80037d6:	1b9b      	subs	r3, r3, r6
 80037d8:	60a3      	str	r3, [r4, #8]
 80037da:	6823      	ldr	r3, [r4, #0]
 80037dc:	4433      	add	r3, r6
 80037de:	6023      	str	r3, [r4, #0]
 80037e0:	2000      	movs	r0, #0
 80037e2:	e7db      	b.n	800379c <__ssputs_r+0x58>
 80037e4:	462a      	mov	r2, r5
 80037e6:	f000 fb97 	bl	8003f18 <_realloc_r>
 80037ea:	4606      	mov	r6, r0
 80037ec:	2800      	cmp	r0, #0
 80037ee:	d1e1      	bne.n	80037b4 <__ssputs_r+0x70>
 80037f0:	6921      	ldr	r1, [r4, #16]
 80037f2:	4650      	mov	r0, sl
 80037f4:	f000 fab0 	bl	8003d58 <_free_r>
 80037f8:	e7c7      	b.n	800378a <__ssputs_r+0x46>
	...

080037fc <_svfiprintf_r>:
 80037fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003800:	4698      	mov	r8, r3
 8003802:	898b      	ldrh	r3, [r1, #12]
 8003804:	061b      	lsls	r3, r3, #24
 8003806:	b09d      	sub	sp, #116	; 0x74
 8003808:	4607      	mov	r7, r0
 800380a:	460d      	mov	r5, r1
 800380c:	4614      	mov	r4, r2
 800380e:	d50e      	bpl.n	800382e <_svfiprintf_r+0x32>
 8003810:	690b      	ldr	r3, [r1, #16]
 8003812:	b963      	cbnz	r3, 800382e <_svfiprintf_r+0x32>
 8003814:	2140      	movs	r1, #64	; 0x40
 8003816:	f000 fb0b 	bl	8003e30 <_malloc_r>
 800381a:	6028      	str	r0, [r5, #0]
 800381c:	6128      	str	r0, [r5, #16]
 800381e:	b920      	cbnz	r0, 800382a <_svfiprintf_r+0x2e>
 8003820:	230c      	movs	r3, #12
 8003822:	603b      	str	r3, [r7, #0]
 8003824:	f04f 30ff 	mov.w	r0, #4294967295
 8003828:	e0d1      	b.n	80039ce <_svfiprintf_r+0x1d2>
 800382a:	2340      	movs	r3, #64	; 0x40
 800382c:	616b      	str	r3, [r5, #20]
 800382e:	2300      	movs	r3, #0
 8003830:	9309      	str	r3, [sp, #36]	; 0x24
 8003832:	2320      	movs	r3, #32
 8003834:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003838:	f8cd 800c 	str.w	r8, [sp, #12]
 800383c:	2330      	movs	r3, #48	; 0x30
 800383e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80039e8 <_svfiprintf_r+0x1ec>
 8003842:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003846:	f04f 0901 	mov.w	r9, #1
 800384a:	4623      	mov	r3, r4
 800384c:	469a      	mov	sl, r3
 800384e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003852:	b10a      	cbz	r2, 8003858 <_svfiprintf_r+0x5c>
 8003854:	2a25      	cmp	r2, #37	; 0x25
 8003856:	d1f9      	bne.n	800384c <_svfiprintf_r+0x50>
 8003858:	ebba 0b04 	subs.w	fp, sl, r4
 800385c:	d00b      	beq.n	8003876 <_svfiprintf_r+0x7a>
 800385e:	465b      	mov	r3, fp
 8003860:	4622      	mov	r2, r4
 8003862:	4629      	mov	r1, r5
 8003864:	4638      	mov	r0, r7
 8003866:	f7ff ff6d 	bl	8003744 <__ssputs_r>
 800386a:	3001      	adds	r0, #1
 800386c:	f000 80aa 	beq.w	80039c4 <_svfiprintf_r+0x1c8>
 8003870:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003872:	445a      	add	r2, fp
 8003874:	9209      	str	r2, [sp, #36]	; 0x24
 8003876:	f89a 3000 	ldrb.w	r3, [sl]
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 80a2 	beq.w	80039c4 <_svfiprintf_r+0x1c8>
 8003880:	2300      	movs	r3, #0
 8003882:	f04f 32ff 	mov.w	r2, #4294967295
 8003886:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800388a:	f10a 0a01 	add.w	sl, sl, #1
 800388e:	9304      	str	r3, [sp, #16]
 8003890:	9307      	str	r3, [sp, #28]
 8003892:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003896:	931a      	str	r3, [sp, #104]	; 0x68
 8003898:	4654      	mov	r4, sl
 800389a:	2205      	movs	r2, #5
 800389c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038a0:	4851      	ldr	r0, [pc, #324]	; (80039e8 <_svfiprintf_r+0x1ec>)
 80038a2:	f7fc fcad 	bl	8000200 <memchr>
 80038a6:	9a04      	ldr	r2, [sp, #16]
 80038a8:	b9d8      	cbnz	r0, 80038e2 <_svfiprintf_r+0xe6>
 80038aa:	06d0      	lsls	r0, r2, #27
 80038ac:	bf44      	itt	mi
 80038ae:	2320      	movmi	r3, #32
 80038b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038b4:	0711      	lsls	r1, r2, #28
 80038b6:	bf44      	itt	mi
 80038b8:	232b      	movmi	r3, #43	; 0x2b
 80038ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038be:	f89a 3000 	ldrb.w	r3, [sl]
 80038c2:	2b2a      	cmp	r3, #42	; 0x2a
 80038c4:	d015      	beq.n	80038f2 <_svfiprintf_r+0xf6>
 80038c6:	9a07      	ldr	r2, [sp, #28]
 80038c8:	4654      	mov	r4, sl
 80038ca:	2000      	movs	r0, #0
 80038cc:	f04f 0c0a 	mov.w	ip, #10
 80038d0:	4621      	mov	r1, r4
 80038d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80038d6:	3b30      	subs	r3, #48	; 0x30
 80038d8:	2b09      	cmp	r3, #9
 80038da:	d94e      	bls.n	800397a <_svfiprintf_r+0x17e>
 80038dc:	b1b0      	cbz	r0, 800390c <_svfiprintf_r+0x110>
 80038de:	9207      	str	r2, [sp, #28]
 80038e0:	e014      	b.n	800390c <_svfiprintf_r+0x110>
 80038e2:	eba0 0308 	sub.w	r3, r0, r8
 80038e6:	fa09 f303 	lsl.w	r3, r9, r3
 80038ea:	4313      	orrs	r3, r2
 80038ec:	9304      	str	r3, [sp, #16]
 80038ee:	46a2      	mov	sl, r4
 80038f0:	e7d2      	b.n	8003898 <_svfiprintf_r+0x9c>
 80038f2:	9b03      	ldr	r3, [sp, #12]
 80038f4:	1d19      	adds	r1, r3, #4
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	9103      	str	r1, [sp, #12]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	bfbb      	ittet	lt
 80038fe:	425b      	neglt	r3, r3
 8003900:	f042 0202 	orrlt.w	r2, r2, #2
 8003904:	9307      	strge	r3, [sp, #28]
 8003906:	9307      	strlt	r3, [sp, #28]
 8003908:	bfb8      	it	lt
 800390a:	9204      	strlt	r2, [sp, #16]
 800390c:	7823      	ldrb	r3, [r4, #0]
 800390e:	2b2e      	cmp	r3, #46	; 0x2e
 8003910:	d10c      	bne.n	800392c <_svfiprintf_r+0x130>
 8003912:	7863      	ldrb	r3, [r4, #1]
 8003914:	2b2a      	cmp	r3, #42	; 0x2a
 8003916:	d135      	bne.n	8003984 <_svfiprintf_r+0x188>
 8003918:	9b03      	ldr	r3, [sp, #12]
 800391a:	1d1a      	adds	r2, r3, #4
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	9203      	str	r2, [sp, #12]
 8003920:	2b00      	cmp	r3, #0
 8003922:	bfb8      	it	lt
 8003924:	f04f 33ff 	movlt.w	r3, #4294967295
 8003928:	3402      	adds	r4, #2
 800392a:	9305      	str	r3, [sp, #20]
 800392c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80039f8 <_svfiprintf_r+0x1fc>
 8003930:	7821      	ldrb	r1, [r4, #0]
 8003932:	2203      	movs	r2, #3
 8003934:	4650      	mov	r0, sl
 8003936:	f7fc fc63 	bl	8000200 <memchr>
 800393a:	b140      	cbz	r0, 800394e <_svfiprintf_r+0x152>
 800393c:	2340      	movs	r3, #64	; 0x40
 800393e:	eba0 000a 	sub.w	r0, r0, sl
 8003942:	fa03 f000 	lsl.w	r0, r3, r0
 8003946:	9b04      	ldr	r3, [sp, #16]
 8003948:	4303      	orrs	r3, r0
 800394a:	3401      	adds	r4, #1
 800394c:	9304      	str	r3, [sp, #16]
 800394e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003952:	4826      	ldr	r0, [pc, #152]	; (80039ec <_svfiprintf_r+0x1f0>)
 8003954:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003958:	2206      	movs	r2, #6
 800395a:	f7fc fc51 	bl	8000200 <memchr>
 800395e:	2800      	cmp	r0, #0
 8003960:	d038      	beq.n	80039d4 <_svfiprintf_r+0x1d8>
 8003962:	4b23      	ldr	r3, [pc, #140]	; (80039f0 <_svfiprintf_r+0x1f4>)
 8003964:	bb1b      	cbnz	r3, 80039ae <_svfiprintf_r+0x1b2>
 8003966:	9b03      	ldr	r3, [sp, #12]
 8003968:	3307      	adds	r3, #7
 800396a:	f023 0307 	bic.w	r3, r3, #7
 800396e:	3308      	adds	r3, #8
 8003970:	9303      	str	r3, [sp, #12]
 8003972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003974:	4433      	add	r3, r6
 8003976:	9309      	str	r3, [sp, #36]	; 0x24
 8003978:	e767      	b.n	800384a <_svfiprintf_r+0x4e>
 800397a:	fb0c 3202 	mla	r2, ip, r2, r3
 800397e:	460c      	mov	r4, r1
 8003980:	2001      	movs	r0, #1
 8003982:	e7a5      	b.n	80038d0 <_svfiprintf_r+0xd4>
 8003984:	2300      	movs	r3, #0
 8003986:	3401      	adds	r4, #1
 8003988:	9305      	str	r3, [sp, #20]
 800398a:	4619      	mov	r1, r3
 800398c:	f04f 0c0a 	mov.w	ip, #10
 8003990:	4620      	mov	r0, r4
 8003992:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003996:	3a30      	subs	r2, #48	; 0x30
 8003998:	2a09      	cmp	r2, #9
 800399a:	d903      	bls.n	80039a4 <_svfiprintf_r+0x1a8>
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0c5      	beq.n	800392c <_svfiprintf_r+0x130>
 80039a0:	9105      	str	r1, [sp, #20]
 80039a2:	e7c3      	b.n	800392c <_svfiprintf_r+0x130>
 80039a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80039a8:	4604      	mov	r4, r0
 80039aa:	2301      	movs	r3, #1
 80039ac:	e7f0      	b.n	8003990 <_svfiprintf_r+0x194>
 80039ae:	ab03      	add	r3, sp, #12
 80039b0:	9300      	str	r3, [sp, #0]
 80039b2:	462a      	mov	r2, r5
 80039b4:	4b0f      	ldr	r3, [pc, #60]	; (80039f4 <_svfiprintf_r+0x1f8>)
 80039b6:	a904      	add	r1, sp, #16
 80039b8:	4638      	mov	r0, r7
 80039ba:	f3af 8000 	nop.w
 80039be:	1c42      	adds	r2, r0, #1
 80039c0:	4606      	mov	r6, r0
 80039c2:	d1d6      	bne.n	8003972 <_svfiprintf_r+0x176>
 80039c4:	89ab      	ldrh	r3, [r5, #12]
 80039c6:	065b      	lsls	r3, r3, #25
 80039c8:	f53f af2c 	bmi.w	8003824 <_svfiprintf_r+0x28>
 80039cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80039ce:	b01d      	add	sp, #116	; 0x74
 80039d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039d4:	ab03      	add	r3, sp, #12
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	462a      	mov	r2, r5
 80039da:	4b06      	ldr	r3, [pc, #24]	; (80039f4 <_svfiprintf_r+0x1f8>)
 80039dc:	a904      	add	r1, sp, #16
 80039de:	4638      	mov	r0, r7
 80039e0:	f000 f87a 	bl	8003ad8 <_printf_i>
 80039e4:	e7eb      	b.n	80039be <_svfiprintf_r+0x1c2>
 80039e6:	bf00      	nop
 80039e8:	08004064 	.word	0x08004064
 80039ec:	0800406e 	.word	0x0800406e
 80039f0:	00000000 	.word	0x00000000
 80039f4:	08003745 	.word	0x08003745
 80039f8:	0800406a 	.word	0x0800406a

080039fc <_printf_common>:
 80039fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a00:	4616      	mov	r6, r2
 8003a02:	4699      	mov	r9, r3
 8003a04:	688a      	ldr	r2, [r1, #8]
 8003a06:	690b      	ldr	r3, [r1, #16]
 8003a08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	bfb8      	it	lt
 8003a10:	4613      	movlt	r3, r2
 8003a12:	6033      	str	r3, [r6, #0]
 8003a14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a18:	4607      	mov	r7, r0
 8003a1a:	460c      	mov	r4, r1
 8003a1c:	b10a      	cbz	r2, 8003a22 <_printf_common+0x26>
 8003a1e:	3301      	adds	r3, #1
 8003a20:	6033      	str	r3, [r6, #0]
 8003a22:	6823      	ldr	r3, [r4, #0]
 8003a24:	0699      	lsls	r1, r3, #26
 8003a26:	bf42      	ittt	mi
 8003a28:	6833      	ldrmi	r3, [r6, #0]
 8003a2a:	3302      	addmi	r3, #2
 8003a2c:	6033      	strmi	r3, [r6, #0]
 8003a2e:	6825      	ldr	r5, [r4, #0]
 8003a30:	f015 0506 	ands.w	r5, r5, #6
 8003a34:	d106      	bne.n	8003a44 <_printf_common+0x48>
 8003a36:	f104 0a19 	add.w	sl, r4, #25
 8003a3a:	68e3      	ldr	r3, [r4, #12]
 8003a3c:	6832      	ldr	r2, [r6, #0]
 8003a3e:	1a9b      	subs	r3, r3, r2
 8003a40:	42ab      	cmp	r3, r5
 8003a42:	dc26      	bgt.n	8003a92 <_printf_common+0x96>
 8003a44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a48:	1e13      	subs	r3, r2, #0
 8003a4a:	6822      	ldr	r2, [r4, #0]
 8003a4c:	bf18      	it	ne
 8003a4e:	2301      	movne	r3, #1
 8003a50:	0692      	lsls	r2, r2, #26
 8003a52:	d42b      	bmi.n	8003aac <_printf_common+0xb0>
 8003a54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a58:	4649      	mov	r1, r9
 8003a5a:	4638      	mov	r0, r7
 8003a5c:	47c0      	blx	r8
 8003a5e:	3001      	adds	r0, #1
 8003a60:	d01e      	beq.n	8003aa0 <_printf_common+0xa4>
 8003a62:	6823      	ldr	r3, [r4, #0]
 8003a64:	68e5      	ldr	r5, [r4, #12]
 8003a66:	6832      	ldr	r2, [r6, #0]
 8003a68:	f003 0306 	and.w	r3, r3, #6
 8003a6c:	2b04      	cmp	r3, #4
 8003a6e:	bf08      	it	eq
 8003a70:	1aad      	subeq	r5, r5, r2
 8003a72:	68a3      	ldr	r3, [r4, #8]
 8003a74:	6922      	ldr	r2, [r4, #16]
 8003a76:	bf0c      	ite	eq
 8003a78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a7c:	2500      	movne	r5, #0
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	bfc4      	itt	gt
 8003a82:	1a9b      	subgt	r3, r3, r2
 8003a84:	18ed      	addgt	r5, r5, r3
 8003a86:	2600      	movs	r6, #0
 8003a88:	341a      	adds	r4, #26
 8003a8a:	42b5      	cmp	r5, r6
 8003a8c:	d11a      	bne.n	8003ac4 <_printf_common+0xc8>
 8003a8e:	2000      	movs	r0, #0
 8003a90:	e008      	b.n	8003aa4 <_printf_common+0xa8>
 8003a92:	2301      	movs	r3, #1
 8003a94:	4652      	mov	r2, sl
 8003a96:	4649      	mov	r1, r9
 8003a98:	4638      	mov	r0, r7
 8003a9a:	47c0      	blx	r8
 8003a9c:	3001      	adds	r0, #1
 8003a9e:	d103      	bne.n	8003aa8 <_printf_common+0xac>
 8003aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003aa8:	3501      	adds	r5, #1
 8003aaa:	e7c6      	b.n	8003a3a <_printf_common+0x3e>
 8003aac:	18e1      	adds	r1, r4, r3
 8003aae:	1c5a      	adds	r2, r3, #1
 8003ab0:	2030      	movs	r0, #48	; 0x30
 8003ab2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ab6:	4422      	add	r2, r4
 8003ab8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003abc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ac0:	3302      	adds	r3, #2
 8003ac2:	e7c7      	b.n	8003a54 <_printf_common+0x58>
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	4622      	mov	r2, r4
 8003ac8:	4649      	mov	r1, r9
 8003aca:	4638      	mov	r0, r7
 8003acc:	47c0      	blx	r8
 8003ace:	3001      	adds	r0, #1
 8003ad0:	d0e6      	beq.n	8003aa0 <_printf_common+0xa4>
 8003ad2:	3601      	adds	r6, #1
 8003ad4:	e7d9      	b.n	8003a8a <_printf_common+0x8e>
	...

08003ad8 <_printf_i>:
 8003ad8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003adc:	7e0f      	ldrb	r7, [r1, #24]
 8003ade:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003ae0:	2f78      	cmp	r7, #120	; 0x78
 8003ae2:	4691      	mov	r9, r2
 8003ae4:	4680      	mov	r8, r0
 8003ae6:	460c      	mov	r4, r1
 8003ae8:	469a      	mov	sl, r3
 8003aea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003aee:	d807      	bhi.n	8003b00 <_printf_i+0x28>
 8003af0:	2f62      	cmp	r7, #98	; 0x62
 8003af2:	d80a      	bhi.n	8003b0a <_printf_i+0x32>
 8003af4:	2f00      	cmp	r7, #0
 8003af6:	f000 80d8 	beq.w	8003caa <_printf_i+0x1d2>
 8003afa:	2f58      	cmp	r7, #88	; 0x58
 8003afc:	f000 80a3 	beq.w	8003c46 <_printf_i+0x16e>
 8003b00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b08:	e03a      	b.n	8003b80 <_printf_i+0xa8>
 8003b0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b0e:	2b15      	cmp	r3, #21
 8003b10:	d8f6      	bhi.n	8003b00 <_printf_i+0x28>
 8003b12:	a101      	add	r1, pc, #4	; (adr r1, 8003b18 <_printf_i+0x40>)
 8003b14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b18:	08003b71 	.word	0x08003b71
 8003b1c:	08003b85 	.word	0x08003b85
 8003b20:	08003b01 	.word	0x08003b01
 8003b24:	08003b01 	.word	0x08003b01
 8003b28:	08003b01 	.word	0x08003b01
 8003b2c:	08003b01 	.word	0x08003b01
 8003b30:	08003b85 	.word	0x08003b85
 8003b34:	08003b01 	.word	0x08003b01
 8003b38:	08003b01 	.word	0x08003b01
 8003b3c:	08003b01 	.word	0x08003b01
 8003b40:	08003b01 	.word	0x08003b01
 8003b44:	08003c91 	.word	0x08003c91
 8003b48:	08003bb5 	.word	0x08003bb5
 8003b4c:	08003c73 	.word	0x08003c73
 8003b50:	08003b01 	.word	0x08003b01
 8003b54:	08003b01 	.word	0x08003b01
 8003b58:	08003cb3 	.word	0x08003cb3
 8003b5c:	08003b01 	.word	0x08003b01
 8003b60:	08003bb5 	.word	0x08003bb5
 8003b64:	08003b01 	.word	0x08003b01
 8003b68:	08003b01 	.word	0x08003b01
 8003b6c:	08003c7b 	.word	0x08003c7b
 8003b70:	682b      	ldr	r3, [r5, #0]
 8003b72:	1d1a      	adds	r2, r3, #4
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	602a      	str	r2, [r5, #0]
 8003b78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b80:	2301      	movs	r3, #1
 8003b82:	e0a3      	b.n	8003ccc <_printf_i+0x1f4>
 8003b84:	6820      	ldr	r0, [r4, #0]
 8003b86:	6829      	ldr	r1, [r5, #0]
 8003b88:	0606      	lsls	r6, r0, #24
 8003b8a:	f101 0304 	add.w	r3, r1, #4
 8003b8e:	d50a      	bpl.n	8003ba6 <_printf_i+0xce>
 8003b90:	680e      	ldr	r6, [r1, #0]
 8003b92:	602b      	str	r3, [r5, #0]
 8003b94:	2e00      	cmp	r6, #0
 8003b96:	da03      	bge.n	8003ba0 <_printf_i+0xc8>
 8003b98:	232d      	movs	r3, #45	; 0x2d
 8003b9a:	4276      	negs	r6, r6
 8003b9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ba0:	485e      	ldr	r0, [pc, #376]	; (8003d1c <_printf_i+0x244>)
 8003ba2:	230a      	movs	r3, #10
 8003ba4:	e019      	b.n	8003bda <_printf_i+0x102>
 8003ba6:	680e      	ldr	r6, [r1, #0]
 8003ba8:	602b      	str	r3, [r5, #0]
 8003baa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003bae:	bf18      	it	ne
 8003bb0:	b236      	sxthne	r6, r6
 8003bb2:	e7ef      	b.n	8003b94 <_printf_i+0xbc>
 8003bb4:	682b      	ldr	r3, [r5, #0]
 8003bb6:	6820      	ldr	r0, [r4, #0]
 8003bb8:	1d19      	adds	r1, r3, #4
 8003bba:	6029      	str	r1, [r5, #0]
 8003bbc:	0601      	lsls	r1, r0, #24
 8003bbe:	d501      	bpl.n	8003bc4 <_printf_i+0xec>
 8003bc0:	681e      	ldr	r6, [r3, #0]
 8003bc2:	e002      	b.n	8003bca <_printf_i+0xf2>
 8003bc4:	0646      	lsls	r6, r0, #25
 8003bc6:	d5fb      	bpl.n	8003bc0 <_printf_i+0xe8>
 8003bc8:	881e      	ldrh	r6, [r3, #0]
 8003bca:	4854      	ldr	r0, [pc, #336]	; (8003d1c <_printf_i+0x244>)
 8003bcc:	2f6f      	cmp	r7, #111	; 0x6f
 8003bce:	bf0c      	ite	eq
 8003bd0:	2308      	moveq	r3, #8
 8003bd2:	230a      	movne	r3, #10
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003bda:	6865      	ldr	r5, [r4, #4]
 8003bdc:	60a5      	str	r5, [r4, #8]
 8003bde:	2d00      	cmp	r5, #0
 8003be0:	bfa2      	ittt	ge
 8003be2:	6821      	ldrge	r1, [r4, #0]
 8003be4:	f021 0104 	bicge.w	r1, r1, #4
 8003be8:	6021      	strge	r1, [r4, #0]
 8003bea:	b90e      	cbnz	r6, 8003bf0 <_printf_i+0x118>
 8003bec:	2d00      	cmp	r5, #0
 8003bee:	d04d      	beq.n	8003c8c <_printf_i+0x1b4>
 8003bf0:	4615      	mov	r5, r2
 8003bf2:	fbb6 f1f3 	udiv	r1, r6, r3
 8003bf6:	fb03 6711 	mls	r7, r3, r1, r6
 8003bfa:	5dc7      	ldrb	r7, [r0, r7]
 8003bfc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003c00:	4637      	mov	r7, r6
 8003c02:	42bb      	cmp	r3, r7
 8003c04:	460e      	mov	r6, r1
 8003c06:	d9f4      	bls.n	8003bf2 <_printf_i+0x11a>
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	d10b      	bne.n	8003c24 <_printf_i+0x14c>
 8003c0c:	6823      	ldr	r3, [r4, #0]
 8003c0e:	07de      	lsls	r6, r3, #31
 8003c10:	d508      	bpl.n	8003c24 <_printf_i+0x14c>
 8003c12:	6923      	ldr	r3, [r4, #16]
 8003c14:	6861      	ldr	r1, [r4, #4]
 8003c16:	4299      	cmp	r1, r3
 8003c18:	bfde      	ittt	le
 8003c1a:	2330      	movle	r3, #48	; 0x30
 8003c1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003c20:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003c24:	1b52      	subs	r2, r2, r5
 8003c26:	6122      	str	r2, [r4, #16]
 8003c28:	f8cd a000 	str.w	sl, [sp]
 8003c2c:	464b      	mov	r3, r9
 8003c2e:	aa03      	add	r2, sp, #12
 8003c30:	4621      	mov	r1, r4
 8003c32:	4640      	mov	r0, r8
 8003c34:	f7ff fee2 	bl	80039fc <_printf_common>
 8003c38:	3001      	adds	r0, #1
 8003c3a:	d14c      	bne.n	8003cd6 <_printf_i+0x1fe>
 8003c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c40:	b004      	add	sp, #16
 8003c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c46:	4835      	ldr	r0, [pc, #212]	; (8003d1c <_printf_i+0x244>)
 8003c48:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003c4c:	6829      	ldr	r1, [r5, #0]
 8003c4e:	6823      	ldr	r3, [r4, #0]
 8003c50:	f851 6b04 	ldr.w	r6, [r1], #4
 8003c54:	6029      	str	r1, [r5, #0]
 8003c56:	061d      	lsls	r5, r3, #24
 8003c58:	d514      	bpl.n	8003c84 <_printf_i+0x1ac>
 8003c5a:	07df      	lsls	r7, r3, #31
 8003c5c:	bf44      	itt	mi
 8003c5e:	f043 0320 	orrmi.w	r3, r3, #32
 8003c62:	6023      	strmi	r3, [r4, #0]
 8003c64:	b91e      	cbnz	r6, 8003c6e <_printf_i+0x196>
 8003c66:	6823      	ldr	r3, [r4, #0]
 8003c68:	f023 0320 	bic.w	r3, r3, #32
 8003c6c:	6023      	str	r3, [r4, #0]
 8003c6e:	2310      	movs	r3, #16
 8003c70:	e7b0      	b.n	8003bd4 <_printf_i+0xfc>
 8003c72:	6823      	ldr	r3, [r4, #0]
 8003c74:	f043 0320 	orr.w	r3, r3, #32
 8003c78:	6023      	str	r3, [r4, #0]
 8003c7a:	2378      	movs	r3, #120	; 0x78
 8003c7c:	4828      	ldr	r0, [pc, #160]	; (8003d20 <_printf_i+0x248>)
 8003c7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c82:	e7e3      	b.n	8003c4c <_printf_i+0x174>
 8003c84:	0659      	lsls	r1, r3, #25
 8003c86:	bf48      	it	mi
 8003c88:	b2b6      	uxthmi	r6, r6
 8003c8a:	e7e6      	b.n	8003c5a <_printf_i+0x182>
 8003c8c:	4615      	mov	r5, r2
 8003c8e:	e7bb      	b.n	8003c08 <_printf_i+0x130>
 8003c90:	682b      	ldr	r3, [r5, #0]
 8003c92:	6826      	ldr	r6, [r4, #0]
 8003c94:	6961      	ldr	r1, [r4, #20]
 8003c96:	1d18      	adds	r0, r3, #4
 8003c98:	6028      	str	r0, [r5, #0]
 8003c9a:	0635      	lsls	r5, r6, #24
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	d501      	bpl.n	8003ca4 <_printf_i+0x1cc>
 8003ca0:	6019      	str	r1, [r3, #0]
 8003ca2:	e002      	b.n	8003caa <_printf_i+0x1d2>
 8003ca4:	0670      	lsls	r0, r6, #25
 8003ca6:	d5fb      	bpl.n	8003ca0 <_printf_i+0x1c8>
 8003ca8:	8019      	strh	r1, [r3, #0]
 8003caa:	2300      	movs	r3, #0
 8003cac:	6123      	str	r3, [r4, #16]
 8003cae:	4615      	mov	r5, r2
 8003cb0:	e7ba      	b.n	8003c28 <_printf_i+0x150>
 8003cb2:	682b      	ldr	r3, [r5, #0]
 8003cb4:	1d1a      	adds	r2, r3, #4
 8003cb6:	602a      	str	r2, [r5, #0]
 8003cb8:	681d      	ldr	r5, [r3, #0]
 8003cba:	6862      	ldr	r2, [r4, #4]
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	4628      	mov	r0, r5
 8003cc0:	f7fc fa9e 	bl	8000200 <memchr>
 8003cc4:	b108      	cbz	r0, 8003cca <_printf_i+0x1f2>
 8003cc6:	1b40      	subs	r0, r0, r5
 8003cc8:	6060      	str	r0, [r4, #4]
 8003cca:	6863      	ldr	r3, [r4, #4]
 8003ccc:	6123      	str	r3, [r4, #16]
 8003cce:	2300      	movs	r3, #0
 8003cd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cd4:	e7a8      	b.n	8003c28 <_printf_i+0x150>
 8003cd6:	6923      	ldr	r3, [r4, #16]
 8003cd8:	462a      	mov	r2, r5
 8003cda:	4649      	mov	r1, r9
 8003cdc:	4640      	mov	r0, r8
 8003cde:	47d0      	blx	sl
 8003ce0:	3001      	adds	r0, #1
 8003ce2:	d0ab      	beq.n	8003c3c <_printf_i+0x164>
 8003ce4:	6823      	ldr	r3, [r4, #0]
 8003ce6:	079b      	lsls	r3, r3, #30
 8003ce8:	d413      	bmi.n	8003d12 <_printf_i+0x23a>
 8003cea:	68e0      	ldr	r0, [r4, #12]
 8003cec:	9b03      	ldr	r3, [sp, #12]
 8003cee:	4298      	cmp	r0, r3
 8003cf0:	bfb8      	it	lt
 8003cf2:	4618      	movlt	r0, r3
 8003cf4:	e7a4      	b.n	8003c40 <_printf_i+0x168>
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	4632      	mov	r2, r6
 8003cfa:	4649      	mov	r1, r9
 8003cfc:	4640      	mov	r0, r8
 8003cfe:	47d0      	blx	sl
 8003d00:	3001      	adds	r0, #1
 8003d02:	d09b      	beq.n	8003c3c <_printf_i+0x164>
 8003d04:	3501      	adds	r5, #1
 8003d06:	68e3      	ldr	r3, [r4, #12]
 8003d08:	9903      	ldr	r1, [sp, #12]
 8003d0a:	1a5b      	subs	r3, r3, r1
 8003d0c:	42ab      	cmp	r3, r5
 8003d0e:	dcf2      	bgt.n	8003cf6 <_printf_i+0x21e>
 8003d10:	e7eb      	b.n	8003cea <_printf_i+0x212>
 8003d12:	2500      	movs	r5, #0
 8003d14:	f104 0619 	add.w	r6, r4, #25
 8003d18:	e7f5      	b.n	8003d06 <_printf_i+0x22e>
 8003d1a:	bf00      	nop
 8003d1c:	08004075 	.word	0x08004075
 8003d20:	08004086 	.word	0x08004086

08003d24 <memmove>:
 8003d24:	4288      	cmp	r0, r1
 8003d26:	b510      	push	{r4, lr}
 8003d28:	eb01 0402 	add.w	r4, r1, r2
 8003d2c:	d902      	bls.n	8003d34 <memmove+0x10>
 8003d2e:	4284      	cmp	r4, r0
 8003d30:	4623      	mov	r3, r4
 8003d32:	d807      	bhi.n	8003d44 <memmove+0x20>
 8003d34:	1e43      	subs	r3, r0, #1
 8003d36:	42a1      	cmp	r1, r4
 8003d38:	d008      	beq.n	8003d4c <memmove+0x28>
 8003d3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003d42:	e7f8      	b.n	8003d36 <memmove+0x12>
 8003d44:	4402      	add	r2, r0
 8003d46:	4601      	mov	r1, r0
 8003d48:	428a      	cmp	r2, r1
 8003d4a:	d100      	bne.n	8003d4e <memmove+0x2a>
 8003d4c:	bd10      	pop	{r4, pc}
 8003d4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003d56:	e7f7      	b.n	8003d48 <memmove+0x24>

08003d58 <_free_r>:
 8003d58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003d5a:	2900      	cmp	r1, #0
 8003d5c:	d044      	beq.n	8003de8 <_free_r+0x90>
 8003d5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d62:	9001      	str	r0, [sp, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f1a1 0404 	sub.w	r4, r1, #4
 8003d6a:	bfb8      	it	lt
 8003d6c:	18e4      	addlt	r4, r4, r3
 8003d6e:	f000 f913 	bl	8003f98 <__malloc_lock>
 8003d72:	4a1e      	ldr	r2, [pc, #120]	; (8003dec <_free_r+0x94>)
 8003d74:	9801      	ldr	r0, [sp, #4]
 8003d76:	6813      	ldr	r3, [r2, #0]
 8003d78:	b933      	cbnz	r3, 8003d88 <_free_r+0x30>
 8003d7a:	6063      	str	r3, [r4, #4]
 8003d7c:	6014      	str	r4, [r2, #0]
 8003d7e:	b003      	add	sp, #12
 8003d80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d84:	f000 b90e 	b.w	8003fa4 <__malloc_unlock>
 8003d88:	42a3      	cmp	r3, r4
 8003d8a:	d908      	bls.n	8003d9e <_free_r+0x46>
 8003d8c:	6825      	ldr	r5, [r4, #0]
 8003d8e:	1961      	adds	r1, r4, r5
 8003d90:	428b      	cmp	r3, r1
 8003d92:	bf01      	itttt	eq
 8003d94:	6819      	ldreq	r1, [r3, #0]
 8003d96:	685b      	ldreq	r3, [r3, #4]
 8003d98:	1949      	addeq	r1, r1, r5
 8003d9a:	6021      	streq	r1, [r4, #0]
 8003d9c:	e7ed      	b.n	8003d7a <_free_r+0x22>
 8003d9e:	461a      	mov	r2, r3
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	b10b      	cbz	r3, 8003da8 <_free_r+0x50>
 8003da4:	42a3      	cmp	r3, r4
 8003da6:	d9fa      	bls.n	8003d9e <_free_r+0x46>
 8003da8:	6811      	ldr	r1, [r2, #0]
 8003daa:	1855      	adds	r5, r2, r1
 8003dac:	42a5      	cmp	r5, r4
 8003dae:	d10b      	bne.n	8003dc8 <_free_r+0x70>
 8003db0:	6824      	ldr	r4, [r4, #0]
 8003db2:	4421      	add	r1, r4
 8003db4:	1854      	adds	r4, r2, r1
 8003db6:	42a3      	cmp	r3, r4
 8003db8:	6011      	str	r1, [r2, #0]
 8003dba:	d1e0      	bne.n	8003d7e <_free_r+0x26>
 8003dbc:	681c      	ldr	r4, [r3, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	6053      	str	r3, [r2, #4]
 8003dc2:	4421      	add	r1, r4
 8003dc4:	6011      	str	r1, [r2, #0]
 8003dc6:	e7da      	b.n	8003d7e <_free_r+0x26>
 8003dc8:	d902      	bls.n	8003dd0 <_free_r+0x78>
 8003dca:	230c      	movs	r3, #12
 8003dcc:	6003      	str	r3, [r0, #0]
 8003dce:	e7d6      	b.n	8003d7e <_free_r+0x26>
 8003dd0:	6825      	ldr	r5, [r4, #0]
 8003dd2:	1961      	adds	r1, r4, r5
 8003dd4:	428b      	cmp	r3, r1
 8003dd6:	bf04      	itt	eq
 8003dd8:	6819      	ldreq	r1, [r3, #0]
 8003dda:	685b      	ldreq	r3, [r3, #4]
 8003ddc:	6063      	str	r3, [r4, #4]
 8003dde:	bf04      	itt	eq
 8003de0:	1949      	addeq	r1, r1, r5
 8003de2:	6021      	streq	r1, [r4, #0]
 8003de4:	6054      	str	r4, [r2, #4]
 8003de6:	e7ca      	b.n	8003d7e <_free_r+0x26>
 8003de8:	b003      	add	sp, #12
 8003dea:	bd30      	pop	{r4, r5, pc}
 8003dec:	200049e0 	.word	0x200049e0

08003df0 <sbrk_aligned>:
 8003df0:	b570      	push	{r4, r5, r6, lr}
 8003df2:	4e0e      	ldr	r6, [pc, #56]	; (8003e2c <sbrk_aligned+0x3c>)
 8003df4:	460c      	mov	r4, r1
 8003df6:	6831      	ldr	r1, [r6, #0]
 8003df8:	4605      	mov	r5, r0
 8003dfa:	b911      	cbnz	r1, 8003e02 <sbrk_aligned+0x12>
 8003dfc:	f000 f8bc 	bl	8003f78 <_sbrk_r>
 8003e00:	6030      	str	r0, [r6, #0]
 8003e02:	4621      	mov	r1, r4
 8003e04:	4628      	mov	r0, r5
 8003e06:	f000 f8b7 	bl	8003f78 <_sbrk_r>
 8003e0a:	1c43      	adds	r3, r0, #1
 8003e0c:	d00a      	beq.n	8003e24 <sbrk_aligned+0x34>
 8003e0e:	1cc4      	adds	r4, r0, #3
 8003e10:	f024 0403 	bic.w	r4, r4, #3
 8003e14:	42a0      	cmp	r0, r4
 8003e16:	d007      	beq.n	8003e28 <sbrk_aligned+0x38>
 8003e18:	1a21      	subs	r1, r4, r0
 8003e1a:	4628      	mov	r0, r5
 8003e1c:	f000 f8ac 	bl	8003f78 <_sbrk_r>
 8003e20:	3001      	adds	r0, #1
 8003e22:	d101      	bne.n	8003e28 <sbrk_aligned+0x38>
 8003e24:	f04f 34ff 	mov.w	r4, #4294967295
 8003e28:	4620      	mov	r0, r4
 8003e2a:	bd70      	pop	{r4, r5, r6, pc}
 8003e2c:	200049e4 	.word	0x200049e4

08003e30 <_malloc_r>:
 8003e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e34:	1ccd      	adds	r5, r1, #3
 8003e36:	f025 0503 	bic.w	r5, r5, #3
 8003e3a:	3508      	adds	r5, #8
 8003e3c:	2d0c      	cmp	r5, #12
 8003e3e:	bf38      	it	cc
 8003e40:	250c      	movcc	r5, #12
 8003e42:	2d00      	cmp	r5, #0
 8003e44:	4607      	mov	r7, r0
 8003e46:	db01      	blt.n	8003e4c <_malloc_r+0x1c>
 8003e48:	42a9      	cmp	r1, r5
 8003e4a:	d905      	bls.n	8003e58 <_malloc_r+0x28>
 8003e4c:	230c      	movs	r3, #12
 8003e4e:	603b      	str	r3, [r7, #0]
 8003e50:	2600      	movs	r6, #0
 8003e52:	4630      	mov	r0, r6
 8003e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e58:	4e2e      	ldr	r6, [pc, #184]	; (8003f14 <_malloc_r+0xe4>)
 8003e5a:	f000 f89d 	bl	8003f98 <__malloc_lock>
 8003e5e:	6833      	ldr	r3, [r6, #0]
 8003e60:	461c      	mov	r4, r3
 8003e62:	bb34      	cbnz	r4, 8003eb2 <_malloc_r+0x82>
 8003e64:	4629      	mov	r1, r5
 8003e66:	4638      	mov	r0, r7
 8003e68:	f7ff ffc2 	bl	8003df0 <sbrk_aligned>
 8003e6c:	1c43      	adds	r3, r0, #1
 8003e6e:	4604      	mov	r4, r0
 8003e70:	d14d      	bne.n	8003f0e <_malloc_r+0xde>
 8003e72:	6834      	ldr	r4, [r6, #0]
 8003e74:	4626      	mov	r6, r4
 8003e76:	2e00      	cmp	r6, #0
 8003e78:	d140      	bne.n	8003efc <_malloc_r+0xcc>
 8003e7a:	6823      	ldr	r3, [r4, #0]
 8003e7c:	4631      	mov	r1, r6
 8003e7e:	4638      	mov	r0, r7
 8003e80:	eb04 0803 	add.w	r8, r4, r3
 8003e84:	f000 f878 	bl	8003f78 <_sbrk_r>
 8003e88:	4580      	cmp	r8, r0
 8003e8a:	d13a      	bne.n	8003f02 <_malloc_r+0xd2>
 8003e8c:	6821      	ldr	r1, [r4, #0]
 8003e8e:	3503      	adds	r5, #3
 8003e90:	1a6d      	subs	r5, r5, r1
 8003e92:	f025 0503 	bic.w	r5, r5, #3
 8003e96:	3508      	adds	r5, #8
 8003e98:	2d0c      	cmp	r5, #12
 8003e9a:	bf38      	it	cc
 8003e9c:	250c      	movcc	r5, #12
 8003e9e:	4629      	mov	r1, r5
 8003ea0:	4638      	mov	r0, r7
 8003ea2:	f7ff ffa5 	bl	8003df0 <sbrk_aligned>
 8003ea6:	3001      	adds	r0, #1
 8003ea8:	d02b      	beq.n	8003f02 <_malloc_r+0xd2>
 8003eaa:	6823      	ldr	r3, [r4, #0]
 8003eac:	442b      	add	r3, r5
 8003eae:	6023      	str	r3, [r4, #0]
 8003eb0:	e00e      	b.n	8003ed0 <_malloc_r+0xa0>
 8003eb2:	6822      	ldr	r2, [r4, #0]
 8003eb4:	1b52      	subs	r2, r2, r5
 8003eb6:	d41e      	bmi.n	8003ef6 <_malloc_r+0xc6>
 8003eb8:	2a0b      	cmp	r2, #11
 8003eba:	d916      	bls.n	8003eea <_malloc_r+0xba>
 8003ebc:	1961      	adds	r1, r4, r5
 8003ebe:	42a3      	cmp	r3, r4
 8003ec0:	6025      	str	r5, [r4, #0]
 8003ec2:	bf18      	it	ne
 8003ec4:	6059      	strne	r1, [r3, #4]
 8003ec6:	6863      	ldr	r3, [r4, #4]
 8003ec8:	bf08      	it	eq
 8003eca:	6031      	streq	r1, [r6, #0]
 8003ecc:	5162      	str	r2, [r4, r5]
 8003ece:	604b      	str	r3, [r1, #4]
 8003ed0:	4638      	mov	r0, r7
 8003ed2:	f104 060b 	add.w	r6, r4, #11
 8003ed6:	f000 f865 	bl	8003fa4 <__malloc_unlock>
 8003eda:	f026 0607 	bic.w	r6, r6, #7
 8003ede:	1d23      	adds	r3, r4, #4
 8003ee0:	1af2      	subs	r2, r6, r3
 8003ee2:	d0b6      	beq.n	8003e52 <_malloc_r+0x22>
 8003ee4:	1b9b      	subs	r3, r3, r6
 8003ee6:	50a3      	str	r3, [r4, r2]
 8003ee8:	e7b3      	b.n	8003e52 <_malloc_r+0x22>
 8003eea:	6862      	ldr	r2, [r4, #4]
 8003eec:	42a3      	cmp	r3, r4
 8003eee:	bf0c      	ite	eq
 8003ef0:	6032      	streq	r2, [r6, #0]
 8003ef2:	605a      	strne	r2, [r3, #4]
 8003ef4:	e7ec      	b.n	8003ed0 <_malloc_r+0xa0>
 8003ef6:	4623      	mov	r3, r4
 8003ef8:	6864      	ldr	r4, [r4, #4]
 8003efa:	e7b2      	b.n	8003e62 <_malloc_r+0x32>
 8003efc:	4634      	mov	r4, r6
 8003efe:	6876      	ldr	r6, [r6, #4]
 8003f00:	e7b9      	b.n	8003e76 <_malloc_r+0x46>
 8003f02:	230c      	movs	r3, #12
 8003f04:	603b      	str	r3, [r7, #0]
 8003f06:	4638      	mov	r0, r7
 8003f08:	f000 f84c 	bl	8003fa4 <__malloc_unlock>
 8003f0c:	e7a1      	b.n	8003e52 <_malloc_r+0x22>
 8003f0e:	6025      	str	r5, [r4, #0]
 8003f10:	e7de      	b.n	8003ed0 <_malloc_r+0xa0>
 8003f12:	bf00      	nop
 8003f14:	200049e0 	.word	0x200049e0

08003f18 <_realloc_r>:
 8003f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f1c:	4680      	mov	r8, r0
 8003f1e:	4614      	mov	r4, r2
 8003f20:	460e      	mov	r6, r1
 8003f22:	b921      	cbnz	r1, 8003f2e <_realloc_r+0x16>
 8003f24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f28:	4611      	mov	r1, r2
 8003f2a:	f7ff bf81 	b.w	8003e30 <_malloc_r>
 8003f2e:	b92a      	cbnz	r2, 8003f3c <_realloc_r+0x24>
 8003f30:	f7ff ff12 	bl	8003d58 <_free_r>
 8003f34:	4625      	mov	r5, r4
 8003f36:	4628      	mov	r0, r5
 8003f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f3c:	f000 f838 	bl	8003fb0 <_malloc_usable_size_r>
 8003f40:	4284      	cmp	r4, r0
 8003f42:	4607      	mov	r7, r0
 8003f44:	d802      	bhi.n	8003f4c <_realloc_r+0x34>
 8003f46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003f4a:	d812      	bhi.n	8003f72 <_realloc_r+0x5a>
 8003f4c:	4621      	mov	r1, r4
 8003f4e:	4640      	mov	r0, r8
 8003f50:	f7ff ff6e 	bl	8003e30 <_malloc_r>
 8003f54:	4605      	mov	r5, r0
 8003f56:	2800      	cmp	r0, #0
 8003f58:	d0ed      	beq.n	8003f36 <_realloc_r+0x1e>
 8003f5a:	42bc      	cmp	r4, r7
 8003f5c:	4622      	mov	r2, r4
 8003f5e:	4631      	mov	r1, r6
 8003f60:	bf28      	it	cs
 8003f62:	463a      	movcs	r2, r7
 8003f64:	f7ff fbb8 	bl	80036d8 <memcpy>
 8003f68:	4631      	mov	r1, r6
 8003f6a:	4640      	mov	r0, r8
 8003f6c:	f7ff fef4 	bl	8003d58 <_free_r>
 8003f70:	e7e1      	b.n	8003f36 <_realloc_r+0x1e>
 8003f72:	4635      	mov	r5, r6
 8003f74:	e7df      	b.n	8003f36 <_realloc_r+0x1e>
	...

08003f78 <_sbrk_r>:
 8003f78:	b538      	push	{r3, r4, r5, lr}
 8003f7a:	4d06      	ldr	r5, [pc, #24]	; (8003f94 <_sbrk_r+0x1c>)
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	4604      	mov	r4, r0
 8003f80:	4608      	mov	r0, r1
 8003f82:	602b      	str	r3, [r5, #0]
 8003f84:	f7ff fa8c 	bl	80034a0 <_sbrk>
 8003f88:	1c43      	adds	r3, r0, #1
 8003f8a:	d102      	bne.n	8003f92 <_sbrk_r+0x1a>
 8003f8c:	682b      	ldr	r3, [r5, #0]
 8003f8e:	b103      	cbz	r3, 8003f92 <_sbrk_r+0x1a>
 8003f90:	6023      	str	r3, [r4, #0]
 8003f92:	bd38      	pop	{r3, r4, r5, pc}
 8003f94:	200049e8 	.word	0x200049e8

08003f98 <__malloc_lock>:
 8003f98:	4801      	ldr	r0, [pc, #4]	; (8003fa0 <__malloc_lock+0x8>)
 8003f9a:	f000 b811 	b.w	8003fc0 <__retarget_lock_acquire_recursive>
 8003f9e:	bf00      	nop
 8003fa0:	200049ec 	.word	0x200049ec

08003fa4 <__malloc_unlock>:
 8003fa4:	4801      	ldr	r0, [pc, #4]	; (8003fac <__malloc_unlock+0x8>)
 8003fa6:	f000 b80c 	b.w	8003fc2 <__retarget_lock_release_recursive>
 8003faa:	bf00      	nop
 8003fac:	200049ec 	.word	0x200049ec

08003fb0 <_malloc_usable_size_r>:
 8003fb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fb4:	1f18      	subs	r0, r3, #4
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	bfbc      	itt	lt
 8003fba:	580b      	ldrlt	r3, [r1, r0]
 8003fbc:	18c0      	addlt	r0, r0, r3
 8003fbe:	4770      	bx	lr

08003fc0 <__retarget_lock_acquire_recursive>:
 8003fc0:	4770      	bx	lr

08003fc2 <__retarget_lock_release_recursive>:
 8003fc2:	4770      	bx	lr

08003fc4 <_init>:
 8003fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fc6:	bf00      	nop
 8003fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fca:	bc08      	pop	{r3}
 8003fcc:	469e      	mov	lr, r3
 8003fce:	4770      	bx	lr

08003fd0 <_fini>:
 8003fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fd2:	bf00      	nop
 8003fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fd6:	bc08      	pop	{r3}
 8003fd8:	469e      	mov	lr, r3
 8003fda:	4770      	bx	lr
